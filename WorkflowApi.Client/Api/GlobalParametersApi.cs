/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using WorkflowApi.Client.Client;
using WorkflowApi.Client.Model;

namespace WorkflowApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalParametersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a single global parameter using type, name and creation request.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="globalParameterCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiDataGlobalParametersCreate(string type, string name, GlobalParameterCreateRequest globalParameterCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create a single global parameter using type, name and creation request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="globalParameterCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiDataGlobalParametersCreateWithHttpInfo(string type, string name, GlobalParameterCreateRequest globalParameterCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Create multiple global parameters from an array of creation requests.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalParameterCreateRequestWithTypeName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCollectionResponse</returns>
        CreateCollectionResponse WorkflowApiDataGlobalParametersCreateCollection(List<GlobalParameterCreateRequestWithTypeName> globalParameterCreateRequestWithTypeName, int operationIndex = 0);

        /// <summary>
        /// Create multiple global parameters from an array of creation requests.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalParameterCreateRequestWithTypeName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCollectionResponse</returns>
        ApiResponse<CreateCollectionResponse> WorkflowApiDataGlobalParametersCreateCollectionWithHttpInfo(List<GlobalParameterCreateRequestWithTypeName> globalParameterCreateRequestWithTypeName, int operationIndex = 0);
        /// <summary>
        /// Delete a single global parameter by type and name.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteResponse</returns>
        DeleteResponse WorkflowApiDataGlobalParametersDelete(string type, string name, int operationIndex = 0);

        /// <summary>
        /// Delete a single global parameter by type and name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        ApiResponse<DeleteResponse> WorkflowApiDataGlobalParametersDeleteWithHttpInfo(string type, string name, int operationIndex = 0);
        /// <summary>
        /// Delete multiple global parameters based on optional filters.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteCollectionResponse</returns>
        DeleteCollectionResponse WorkflowApiDataGlobalParametersDeleteCollection(List<GlobalParameterFieldFilter>? filters = default(List<GlobalParameterFieldFilter>?), int operationIndex = 0);

        /// <summary>
        /// Delete multiple global parameters based on optional filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteCollectionResponse</returns>
        ApiResponse<DeleteCollectionResponse> WorkflowApiDataGlobalParametersDeleteCollectionWithHttpInfo(List<GlobalParameterFieldFilter>? filters = default(List<GlobalParameterFieldFilter>?), int operationIndex = 0);
        /// <summary>
        /// Retrieve a single global parameter by type and name.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GlobalParameterModel</returns>
        GlobalParameterModel WorkflowApiDataGlobalParametersGet(string type, string name, int operationIndex = 0);

        /// <summary>
        /// Retrieve a single global parameter by type and name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GlobalParameterModel</returns>
        ApiResponse<GlobalParameterModel> WorkflowApiDataGlobalParametersGetWithHttpInfo(string type, string name, int operationIndex = 0);
        /// <summary>
        /// Retrieve global parameters collection and total count, with optional search, filters, sorting, and paging.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GlobalParameterModelGetCollectionResponse</returns>
        GlobalParameterModelGetCollectionResponse WorkflowApiDataGlobalParametersGetCollection(string? search = default(string?), List<GlobalParameterFieldFilter>? filters = default(List<GlobalParameterFieldFilter>?), List<GlobalParameterFieldSort>? sorts = default(List<GlobalParameterFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0);

        /// <summary>
        /// Retrieve global parameters collection and total count, with optional search, filters, sorting, and paging.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GlobalParameterModelGetCollectionResponse</returns>
        ApiResponse<GlobalParameterModelGetCollectionResponse> WorkflowApiDataGlobalParametersGetCollectionWithHttpInfo(string? search = default(string?), List<GlobalParameterFieldFilter>? filters = default(List<GlobalParameterFieldFilter>?), List<GlobalParameterFieldSort>? sorts = default(List<GlobalParameterFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0);
        /// <summary>
        /// Update a single global parameter by type and name, using an update request.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="globalParameterUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateResponse</returns>
        UpdateResponse WorkflowApiDataGlobalParametersUpdate(string type, string name, GlobalParameterUpdateRequest globalParameterUpdateRequest, int operationIndex = 0);

        /// <summary>
        /// Update a single global parameter by type and name, using an update request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="globalParameterUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateResponse</returns>
        ApiResponse<UpdateResponse> WorkflowApiDataGlobalParametersUpdateWithHttpInfo(string type, string name, GlobalParameterUpdateRequest globalParameterUpdateRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve global parameters collection and total count, with optional search, filters, sorting, and paging.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalParameterFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GlobalParameterModelGetCollectionResponse</returns>
        GlobalParameterModelGetCollectionResponse WorkflowApiSearchGlobalParameters(GlobalParameterFieldQuery globalParameterFieldQuery, int operationIndex = 0);

        /// <summary>
        /// Retrieve global parameters collection and total count, with optional search, filters, sorting, and paging.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalParameterFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GlobalParameterModelGetCollectionResponse</returns>
        ApiResponse<GlobalParameterModelGetCollectionResponse> WorkflowApiSearchGlobalParametersWithHttpInfo(GlobalParameterFieldQuery globalParameterFieldQuery, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalParametersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a single global parameter using type, name and creation request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="globalParameterCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiDataGlobalParametersCreateAsync(string type, string name, GlobalParameterCreateRequest globalParameterCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a single global parameter using type, name and creation request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="globalParameterCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiDataGlobalParametersCreateWithHttpInfoAsync(string type, string name, GlobalParameterCreateRequest globalParameterCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create multiple global parameters from an array of creation requests.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalParameterCreateRequestWithTypeName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCollectionResponse</returns>
        System.Threading.Tasks.Task<CreateCollectionResponse> WorkflowApiDataGlobalParametersCreateCollectionAsync(List<GlobalParameterCreateRequestWithTypeName> globalParameterCreateRequestWithTypeName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create multiple global parameters from an array of creation requests.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalParameterCreateRequestWithTypeName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCollectionResponse>> WorkflowApiDataGlobalParametersCreateCollectionWithHttpInfoAsync(List<GlobalParameterCreateRequestWithTypeName> globalParameterCreateRequestWithTypeName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a single global parameter by type and name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteResponse</returns>
        System.Threading.Tasks.Task<DeleteResponse> WorkflowApiDataGlobalParametersDeleteAsync(string type, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a single global parameter by type and name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> WorkflowApiDataGlobalParametersDeleteWithHttpInfoAsync(string type, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete multiple global parameters based on optional filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCollectionResponse</returns>
        System.Threading.Tasks.Task<DeleteCollectionResponse> WorkflowApiDataGlobalParametersDeleteCollectionAsync(List<GlobalParameterFieldFilter>? filters = default(List<GlobalParameterFieldFilter>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete multiple global parameters based on optional filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteCollectionResponse>> WorkflowApiDataGlobalParametersDeleteCollectionWithHttpInfoAsync(List<GlobalParameterFieldFilter>? filters = default(List<GlobalParameterFieldFilter>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a single global parameter by type and name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GlobalParameterModel</returns>
        System.Threading.Tasks.Task<GlobalParameterModel> WorkflowApiDataGlobalParametersGetAsync(string type, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a single global parameter by type and name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GlobalParameterModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlobalParameterModel>> WorkflowApiDataGlobalParametersGetWithHttpInfoAsync(string type, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve global parameters collection and total count, with optional search, filters, sorting, and paging.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GlobalParameterModelGetCollectionResponse</returns>
        System.Threading.Tasks.Task<GlobalParameterModelGetCollectionResponse> WorkflowApiDataGlobalParametersGetCollectionAsync(string? search = default(string?), List<GlobalParameterFieldFilter>? filters = default(List<GlobalParameterFieldFilter>?), List<GlobalParameterFieldSort>? sorts = default(List<GlobalParameterFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve global parameters collection and total count, with optional search, filters, sorting, and paging.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GlobalParameterModelGetCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlobalParameterModelGetCollectionResponse>> WorkflowApiDataGlobalParametersGetCollectionWithHttpInfoAsync(string? search = default(string?), List<GlobalParameterFieldFilter>? filters = default(List<GlobalParameterFieldFilter>?), List<GlobalParameterFieldSort>? sorts = default(List<GlobalParameterFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a single global parameter by type and name, using an update request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="globalParameterUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateResponse</returns>
        System.Threading.Tasks.Task<UpdateResponse> WorkflowApiDataGlobalParametersUpdateAsync(string type, string name, GlobalParameterUpdateRequest globalParameterUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a single global parameter by type and name, using an update request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="globalParameterUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateResponse>> WorkflowApiDataGlobalParametersUpdateWithHttpInfoAsync(string type, string name, GlobalParameterUpdateRequest globalParameterUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve global parameters collection and total count, with optional search, filters, sorting, and paging.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalParameterFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GlobalParameterModelGetCollectionResponse</returns>
        System.Threading.Tasks.Task<GlobalParameterModelGetCollectionResponse> WorkflowApiSearchGlobalParametersAsync(GlobalParameterFieldQuery globalParameterFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve global parameters collection and total count, with optional search, filters, sorting, and paging.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalParameterFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GlobalParameterModelGetCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlobalParameterModelGetCollectionResponse>> WorkflowApiSearchGlobalParametersWithHttpInfoAsync(GlobalParameterFieldQuery globalParameterFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalParametersApi : IGlobalParametersApiSync, IGlobalParametersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GlobalParametersApi : IGlobalParametersApi
    {
        private WorkflowApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalParametersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlobalParametersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalParametersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlobalParametersApi(string basePath)
        {
            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                new WorkflowApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalParametersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GlobalParametersApi(WorkflowApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalParametersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GlobalParametersApi(WorkflowApi.Client.Client.ISynchronousClient client, WorkflowApi.Client.Client.IAsynchronousClient asyncClient, WorkflowApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public WorkflowApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public WorkflowApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public WorkflowApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WorkflowApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a single global parameter using type, name and creation request. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="globalParameterCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiDataGlobalParametersCreate(string type, string name, GlobalParameterCreateRequest globalParameterCreateRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiDataGlobalParametersCreateWithHttpInfo(type, name, globalParameterCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a single global parameter using type, name and creation request. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="globalParameterCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiDataGlobalParametersCreateWithHttpInfo(string type, string name, GlobalParameterCreateRequest globalParameterCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'type' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersCreate");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'name' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersCreate");
            }

            // verify the required parameter 'globalParameterCreateRequest' is set
            if (globalParameterCreateRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'globalParameterCreateRequest' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersCreate");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", WorkflowApi.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", WorkflowApi.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = globalParameterCreateRequest;

            localVarRequestOptions.Operation = "GlobalParametersApi.WorkflowApiDataGlobalParametersCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/data/global-parameters/{type}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataGlobalParametersCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a single global parameter using type, name and creation request. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="globalParameterCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiDataGlobalParametersCreateAsync(string type, string name, GlobalParameterCreateRequest globalParameterCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiDataGlobalParametersCreateWithHttpInfoAsync(type, name, globalParameterCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a single global parameter using type, name and creation request. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="globalParameterCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiDataGlobalParametersCreateWithHttpInfoAsync(string type, string name, GlobalParameterCreateRequest globalParameterCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'type' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersCreate");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'name' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersCreate");
            }

            // verify the required parameter 'globalParameterCreateRequest' is set
            if (globalParameterCreateRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'globalParameterCreateRequest' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersCreate");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", WorkflowApi.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", WorkflowApi.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = globalParameterCreateRequest;

            localVarRequestOptions.Operation = "GlobalParametersApi.WorkflowApiDataGlobalParametersCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/data/global-parameters/{type}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataGlobalParametersCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create multiple global parameters from an array of creation requests. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalParameterCreateRequestWithTypeName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCollectionResponse</returns>
        public CreateCollectionResponse WorkflowApiDataGlobalParametersCreateCollection(List<GlobalParameterCreateRequestWithTypeName> globalParameterCreateRequestWithTypeName, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<CreateCollectionResponse> localVarResponse = WorkflowApiDataGlobalParametersCreateCollectionWithHttpInfo(globalParameterCreateRequestWithTypeName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create multiple global parameters from an array of creation requests. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalParameterCreateRequestWithTypeName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<CreateCollectionResponse> WorkflowApiDataGlobalParametersCreateCollectionWithHttpInfo(List<GlobalParameterCreateRequestWithTypeName> globalParameterCreateRequestWithTypeName, int operationIndex = 0)
        {
            // verify the required parameter 'globalParameterCreateRequestWithTypeName' is set
            if (globalParameterCreateRequestWithTypeName == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'globalParameterCreateRequestWithTypeName' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersCreateCollection");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = globalParameterCreateRequestWithTypeName;

            localVarRequestOptions.Operation = "GlobalParametersApi.WorkflowApiDataGlobalParametersCreateCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCollectionResponse>("/workflow-api/data/global-parameters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataGlobalParametersCreateCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create multiple global parameters from an array of creation requests. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalParameterCreateRequestWithTypeName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCollectionResponse</returns>
        public async System.Threading.Tasks.Task<CreateCollectionResponse> WorkflowApiDataGlobalParametersCreateCollectionAsync(List<GlobalParameterCreateRequestWithTypeName> globalParameterCreateRequestWithTypeName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<CreateCollectionResponse> localVarResponse = await WorkflowApiDataGlobalParametersCreateCollectionWithHttpInfoAsync(globalParameterCreateRequestWithTypeName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create multiple global parameters from an array of creation requests. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalParameterCreateRequestWithTypeName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<CreateCollectionResponse>> WorkflowApiDataGlobalParametersCreateCollectionWithHttpInfoAsync(List<GlobalParameterCreateRequestWithTypeName> globalParameterCreateRequestWithTypeName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'globalParameterCreateRequestWithTypeName' is set
            if (globalParameterCreateRequestWithTypeName == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'globalParameterCreateRequestWithTypeName' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersCreateCollection");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = globalParameterCreateRequestWithTypeName;

            localVarRequestOptions.Operation = "GlobalParametersApi.WorkflowApiDataGlobalParametersCreateCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCollectionResponse>("/workflow-api/data/global-parameters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataGlobalParametersCreateCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a single global parameter by type and name. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteResponse</returns>
        public DeleteResponse WorkflowApiDataGlobalParametersDelete(string type, string name, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteResponse> localVarResponse = WorkflowApiDataGlobalParametersDeleteWithHttpInfo(type, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a single global parameter by type and name. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<DeleteResponse> WorkflowApiDataGlobalParametersDeleteWithHttpInfo(string type, string name, int operationIndex = 0)
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'type' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersDelete");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'name' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersDelete");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", WorkflowApi.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", WorkflowApi.Client.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "GlobalParametersApi.WorkflowApiDataGlobalParametersDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteResponse>("/workflow-api/data/global-parameters/{type}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataGlobalParametersDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a single global parameter by type and name. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteResponse</returns>
        public async System.Threading.Tasks.Task<DeleteResponse> WorkflowApiDataGlobalParametersDeleteAsync(string type, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteResponse> localVarResponse = await WorkflowApiDataGlobalParametersDeleteWithHttpInfoAsync(type, name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a single global parameter by type and name. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<DeleteResponse>> WorkflowApiDataGlobalParametersDeleteWithHttpInfoAsync(string type, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'type' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersDelete");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'name' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersDelete");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", WorkflowApi.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", WorkflowApi.Client.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "GlobalParametersApi.WorkflowApiDataGlobalParametersDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteResponse>("/workflow-api/data/global-parameters/{type}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataGlobalParametersDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete multiple global parameters based on optional filters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteCollectionResponse</returns>
        public DeleteCollectionResponse WorkflowApiDataGlobalParametersDeleteCollection(List<GlobalParameterFieldFilter>? filters = default(List<GlobalParameterFieldFilter>?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteCollectionResponse> localVarResponse = WorkflowApiDataGlobalParametersDeleteCollectionWithHttpInfo(filters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete multiple global parameters based on optional filters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<DeleteCollectionResponse> WorkflowApiDataGlobalParametersDeleteCollectionWithHttpInfo(List<GlobalParameterFieldFilter>? filters = default(List<GlobalParameterFieldFilter>?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }

            localVarRequestOptions.Operation = "GlobalParametersApi.WorkflowApiDataGlobalParametersDeleteCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteCollectionResponse>("/workflow-api/data/global-parameters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataGlobalParametersDeleteCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete multiple global parameters based on optional filters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCollectionResponse</returns>
        public async System.Threading.Tasks.Task<DeleteCollectionResponse> WorkflowApiDataGlobalParametersDeleteCollectionAsync(List<GlobalParameterFieldFilter>? filters = default(List<GlobalParameterFieldFilter>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteCollectionResponse> localVarResponse = await WorkflowApiDataGlobalParametersDeleteCollectionWithHttpInfoAsync(filters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete multiple global parameters based on optional filters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<DeleteCollectionResponse>> WorkflowApiDataGlobalParametersDeleteCollectionWithHttpInfoAsync(List<GlobalParameterFieldFilter>? filters = default(List<GlobalParameterFieldFilter>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }

            localVarRequestOptions.Operation = "GlobalParametersApi.WorkflowApiDataGlobalParametersDeleteCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteCollectionResponse>("/workflow-api/data/global-parameters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataGlobalParametersDeleteCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a single global parameter by type and name. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GlobalParameterModel</returns>
        public GlobalParameterModel WorkflowApiDataGlobalParametersGet(string type, string name, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GlobalParameterModel> localVarResponse = WorkflowApiDataGlobalParametersGetWithHttpInfo(type, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a single global parameter by type and name. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GlobalParameterModel</returns>
        public WorkflowApi.Client.Client.ApiResponse<GlobalParameterModel> WorkflowApiDataGlobalParametersGetWithHttpInfo(string type, string name, int operationIndex = 0)
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'type' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersGet");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'name' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersGet");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", WorkflowApi.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", WorkflowApi.Client.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "GlobalParametersApi.WorkflowApiDataGlobalParametersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GlobalParameterModel>("/workflow-api/data/global-parameters/{type}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataGlobalParametersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a single global parameter by type and name. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GlobalParameterModel</returns>
        public async System.Threading.Tasks.Task<GlobalParameterModel> WorkflowApiDataGlobalParametersGetAsync(string type, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GlobalParameterModel> localVarResponse = await WorkflowApiDataGlobalParametersGetWithHttpInfoAsync(type, name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a single global parameter by type and name. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GlobalParameterModel)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GlobalParameterModel>> WorkflowApiDataGlobalParametersGetWithHttpInfoAsync(string type, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'type' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersGet");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'name' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersGet");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", WorkflowApi.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", WorkflowApi.Client.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "GlobalParametersApi.WorkflowApiDataGlobalParametersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GlobalParameterModel>("/workflow-api/data/global-parameters/{type}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataGlobalParametersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve global parameters collection and total count, with optional search, filters, sorting, and paging. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GlobalParameterModelGetCollectionResponse</returns>
        public GlobalParameterModelGetCollectionResponse WorkflowApiDataGlobalParametersGetCollection(string? search = default(string?), List<GlobalParameterFieldFilter>? filters = default(List<GlobalParameterFieldFilter>?), List<GlobalParameterFieldSort>? sorts = default(List<GlobalParameterFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GlobalParameterModelGetCollectionResponse> localVarResponse = WorkflowApiDataGlobalParametersGetCollectionWithHttpInfo(search, filters, sorts, skip, take);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve global parameters collection and total count, with optional search, filters, sorting, and paging. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GlobalParameterModelGetCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<GlobalParameterModelGetCollectionResponse> WorkflowApiDataGlobalParametersGetCollectionWithHttpInfo(string? search = default(string?), List<GlobalParameterFieldFilter>? filters = default(List<GlobalParameterFieldFilter>?), List<GlobalParameterFieldSort>? sorts = default(List<GlobalParameterFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }
            if (sorts != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "sorts", sorts));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "take", take));
            }

            localVarRequestOptions.Operation = "GlobalParametersApi.WorkflowApiDataGlobalParametersGetCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GlobalParameterModelGetCollectionResponse>("/workflow-api/data/global-parameters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataGlobalParametersGetCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve global parameters collection and total count, with optional search, filters, sorting, and paging. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GlobalParameterModelGetCollectionResponse</returns>
        public async System.Threading.Tasks.Task<GlobalParameterModelGetCollectionResponse> WorkflowApiDataGlobalParametersGetCollectionAsync(string? search = default(string?), List<GlobalParameterFieldFilter>? filters = default(List<GlobalParameterFieldFilter>?), List<GlobalParameterFieldSort>? sorts = default(List<GlobalParameterFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GlobalParameterModelGetCollectionResponse> localVarResponse = await WorkflowApiDataGlobalParametersGetCollectionWithHttpInfoAsync(search, filters, sorts, skip, take, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve global parameters collection and total count, with optional search, filters, sorting, and paging. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GlobalParameterModelGetCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GlobalParameterModelGetCollectionResponse>> WorkflowApiDataGlobalParametersGetCollectionWithHttpInfoAsync(string? search = default(string?), List<GlobalParameterFieldFilter>? filters = default(List<GlobalParameterFieldFilter>?), List<GlobalParameterFieldSort>? sorts = default(List<GlobalParameterFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }
            if (sorts != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "sorts", sorts));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "take", take));
            }

            localVarRequestOptions.Operation = "GlobalParametersApi.WorkflowApiDataGlobalParametersGetCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GlobalParameterModelGetCollectionResponse>("/workflow-api/data/global-parameters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataGlobalParametersGetCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a single global parameter by type and name, using an update request. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="globalParameterUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateResponse</returns>
        public UpdateResponse WorkflowApiDataGlobalParametersUpdate(string type, string name, GlobalParameterUpdateRequest globalParameterUpdateRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<UpdateResponse> localVarResponse = WorkflowApiDataGlobalParametersUpdateWithHttpInfo(type, name, globalParameterUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a single global parameter by type and name, using an update request. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="globalParameterUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<UpdateResponse> WorkflowApiDataGlobalParametersUpdateWithHttpInfo(string type, string name, GlobalParameterUpdateRequest globalParameterUpdateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'type' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersUpdate");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'name' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersUpdate");
            }

            // verify the required parameter 'globalParameterUpdateRequest' is set
            if (globalParameterUpdateRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'globalParameterUpdateRequest' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersUpdate");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", WorkflowApi.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", WorkflowApi.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = globalParameterUpdateRequest;

            localVarRequestOptions.Operation = "GlobalParametersApi.WorkflowApiDataGlobalParametersUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdateResponse>("/workflow-api/data/global-parameters/{type}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataGlobalParametersUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a single global parameter by type and name, using an update request. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="globalParameterUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateResponse</returns>
        public async System.Threading.Tasks.Task<UpdateResponse> WorkflowApiDataGlobalParametersUpdateAsync(string type, string name, GlobalParameterUpdateRequest globalParameterUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<UpdateResponse> localVarResponse = await WorkflowApiDataGlobalParametersUpdateWithHttpInfoAsync(type, name, globalParameterUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a single global parameter by type and name, using an update request. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="globalParameterUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<UpdateResponse>> WorkflowApiDataGlobalParametersUpdateWithHttpInfoAsync(string type, string name, GlobalParameterUpdateRequest globalParameterUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'type' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersUpdate");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'name' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersUpdate");
            }

            // verify the required parameter 'globalParameterUpdateRequest' is set
            if (globalParameterUpdateRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'globalParameterUpdateRequest' when calling GlobalParametersApi->WorkflowApiDataGlobalParametersUpdate");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", WorkflowApi.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", WorkflowApi.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = globalParameterUpdateRequest;

            localVarRequestOptions.Operation = "GlobalParametersApi.WorkflowApiDataGlobalParametersUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateResponse>("/workflow-api/data/global-parameters/{type}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataGlobalParametersUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve global parameters collection and total count, with optional search, filters, sorting, and paging. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalParameterFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GlobalParameterModelGetCollectionResponse</returns>
        public GlobalParameterModelGetCollectionResponse WorkflowApiSearchGlobalParameters(GlobalParameterFieldQuery globalParameterFieldQuery, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GlobalParameterModelGetCollectionResponse> localVarResponse = WorkflowApiSearchGlobalParametersWithHttpInfo(globalParameterFieldQuery);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve global parameters collection and total count, with optional search, filters, sorting, and paging. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalParameterFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GlobalParameterModelGetCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<GlobalParameterModelGetCollectionResponse> WorkflowApiSearchGlobalParametersWithHttpInfo(GlobalParameterFieldQuery globalParameterFieldQuery, int operationIndex = 0)
        {
            // verify the required parameter 'globalParameterFieldQuery' is set
            if (globalParameterFieldQuery == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'globalParameterFieldQuery' when calling GlobalParametersApi->WorkflowApiSearchGlobalParameters");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = globalParameterFieldQuery;

            localVarRequestOptions.Operation = "GlobalParametersApi.WorkflowApiSearchGlobalParameters";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GlobalParameterModelGetCollectionResponse>("/workflow-api/search/global-parameters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiSearchGlobalParameters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve global parameters collection and total count, with optional search, filters, sorting, and paging. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalParameterFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GlobalParameterModelGetCollectionResponse</returns>
        public async System.Threading.Tasks.Task<GlobalParameterModelGetCollectionResponse> WorkflowApiSearchGlobalParametersAsync(GlobalParameterFieldQuery globalParameterFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GlobalParameterModelGetCollectionResponse> localVarResponse = await WorkflowApiSearchGlobalParametersWithHttpInfoAsync(globalParameterFieldQuery, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve global parameters collection and total count, with optional search, filters, sorting, and paging. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalParameterFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GlobalParameterModelGetCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GlobalParameterModelGetCollectionResponse>> WorkflowApiSearchGlobalParametersWithHttpInfoAsync(GlobalParameterFieldQuery globalParameterFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'globalParameterFieldQuery' is set
            if (globalParameterFieldQuery == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'globalParameterFieldQuery' when calling GlobalParametersApi->WorkflowApiSearchGlobalParameters");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = globalParameterFieldQuery;

            localVarRequestOptions.Operation = "GlobalParametersApi.WorkflowApiSearchGlobalParameters";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GlobalParameterModelGetCollectionResponse>("/workflow-api/search/global-parameters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiSearchGlobalParameters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
