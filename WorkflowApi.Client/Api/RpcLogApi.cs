/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using WorkflowApi.Client.Client;
using WorkflowApi.Client.Model;

namespace WorkflowApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcLogApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Logs a debug message with parameters.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logDebugRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiRpcLogDebug(LogDebugRequest logDebugRequest, int operationIndex = 0);

        /// <summary>
        /// Logs a debug message with parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logDebugRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiRpcLogDebugWithHttpInfo(LogDebugRequest logDebugRequest, int operationIndex = 0);
        /// <summary>
        /// Logs a debug message with parameters if the logger exists.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logDebugIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiRpcLogDebugIfLoggerExists(LogDebugIfLoggerExistsRequest logDebugIfLoggerExistsRequest, int operationIndex = 0);

        /// <summary>
        /// Logs a debug message with parameters if the logger exists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logDebugIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiRpcLogDebugIfLoggerExistsWithHttpInfo(LogDebugIfLoggerExistsRequest logDebugIfLoggerExistsRequest, int operationIndex = 0);
        /// <summary>
        /// Logs an error message with parameters.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logErrorRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiRpcLogError(LogErrorRequest logErrorRequest, int operationIndex = 0);

        /// <summary>
        /// Logs an error message with parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logErrorRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiRpcLogErrorWithHttpInfo(LogErrorRequest logErrorRequest, int operationIndex = 0);
        /// <summary>
        /// Logs an error message with parameters if the logger exists.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logErrorIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiRpcLogErrorIfLoggerExists(LogErrorIfLoggerExistsRequest logErrorIfLoggerExistsRequest, int operationIndex = 0);

        /// <summary>
        /// Logs an error message with parameters if the logger exists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logErrorIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiRpcLogErrorIfLoggerExistsWithHttpInfo(LogErrorIfLoggerExistsRequest logErrorIfLoggerExistsRequest, int operationIndex = 0);
        /// <summary>
        /// Logs an info message with parameters.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiRpcLogInfo(LogInfoRequest logInfoRequest, int operationIndex = 0);

        /// <summary>
        /// Logs an info message with parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiRpcLogInfoWithHttpInfo(LogInfoRequest logInfoRequest, int operationIndex = 0);
        /// <summary>
        /// Logs an info message with parameters if the logger exists.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logInfoIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiRpcLogInfoIfLoggerExists(LogInfoIfLoggerExistsRequest logInfoIfLoggerExistsRequest, int operationIndex = 0);

        /// <summary>
        /// Logs an info message with parameters if the logger exists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logInfoIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiRpcLogInfoIfLoggerExistsWithHttpInfo(LogInfoIfLoggerExistsRequest logInfoIfLoggerExistsRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcLogApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Logs a debug message with parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logDebugRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiRpcLogDebugAsync(LogDebugRequest logDebugRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Logs a debug message with parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logDebugRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiRpcLogDebugWithHttpInfoAsync(LogDebugRequest logDebugRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Logs a debug message with parameters if the logger exists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logDebugIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiRpcLogDebugIfLoggerExistsAsync(LogDebugIfLoggerExistsRequest logDebugIfLoggerExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Logs a debug message with parameters if the logger exists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logDebugIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiRpcLogDebugIfLoggerExistsWithHttpInfoAsync(LogDebugIfLoggerExistsRequest logDebugIfLoggerExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Logs an error message with parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logErrorRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiRpcLogErrorAsync(LogErrorRequest logErrorRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Logs an error message with parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logErrorRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiRpcLogErrorWithHttpInfoAsync(LogErrorRequest logErrorRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Logs an error message with parameters if the logger exists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logErrorIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiRpcLogErrorIfLoggerExistsAsync(LogErrorIfLoggerExistsRequest logErrorIfLoggerExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Logs an error message with parameters if the logger exists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logErrorIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiRpcLogErrorIfLoggerExistsWithHttpInfoAsync(LogErrorIfLoggerExistsRequest logErrorIfLoggerExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Logs an info message with parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiRpcLogInfoAsync(LogInfoRequest logInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Logs an info message with parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiRpcLogInfoWithHttpInfoAsync(LogInfoRequest logInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Logs an info message with parameters if the logger exists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logInfoIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiRpcLogInfoIfLoggerExistsAsync(LogInfoIfLoggerExistsRequest logInfoIfLoggerExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Logs an info message with parameters if the logger exists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logInfoIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiRpcLogInfoIfLoggerExistsWithHttpInfoAsync(LogInfoIfLoggerExistsRequest logInfoIfLoggerExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcLogApi : IRpcLogApiSync, IRpcLogApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RpcLogApi : IRpcLogApi
    {
        private WorkflowApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcLogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RpcLogApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcLogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RpcLogApi(string basePath)
        {
            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                new WorkflowApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcLogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RpcLogApi(WorkflowApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcLogApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RpcLogApi(WorkflowApi.Client.Client.ISynchronousClient client, WorkflowApi.Client.Client.IAsynchronousClient asyncClient, WorkflowApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public WorkflowApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public WorkflowApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public WorkflowApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WorkflowApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Logs a debug message with parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logDebugRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiRpcLogDebug(LogDebugRequest logDebugRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiRpcLogDebugWithHttpInfo(logDebugRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs a debug message with parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logDebugRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiRpcLogDebugWithHttpInfo(LogDebugRequest logDebugRequest, int operationIndex = 0)
        {
            // verify the required parameter 'logDebugRequest' is set
            if (logDebugRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'logDebugRequest' when calling RpcLogApi->WorkflowApiRpcLogDebug");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = logDebugRequest;

            localVarRequestOptions.Operation = "RpcLogApi.WorkflowApiRpcLogDebug";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/rpc/log-debug", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcLogDebug", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs a debug message with parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logDebugRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiRpcLogDebugAsync(LogDebugRequest logDebugRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiRpcLogDebugWithHttpInfoAsync(logDebugRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs a debug message with parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logDebugRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiRpcLogDebugWithHttpInfoAsync(LogDebugRequest logDebugRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logDebugRequest' is set
            if (logDebugRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'logDebugRequest' when calling RpcLogApi->WorkflowApiRpcLogDebug");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = logDebugRequest;

            localVarRequestOptions.Operation = "RpcLogApi.WorkflowApiRpcLogDebug";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/rpc/log-debug", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcLogDebug", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs a debug message with parameters if the logger exists. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logDebugIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiRpcLogDebugIfLoggerExists(LogDebugIfLoggerExistsRequest logDebugIfLoggerExistsRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiRpcLogDebugIfLoggerExistsWithHttpInfo(logDebugIfLoggerExistsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs a debug message with parameters if the logger exists. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logDebugIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiRpcLogDebugIfLoggerExistsWithHttpInfo(LogDebugIfLoggerExistsRequest logDebugIfLoggerExistsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'logDebugIfLoggerExistsRequest' is set
            if (logDebugIfLoggerExistsRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'logDebugIfLoggerExistsRequest' when calling RpcLogApi->WorkflowApiRpcLogDebugIfLoggerExists");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = logDebugIfLoggerExistsRequest;

            localVarRequestOptions.Operation = "RpcLogApi.WorkflowApiRpcLogDebugIfLoggerExists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/rpc/log-debug-if-logger-exists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcLogDebugIfLoggerExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs a debug message with parameters if the logger exists. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logDebugIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiRpcLogDebugIfLoggerExistsAsync(LogDebugIfLoggerExistsRequest logDebugIfLoggerExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiRpcLogDebugIfLoggerExistsWithHttpInfoAsync(logDebugIfLoggerExistsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs a debug message with parameters if the logger exists. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logDebugIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiRpcLogDebugIfLoggerExistsWithHttpInfoAsync(LogDebugIfLoggerExistsRequest logDebugIfLoggerExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logDebugIfLoggerExistsRequest' is set
            if (logDebugIfLoggerExistsRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'logDebugIfLoggerExistsRequest' when calling RpcLogApi->WorkflowApiRpcLogDebugIfLoggerExists");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = logDebugIfLoggerExistsRequest;

            localVarRequestOptions.Operation = "RpcLogApi.WorkflowApiRpcLogDebugIfLoggerExists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/rpc/log-debug-if-logger-exists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcLogDebugIfLoggerExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs an error message with parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logErrorRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiRpcLogError(LogErrorRequest logErrorRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiRpcLogErrorWithHttpInfo(logErrorRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs an error message with parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logErrorRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiRpcLogErrorWithHttpInfo(LogErrorRequest logErrorRequest, int operationIndex = 0)
        {
            // verify the required parameter 'logErrorRequest' is set
            if (logErrorRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'logErrorRequest' when calling RpcLogApi->WorkflowApiRpcLogError");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = logErrorRequest;

            localVarRequestOptions.Operation = "RpcLogApi.WorkflowApiRpcLogError";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/rpc/log-error", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcLogError", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs an error message with parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logErrorRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiRpcLogErrorAsync(LogErrorRequest logErrorRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiRpcLogErrorWithHttpInfoAsync(logErrorRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs an error message with parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logErrorRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiRpcLogErrorWithHttpInfoAsync(LogErrorRequest logErrorRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logErrorRequest' is set
            if (logErrorRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'logErrorRequest' when calling RpcLogApi->WorkflowApiRpcLogError");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = logErrorRequest;

            localVarRequestOptions.Operation = "RpcLogApi.WorkflowApiRpcLogError";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/rpc/log-error", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcLogError", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs an error message with parameters if the logger exists. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logErrorIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiRpcLogErrorIfLoggerExists(LogErrorIfLoggerExistsRequest logErrorIfLoggerExistsRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiRpcLogErrorIfLoggerExistsWithHttpInfo(logErrorIfLoggerExistsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs an error message with parameters if the logger exists. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logErrorIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiRpcLogErrorIfLoggerExistsWithHttpInfo(LogErrorIfLoggerExistsRequest logErrorIfLoggerExistsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'logErrorIfLoggerExistsRequest' is set
            if (logErrorIfLoggerExistsRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'logErrorIfLoggerExistsRequest' when calling RpcLogApi->WorkflowApiRpcLogErrorIfLoggerExists");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = logErrorIfLoggerExistsRequest;

            localVarRequestOptions.Operation = "RpcLogApi.WorkflowApiRpcLogErrorIfLoggerExists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/rpc/log-error-if-logger-exists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcLogErrorIfLoggerExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs an error message with parameters if the logger exists. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logErrorIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiRpcLogErrorIfLoggerExistsAsync(LogErrorIfLoggerExistsRequest logErrorIfLoggerExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiRpcLogErrorIfLoggerExistsWithHttpInfoAsync(logErrorIfLoggerExistsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs an error message with parameters if the logger exists. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logErrorIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiRpcLogErrorIfLoggerExistsWithHttpInfoAsync(LogErrorIfLoggerExistsRequest logErrorIfLoggerExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logErrorIfLoggerExistsRequest' is set
            if (logErrorIfLoggerExistsRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'logErrorIfLoggerExistsRequest' when calling RpcLogApi->WorkflowApiRpcLogErrorIfLoggerExists");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = logErrorIfLoggerExistsRequest;

            localVarRequestOptions.Operation = "RpcLogApi.WorkflowApiRpcLogErrorIfLoggerExists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/rpc/log-error-if-logger-exists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcLogErrorIfLoggerExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs an info message with parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiRpcLogInfo(LogInfoRequest logInfoRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiRpcLogInfoWithHttpInfo(logInfoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs an info message with parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiRpcLogInfoWithHttpInfo(LogInfoRequest logInfoRequest, int operationIndex = 0)
        {
            // verify the required parameter 'logInfoRequest' is set
            if (logInfoRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'logInfoRequest' when calling RpcLogApi->WorkflowApiRpcLogInfo");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = logInfoRequest;

            localVarRequestOptions.Operation = "RpcLogApi.WorkflowApiRpcLogInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/rpc/log-info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcLogInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs an info message with parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiRpcLogInfoAsync(LogInfoRequest logInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiRpcLogInfoWithHttpInfoAsync(logInfoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs an info message with parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiRpcLogInfoWithHttpInfoAsync(LogInfoRequest logInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logInfoRequest' is set
            if (logInfoRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'logInfoRequest' when calling RpcLogApi->WorkflowApiRpcLogInfo");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = logInfoRequest;

            localVarRequestOptions.Operation = "RpcLogApi.WorkflowApiRpcLogInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/rpc/log-info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcLogInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs an info message with parameters if the logger exists. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logInfoIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiRpcLogInfoIfLoggerExists(LogInfoIfLoggerExistsRequest logInfoIfLoggerExistsRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiRpcLogInfoIfLoggerExistsWithHttpInfo(logInfoIfLoggerExistsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs an info message with parameters if the logger exists. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logInfoIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiRpcLogInfoIfLoggerExistsWithHttpInfo(LogInfoIfLoggerExistsRequest logInfoIfLoggerExistsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'logInfoIfLoggerExistsRequest' is set
            if (logInfoIfLoggerExistsRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'logInfoIfLoggerExistsRequest' when calling RpcLogApi->WorkflowApiRpcLogInfoIfLoggerExists");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = logInfoIfLoggerExistsRequest;

            localVarRequestOptions.Operation = "RpcLogApi.WorkflowApiRpcLogInfoIfLoggerExists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/rpc/log-info-if-logger-exists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcLogInfoIfLoggerExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs an info message with parameters if the logger exists. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logInfoIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiRpcLogInfoIfLoggerExistsAsync(LogInfoIfLoggerExistsRequest logInfoIfLoggerExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiRpcLogInfoIfLoggerExistsWithHttpInfoAsync(logInfoIfLoggerExistsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs an info message with parameters if the logger exists. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logInfoIfLoggerExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiRpcLogInfoIfLoggerExistsWithHttpInfoAsync(LogInfoIfLoggerExistsRequest logInfoIfLoggerExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logInfoIfLoggerExistsRequest' is set
            if (logInfoIfLoggerExistsRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'logInfoIfLoggerExistsRequest' when calling RpcLogApi->WorkflowApiRpcLogInfoIfLoggerExists");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = logInfoIfLoggerExistsRequest;

            localVarRequestOptions.Operation = "RpcLogApi.WorkflowApiRpcLogInfoIfLoggerExists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/rpc/log-info-if-logger-exists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcLogInfoIfLoggerExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
