/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using WorkflowApi.Client.Client;
using WorkflowApi.Client.Model;

namespace WorkflowApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransitionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a single transition for a specific process instance ID and transition ID.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteResponse</returns>
        DeleteResponse WorkflowApiDataProcessesTransitionsDelete(Guid processId, Guid id, int operationIndex = 0);

        /// <summary>
        /// Delete a single transition for a specific process instance ID and transition ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        ApiResponse<DeleteResponse> WorkflowApiDataProcessesTransitionsDeleteWithHttpInfo(Guid processId, Guid id, int operationIndex = 0);
        /// <summary>
        /// Delete multiple transitions for a specific process instance ID, with optional filters.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteCollectionResponse</returns>
        DeleteCollectionResponse WorkflowApiDataProcessesTransitionsDeleteCollection(Guid processId, List<TransitionFieldFilter>? filters = default(List<TransitionFieldFilter>?), int operationIndex = 0);

        /// <summary>
        /// Delete multiple transitions for a specific process instance ID, with optional filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteCollectionResponse</returns>
        ApiResponse<DeleteCollectionResponse> WorkflowApiDataProcessesTransitionsDeleteCollectionWithHttpInfo(Guid processId, List<TransitionFieldFilter>? filters = default(List<TransitionFieldFilter>?), int operationIndex = 0);
        /// <summary>
        /// Retrieve a single transition for a specific process instance ID and transition ID.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransitionModel</returns>
        TransitionModel WorkflowApiDataProcessesTransitionsGet(Guid processId, Guid id, int operationIndex = 0);

        /// <summary>
        /// Retrieve a single transition for a specific process instance ID and transition ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransitionModel</returns>
        ApiResponse<TransitionModel> WorkflowApiDataProcessesTransitionsGetWithHttpInfo(Guid processId, Guid id, int operationIndex = 0);
        /// <summary>
        /// Retrieve transitions collection and total count for a specific process instance ID, with optional search, filters, sorting, and paging.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransitionModelGetCollectionResponse</returns>
        TransitionModelGetCollectionResponse WorkflowApiDataProcessesTransitionsGetCollection(Guid processId, string? search = default(string?), List<TransitionFieldFilter>? filters = default(List<TransitionFieldFilter>?), List<TransitionFieldSort>? sorts = default(List<TransitionFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0);

        /// <summary>
        /// Retrieve transitions collection and total count for a specific process instance ID, with optional search, filters, sorting, and paging.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransitionModelGetCollectionResponse</returns>
        ApiResponse<TransitionModelGetCollectionResponse> WorkflowApiDataProcessesTransitionsGetCollectionWithHttpInfo(Guid processId, string? search = default(string?), List<TransitionFieldFilter>? filters = default(List<TransitionFieldFilter>?), List<TransitionFieldSort>? sorts = default(List<TransitionFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0);
        /// <summary>
        /// Retrieve transitions collection and total count across all process instances, with optional search, filters, sorting, and paging.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitionFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransitionModelGetCollectionResponse</returns>
        TransitionModelGetCollectionResponse WorkflowApiSearchProcessesTransitions(TransitionFieldQuery transitionFieldQuery, int operationIndex = 0);

        /// <summary>
        /// Retrieve transitions collection and total count across all process instances, with optional search, filters, sorting, and paging.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitionFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransitionModelGetCollectionResponse</returns>
        ApiResponse<TransitionModelGetCollectionResponse> WorkflowApiSearchProcessesTransitionsWithHttpInfo(TransitionFieldQuery transitionFieldQuery, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransitionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a single transition for a specific process instance ID and transition ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteResponse</returns>
        System.Threading.Tasks.Task<DeleteResponse> WorkflowApiDataProcessesTransitionsDeleteAsync(Guid processId, Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a single transition for a specific process instance ID and transition ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> WorkflowApiDataProcessesTransitionsDeleteWithHttpInfoAsync(Guid processId, Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete multiple transitions for a specific process instance ID, with optional filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCollectionResponse</returns>
        System.Threading.Tasks.Task<DeleteCollectionResponse> WorkflowApiDataProcessesTransitionsDeleteCollectionAsync(Guid processId, List<TransitionFieldFilter>? filters = default(List<TransitionFieldFilter>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete multiple transitions for a specific process instance ID, with optional filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteCollectionResponse>> WorkflowApiDataProcessesTransitionsDeleteCollectionWithHttpInfoAsync(Guid processId, List<TransitionFieldFilter>? filters = default(List<TransitionFieldFilter>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a single transition for a specific process instance ID and transition ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransitionModel</returns>
        System.Threading.Tasks.Task<TransitionModel> WorkflowApiDataProcessesTransitionsGetAsync(Guid processId, Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a single transition for a specific process instance ID and transition ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransitionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransitionModel>> WorkflowApiDataProcessesTransitionsGetWithHttpInfoAsync(Guid processId, Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve transitions collection and total count for a specific process instance ID, with optional search, filters, sorting, and paging.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransitionModelGetCollectionResponse</returns>
        System.Threading.Tasks.Task<TransitionModelGetCollectionResponse> WorkflowApiDataProcessesTransitionsGetCollectionAsync(Guid processId, string? search = default(string?), List<TransitionFieldFilter>? filters = default(List<TransitionFieldFilter>?), List<TransitionFieldSort>? sorts = default(List<TransitionFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve transitions collection and total count for a specific process instance ID, with optional search, filters, sorting, and paging.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransitionModelGetCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransitionModelGetCollectionResponse>> WorkflowApiDataProcessesTransitionsGetCollectionWithHttpInfoAsync(Guid processId, string? search = default(string?), List<TransitionFieldFilter>? filters = default(List<TransitionFieldFilter>?), List<TransitionFieldSort>? sorts = default(List<TransitionFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve transitions collection and total count across all process instances, with optional search, filters, sorting, and paging.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitionFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransitionModelGetCollectionResponse</returns>
        System.Threading.Tasks.Task<TransitionModelGetCollectionResponse> WorkflowApiSearchProcessesTransitionsAsync(TransitionFieldQuery transitionFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve transitions collection and total count across all process instances, with optional search, filters, sorting, and paging.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitionFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransitionModelGetCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransitionModelGetCollectionResponse>> WorkflowApiSearchProcessesTransitionsWithHttpInfoAsync(TransitionFieldQuery transitionFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransitionsApi : ITransitionsApiSync, ITransitionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransitionsApi : ITransitionsApi
    {
        private WorkflowApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransitionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransitionsApi(string basePath)
        {
            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                new WorkflowApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransitionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransitionsApi(WorkflowApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransitionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TransitionsApi(WorkflowApi.Client.Client.ISynchronousClient client, WorkflowApi.Client.Client.IAsynchronousClient asyncClient, WorkflowApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public WorkflowApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public WorkflowApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public WorkflowApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WorkflowApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a single transition for a specific process instance ID and transition ID. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteResponse</returns>
        public DeleteResponse WorkflowApiDataProcessesTransitionsDelete(Guid processId, Guid id, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteResponse> localVarResponse = WorkflowApiDataProcessesTransitionsDeleteWithHttpInfo(processId, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a single transition for a specific process instance ID and transition ID. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<DeleteResponse> WorkflowApiDataProcessesTransitionsDeleteWithHttpInfo(Guid processId, Guid id, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", WorkflowApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "TransitionsApi.WorkflowApiDataProcessesTransitionsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteResponse>("/workflow-api/data/processes/{processId}/transitions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTransitionsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a single transition for a specific process instance ID and transition ID. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteResponse</returns>
        public async System.Threading.Tasks.Task<DeleteResponse> WorkflowApiDataProcessesTransitionsDeleteAsync(Guid processId, Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteResponse> localVarResponse = await WorkflowApiDataProcessesTransitionsDeleteWithHttpInfoAsync(processId, id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a single transition for a specific process instance ID and transition ID. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<DeleteResponse>> WorkflowApiDataProcessesTransitionsDeleteWithHttpInfoAsync(Guid processId, Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", WorkflowApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "TransitionsApi.WorkflowApiDataProcessesTransitionsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteResponse>("/workflow-api/data/processes/{processId}/transitions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTransitionsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete multiple transitions for a specific process instance ID, with optional filters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteCollectionResponse</returns>
        public DeleteCollectionResponse WorkflowApiDataProcessesTransitionsDeleteCollection(Guid processId, List<TransitionFieldFilter>? filters = default(List<TransitionFieldFilter>?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteCollectionResponse> localVarResponse = WorkflowApiDataProcessesTransitionsDeleteCollectionWithHttpInfo(processId, filters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete multiple transitions for a specific process instance ID, with optional filters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<DeleteCollectionResponse> WorkflowApiDataProcessesTransitionsDeleteCollectionWithHttpInfo(Guid processId, List<TransitionFieldFilter>? filters = default(List<TransitionFieldFilter>?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }

            localVarRequestOptions.Operation = "TransitionsApi.WorkflowApiDataProcessesTransitionsDeleteCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteCollectionResponse>("/workflow-api/data/processes/{processId}/transitions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTransitionsDeleteCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete multiple transitions for a specific process instance ID, with optional filters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCollectionResponse</returns>
        public async System.Threading.Tasks.Task<DeleteCollectionResponse> WorkflowApiDataProcessesTransitionsDeleteCollectionAsync(Guid processId, List<TransitionFieldFilter>? filters = default(List<TransitionFieldFilter>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteCollectionResponse> localVarResponse = await WorkflowApiDataProcessesTransitionsDeleteCollectionWithHttpInfoAsync(processId, filters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete multiple transitions for a specific process instance ID, with optional filters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<DeleteCollectionResponse>> WorkflowApiDataProcessesTransitionsDeleteCollectionWithHttpInfoAsync(Guid processId, List<TransitionFieldFilter>? filters = default(List<TransitionFieldFilter>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }

            localVarRequestOptions.Operation = "TransitionsApi.WorkflowApiDataProcessesTransitionsDeleteCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteCollectionResponse>("/workflow-api/data/processes/{processId}/transitions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTransitionsDeleteCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a single transition for a specific process instance ID and transition ID. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransitionModel</returns>
        public TransitionModel WorkflowApiDataProcessesTransitionsGet(Guid processId, Guid id, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<TransitionModel> localVarResponse = WorkflowApiDataProcessesTransitionsGetWithHttpInfo(processId, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a single transition for a specific process instance ID and transition ID. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransitionModel</returns>
        public WorkflowApi.Client.Client.ApiResponse<TransitionModel> WorkflowApiDataProcessesTransitionsGetWithHttpInfo(Guid processId, Guid id, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", WorkflowApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "TransitionsApi.WorkflowApiDataProcessesTransitionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransitionModel>("/workflow-api/data/processes/{processId}/transitions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTransitionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a single transition for a specific process instance ID and transition ID. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransitionModel</returns>
        public async System.Threading.Tasks.Task<TransitionModel> WorkflowApiDataProcessesTransitionsGetAsync(Guid processId, Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<TransitionModel> localVarResponse = await WorkflowApiDataProcessesTransitionsGetWithHttpInfoAsync(processId, id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a single transition for a specific process instance ID and transition ID. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransitionModel)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<TransitionModel>> WorkflowApiDataProcessesTransitionsGetWithHttpInfoAsync(Guid processId, Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", WorkflowApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "TransitionsApi.WorkflowApiDataProcessesTransitionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransitionModel>("/workflow-api/data/processes/{processId}/transitions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTransitionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve transitions collection and total count for a specific process instance ID, with optional search, filters, sorting, and paging. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransitionModelGetCollectionResponse</returns>
        public TransitionModelGetCollectionResponse WorkflowApiDataProcessesTransitionsGetCollection(Guid processId, string? search = default(string?), List<TransitionFieldFilter>? filters = default(List<TransitionFieldFilter>?), List<TransitionFieldSort>? sorts = default(List<TransitionFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<TransitionModelGetCollectionResponse> localVarResponse = WorkflowApiDataProcessesTransitionsGetCollectionWithHttpInfo(processId, search, filters, sorts, skip, take);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve transitions collection and total count for a specific process instance ID, with optional search, filters, sorting, and paging. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransitionModelGetCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<TransitionModelGetCollectionResponse> WorkflowApiDataProcessesTransitionsGetCollectionWithHttpInfo(Guid processId, string? search = default(string?), List<TransitionFieldFilter>? filters = default(List<TransitionFieldFilter>?), List<TransitionFieldSort>? sorts = default(List<TransitionFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }
            if (sorts != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "sorts", sorts));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "take", take));
            }

            localVarRequestOptions.Operation = "TransitionsApi.WorkflowApiDataProcessesTransitionsGetCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransitionModelGetCollectionResponse>("/workflow-api/data/processes/{processId}/transitions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTransitionsGetCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve transitions collection and total count for a specific process instance ID, with optional search, filters, sorting, and paging. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransitionModelGetCollectionResponse</returns>
        public async System.Threading.Tasks.Task<TransitionModelGetCollectionResponse> WorkflowApiDataProcessesTransitionsGetCollectionAsync(Guid processId, string? search = default(string?), List<TransitionFieldFilter>? filters = default(List<TransitionFieldFilter>?), List<TransitionFieldSort>? sorts = default(List<TransitionFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<TransitionModelGetCollectionResponse> localVarResponse = await WorkflowApiDataProcessesTransitionsGetCollectionWithHttpInfoAsync(processId, search, filters, sorts, skip, take, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve transitions collection and total count for a specific process instance ID, with optional search, filters, sorting, and paging. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransitionModelGetCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<TransitionModelGetCollectionResponse>> WorkflowApiDataProcessesTransitionsGetCollectionWithHttpInfoAsync(Guid processId, string? search = default(string?), List<TransitionFieldFilter>? filters = default(List<TransitionFieldFilter>?), List<TransitionFieldSort>? sorts = default(List<TransitionFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }
            if (sorts != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "sorts", sorts));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "take", take));
            }

            localVarRequestOptions.Operation = "TransitionsApi.WorkflowApiDataProcessesTransitionsGetCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransitionModelGetCollectionResponse>("/workflow-api/data/processes/{processId}/transitions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTransitionsGetCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve transitions collection and total count across all process instances, with optional search, filters, sorting, and paging. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitionFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransitionModelGetCollectionResponse</returns>
        public TransitionModelGetCollectionResponse WorkflowApiSearchProcessesTransitions(TransitionFieldQuery transitionFieldQuery, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<TransitionModelGetCollectionResponse> localVarResponse = WorkflowApiSearchProcessesTransitionsWithHttpInfo(transitionFieldQuery);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve transitions collection and total count across all process instances, with optional search, filters, sorting, and paging. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitionFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransitionModelGetCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<TransitionModelGetCollectionResponse> WorkflowApiSearchProcessesTransitionsWithHttpInfo(TransitionFieldQuery transitionFieldQuery, int operationIndex = 0)
        {
            // verify the required parameter 'transitionFieldQuery' is set
            if (transitionFieldQuery == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'transitionFieldQuery' when calling TransitionsApi->WorkflowApiSearchProcessesTransitions");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transitionFieldQuery;

            localVarRequestOptions.Operation = "TransitionsApi.WorkflowApiSearchProcessesTransitions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransitionModelGetCollectionResponse>("/workflow-api/search/processes/transitions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiSearchProcessesTransitions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve transitions collection and total count across all process instances, with optional search, filters, sorting, and paging. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitionFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransitionModelGetCollectionResponse</returns>
        public async System.Threading.Tasks.Task<TransitionModelGetCollectionResponse> WorkflowApiSearchProcessesTransitionsAsync(TransitionFieldQuery transitionFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<TransitionModelGetCollectionResponse> localVarResponse = await WorkflowApiSearchProcessesTransitionsWithHttpInfoAsync(transitionFieldQuery, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve transitions collection and total count across all process instances, with optional search, filters, sorting, and paging. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitionFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransitionModelGetCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<TransitionModelGetCollectionResponse>> WorkflowApiSearchProcessesTransitionsWithHttpInfoAsync(TransitionFieldQuery transitionFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transitionFieldQuery' is set
            if (transitionFieldQuery == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'transitionFieldQuery' when calling TransitionsApi->WorkflowApiSearchProcessesTransitions");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transitionFieldQuery;

            localVarRequestOptions.Operation = "TransitionsApi.WorkflowApiSearchProcessesTransitions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransitionModelGetCollectionResponse>("/workflow-api/search/processes/transitions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiSearchProcessesTransitions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
