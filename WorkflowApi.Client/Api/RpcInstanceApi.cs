/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using WorkflowApi.Client.Client;
using WorkflowApi.Client.Model;

namespace WorkflowApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcInstanceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check if all subprocesses of the process instance are completed.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkAllSubprocessesCompletedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CheckAllSubprocessesCompletedResponse</returns>
        CheckAllSubprocessesCompletedResponse WorkflowApiRpcCheckAllSubprocessesCompleted(CheckAllSubprocessesCompletedRequest checkAllSubprocessesCompletedRequest, int operationIndex = 0);

        /// <summary>
        /// Check if all subprocesses of the process instance are completed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkAllSubprocessesCompletedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CheckAllSubprocessesCompletedResponse</returns>
        ApiResponse<CheckAllSubprocessesCompletedResponse> WorkflowApiRpcCheckAllSubprocessesCompletedWithHttpInfo(CheckAllSubprocessesCompletedRequest checkAllSubprocessesCompletedRequest, int operationIndex = 0);
        /// <summary>
        /// Create instance of the process.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiRpcCreateInstance(CreateInstanceRequest createInstanceRequest, int operationIndex = 0);

        /// <summary>
        /// Create instance of the process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiRpcCreateInstanceWithHttpInfo(CreateInstanceRequest createInstanceRequest, int operationIndex = 0);
        /// <summary>
        /// Delete all subprocesses of the process instance.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteAllSubprocessesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAllSubprocessesResponse</returns>
        DeleteAllSubprocessesResponse WorkflowApiRpcDeleteAllSubprocesses(DeleteAllSubprocessesRequest deleteAllSubprocessesRequest, int operationIndex = 0);

        /// <summary>
        /// Delete all subprocesses of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteAllSubprocessesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAllSubprocessesResponse</returns>
        ApiResponse<DeleteAllSubprocessesResponse> WorkflowApiRpcDeleteAllSubprocessesWithHttpInfo(DeleteAllSubprocessesRequest deleteAllSubprocessesRequest, int operationIndex = 0);
        /// <summary>
        /// Delete process instance and all child subprocesses.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiRpcDeleteInstance(DeleteInstanceRequest deleteInstanceRequest, int operationIndex = 0);

        /// <summary>
        /// Delete process instance and all child subprocesses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiRpcDeleteInstanceWithHttpInfo(DeleteInstanceRequest deleteInstanceRequest, int operationIndex = 0);
        /// <summary>
        /// Get the history records for the process instance.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessHistoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProcessHistoryResponse</returns>
        GetProcessHistoryResponse WorkflowApiRpcGetProcessHistory(GetProcessHistoryRequest getProcessHistoryRequest, int operationIndex = 0);

        /// <summary>
        /// Get the history records for the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessHistoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProcessHistoryResponse</returns>
        ApiResponse<GetProcessHistoryResponse> WorkflowApiRpcGetProcessHistoryWithHttpInfo(GetProcessHistoryRequest getProcessHistoryRequest, int operationIndex = 0);
        /// <summary>
        /// Get the count of history records for the process instance.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessHistoryCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProcessHistoryCountResponse</returns>
        GetProcessHistoryCountResponse WorkflowApiRpcGetProcessHistoryCount(GetProcessHistoryCountRequest getProcessHistoryCountRequest, int operationIndex = 0);

        /// <summary>
        /// Get the count of history records for the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessHistoryCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProcessHistoryCountResponse</returns>
        ApiResponse<GetProcessHistoryCountResponse> WorkflowApiRpcGetProcessHistoryCountWithHttpInfo(GetProcessHistoryCountRequest getProcessHistoryCountRequest, int operationIndex = 0);
        /// <summary>
        /// Get the process instance with all parameters.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProcessInstanceResponse</returns>
        GetProcessInstanceResponse WorkflowApiRpcGetProcessInstance(GetProcessInstanceRequest getProcessInstanceRequest, int operationIndex = 0);

        /// <summary>
        /// Get the process instance with all parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProcessInstanceResponse</returns>
        ApiResponse<GetProcessInstanceResponse> WorkflowApiRpcGetProcessInstanceWithHttpInfo(GetProcessInstanceRequest getProcessInstanceRequest, int operationIndex = 0);
        /// <summary>
        /// Get the root process instance and all subprocesses as a tree.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessInstancesTreeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProcessInstancesTreeResponse</returns>
        GetProcessInstancesTreeResponse WorkflowApiRpcGetProcessInstanceTree(GetProcessInstancesTreeRequest getProcessInstancesTreeRequest, int operationIndex = 0);

        /// <summary>
        /// Get the root process instance and all subprocesses as a tree.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessInstancesTreeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProcessInstancesTreeResponse</returns>
        ApiResponse<GetProcessInstancesTreeResponse> WorkflowApiRpcGetProcessInstanceTreeWithHttpInfo(GetProcessInstancesTreeRequest getProcessInstancesTreeRequest, int operationIndex = 0);
        /// <summary>
        /// Get the value of a process parameter.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessParameterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProcessParameterResponse</returns>
        GetProcessParameterResponse WorkflowApiRpcGetProcessParameter(GetProcessParameterRequest getProcessParameterRequest, int operationIndex = 0);

        /// <summary>
        /// Get the value of a process parameter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessParameterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProcessParameterResponse</returns>
        ApiResponse<GetProcessParameterResponse> WorkflowApiRpcGetProcessParameterWithHttpInfo(GetProcessParameterRequest getProcessParameterRequest, int operationIndex = 0);
        /// <summary>
        /// Get the status of the process instance.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProcessStatusResponse</returns>
        GetProcessStatusResponse WorkflowApiRpcGetProcessStatus(GetProcessStatusRequest getProcessStatusRequest, int operationIndex = 0);

        /// <summary>
        /// Get the status of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProcessStatusResponse</returns>
        ApiResponse<GetProcessStatusResponse> WorkflowApiRpcGetProcessStatusWithHttpInfo(GetProcessStatusRequest getProcessStatusRequest, int operationIndex = 0);
        /// <summary>
        /// Check existence of the process instance.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isProcessExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IsProcessExistsResponse</returns>
        IsProcessExistsResponse WorkflowApiRpcIsProcessExists(IsProcessExistsRequest isProcessExistsRequest, int operationIndex = 0);

        /// <summary>
        /// Check existence of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isProcessExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IsProcessExistsResponse</returns>
        ApiResponse<IsProcessExistsResponse> WorkflowApiRpcIsProcessExistsWithHttpInfo(IsProcessExistsRequest isProcessExistsRequest, int operationIndex = 0);
        /// <summary>
        /// Set a new status for the process instance.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setProcessNewStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiRpcSetProcessNewStatus(SetProcessNewStatusRequest setProcessNewStatusRequest, int operationIndex = 0);

        /// <summary>
        /// Set a new status for the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setProcessNewStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiRpcSetProcessNewStatusWithHttpInfo(SetProcessNewStatusRequest setProcessNewStatusRequest, int operationIndex = 0);
        /// <summary>
        /// Set the value of a process parameter with persistence purpose.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setProcessParameterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiRpcSetProcessParameter(SetProcessParameterRequest setProcessParameterRequest, int operationIndex = 0);

        /// <summary>
        /// Set the value of a process parameter with persistence purpose.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setProcessParameterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiRpcSetProcessParameterWithHttpInfo(SetProcessParameterRequest setProcessParameterRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcInstanceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Check if all subprocesses of the process instance are completed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkAllSubprocessesCompletedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CheckAllSubprocessesCompletedResponse</returns>
        System.Threading.Tasks.Task<CheckAllSubprocessesCompletedResponse> WorkflowApiRpcCheckAllSubprocessesCompletedAsync(CheckAllSubprocessesCompletedRequest checkAllSubprocessesCompletedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check if all subprocesses of the process instance are completed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkAllSubprocessesCompletedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CheckAllSubprocessesCompletedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckAllSubprocessesCompletedResponse>> WorkflowApiRpcCheckAllSubprocessesCompletedWithHttpInfoAsync(CheckAllSubprocessesCompletedRequest checkAllSubprocessesCompletedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create instance of the process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiRpcCreateInstanceAsync(CreateInstanceRequest createInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create instance of the process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiRpcCreateInstanceWithHttpInfoAsync(CreateInstanceRequest createInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all subprocesses of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteAllSubprocessesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAllSubprocessesResponse</returns>
        System.Threading.Tasks.Task<DeleteAllSubprocessesResponse> WorkflowApiRpcDeleteAllSubprocessesAsync(DeleteAllSubprocessesRequest deleteAllSubprocessesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all subprocesses of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteAllSubprocessesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAllSubprocessesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAllSubprocessesResponse>> WorkflowApiRpcDeleteAllSubprocessesWithHttpInfoAsync(DeleteAllSubprocessesRequest deleteAllSubprocessesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete process instance and all child subprocesses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiRpcDeleteInstanceAsync(DeleteInstanceRequest deleteInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete process instance and all child subprocesses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiRpcDeleteInstanceWithHttpInfoAsync(DeleteInstanceRequest deleteInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the history records for the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessHistoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProcessHistoryResponse</returns>
        System.Threading.Tasks.Task<GetProcessHistoryResponse> WorkflowApiRpcGetProcessHistoryAsync(GetProcessHistoryRequest getProcessHistoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the history records for the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessHistoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProcessHistoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProcessHistoryResponse>> WorkflowApiRpcGetProcessHistoryWithHttpInfoAsync(GetProcessHistoryRequest getProcessHistoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the count of history records for the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessHistoryCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProcessHistoryCountResponse</returns>
        System.Threading.Tasks.Task<GetProcessHistoryCountResponse> WorkflowApiRpcGetProcessHistoryCountAsync(GetProcessHistoryCountRequest getProcessHistoryCountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the count of history records for the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessHistoryCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProcessHistoryCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProcessHistoryCountResponse>> WorkflowApiRpcGetProcessHistoryCountWithHttpInfoAsync(GetProcessHistoryCountRequest getProcessHistoryCountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the process instance with all parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProcessInstanceResponse</returns>
        System.Threading.Tasks.Task<GetProcessInstanceResponse> WorkflowApiRpcGetProcessInstanceAsync(GetProcessInstanceRequest getProcessInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the process instance with all parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProcessInstanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProcessInstanceResponse>> WorkflowApiRpcGetProcessInstanceWithHttpInfoAsync(GetProcessInstanceRequest getProcessInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the root process instance and all subprocesses as a tree.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessInstancesTreeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProcessInstancesTreeResponse</returns>
        System.Threading.Tasks.Task<GetProcessInstancesTreeResponse> WorkflowApiRpcGetProcessInstanceTreeAsync(GetProcessInstancesTreeRequest getProcessInstancesTreeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the root process instance and all subprocesses as a tree.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessInstancesTreeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProcessInstancesTreeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProcessInstancesTreeResponse>> WorkflowApiRpcGetProcessInstanceTreeWithHttpInfoAsync(GetProcessInstancesTreeRequest getProcessInstancesTreeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the value of a process parameter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessParameterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProcessParameterResponse</returns>
        System.Threading.Tasks.Task<GetProcessParameterResponse> WorkflowApiRpcGetProcessParameterAsync(GetProcessParameterRequest getProcessParameterRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the value of a process parameter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessParameterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProcessParameterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProcessParameterResponse>> WorkflowApiRpcGetProcessParameterWithHttpInfoAsync(GetProcessParameterRequest getProcessParameterRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the status of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProcessStatusResponse</returns>
        System.Threading.Tasks.Task<GetProcessStatusResponse> WorkflowApiRpcGetProcessStatusAsync(GetProcessStatusRequest getProcessStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the status of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProcessStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProcessStatusResponse>> WorkflowApiRpcGetProcessStatusWithHttpInfoAsync(GetProcessStatusRequest getProcessStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check existence of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isProcessExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IsProcessExistsResponse</returns>
        System.Threading.Tasks.Task<IsProcessExistsResponse> WorkflowApiRpcIsProcessExistsAsync(IsProcessExistsRequest isProcessExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check existence of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isProcessExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IsProcessExistsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IsProcessExistsResponse>> WorkflowApiRpcIsProcessExistsWithHttpInfoAsync(IsProcessExistsRequest isProcessExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set a new status for the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setProcessNewStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiRpcSetProcessNewStatusAsync(SetProcessNewStatusRequest setProcessNewStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set a new status for the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setProcessNewStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiRpcSetProcessNewStatusWithHttpInfoAsync(SetProcessNewStatusRequest setProcessNewStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set the value of a process parameter with persistence purpose.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setProcessParameterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiRpcSetProcessParameterAsync(SetProcessParameterRequest setProcessParameterRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set the value of a process parameter with persistence purpose.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setProcessParameterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiRpcSetProcessParameterWithHttpInfoAsync(SetProcessParameterRequest setProcessParameterRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcInstanceApi : IRpcInstanceApiSync, IRpcInstanceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RpcInstanceApi : IRpcInstanceApi
    {
        private WorkflowApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcInstanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RpcInstanceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcInstanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RpcInstanceApi(string basePath)
        {
            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                new WorkflowApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcInstanceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RpcInstanceApi(WorkflowApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcInstanceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RpcInstanceApi(WorkflowApi.Client.Client.ISynchronousClient client, WorkflowApi.Client.Client.IAsynchronousClient asyncClient, WorkflowApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public WorkflowApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public WorkflowApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public WorkflowApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WorkflowApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Check if all subprocesses of the process instance are completed. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkAllSubprocessesCompletedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CheckAllSubprocessesCompletedResponse</returns>
        public CheckAllSubprocessesCompletedResponse WorkflowApiRpcCheckAllSubprocessesCompleted(CheckAllSubprocessesCompletedRequest checkAllSubprocessesCompletedRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<CheckAllSubprocessesCompletedResponse> localVarResponse = WorkflowApiRpcCheckAllSubprocessesCompletedWithHttpInfo(checkAllSubprocessesCompletedRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if all subprocesses of the process instance are completed. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkAllSubprocessesCompletedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CheckAllSubprocessesCompletedResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<CheckAllSubprocessesCompletedResponse> WorkflowApiRpcCheckAllSubprocessesCompletedWithHttpInfo(CheckAllSubprocessesCompletedRequest checkAllSubprocessesCompletedRequest, int operationIndex = 0)
        {
            // verify the required parameter 'checkAllSubprocessesCompletedRequest' is set
            if (checkAllSubprocessesCompletedRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'checkAllSubprocessesCompletedRequest' when calling RpcInstanceApi->WorkflowApiRpcCheckAllSubprocessesCompleted");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = checkAllSubprocessesCompletedRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcCheckAllSubprocessesCompleted";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CheckAllSubprocessesCompletedResponse>("/workflow-api/rpc/check-all-subprocesses-completed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcCheckAllSubprocessesCompleted", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if all subprocesses of the process instance are completed. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkAllSubprocessesCompletedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CheckAllSubprocessesCompletedResponse</returns>
        public async System.Threading.Tasks.Task<CheckAllSubprocessesCompletedResponse> WorkflowApiRpcCheckAllSubprocessesCompletedAsync(CheckAllSubprocessesCompletedRequest checkAllSubprocessesCompletedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<CheckAllSubprocessesCompletedResponse> localVarResponse = await WorkflowApiRpcCheckAllSubprocessesCompletedWithHttpInfoAsync(checkAllSubprocessesCompletedRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if all subprocesses of the process instance are completed. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkAllSubprocessesCompletedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CheckAllSubprocessesCompletedResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<CheckAllSubprocessesCompletedResponse>> WorkflowApiRpcCheckAllSubprocessesCompletedWithHttpInfoAsync(CheckAllSubprocessesCompletedRequest checkAllSubprocessesCompletedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'checkAllSubprocessesCompletedRequest' is set
            if (checkAllSubprocessesCompletedRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'checkAllSubprocessesCompletedRequest' when calling RpcInstanceApi->WorkflowApiRpcCheckAllSubprocessesCompleted");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = checkAllSubprocessesCompletedRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcCheckAllSubprocessesCompleted";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CheckAllSubprocessesCompletedResponse>("/workflow-api/rpc/check-all-subprocesses-completed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcCheckAllSubprocessesCompleted", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create instance of the process. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiRpcCreateInstance(CreateInstanceRequest createInstanceRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiRpcCreateInstanceWithHttpInfo(createInstanceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create instance of the process. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiRpcCreateInstanceWithHttpInfo(CreateInstanceRequest createInstanceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createInstanceRequest' is set
            if (createInstanceRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'createInstanceRequest' when calling RpcInstanceApi->WorkflowApiRpcCreateInstance");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createInstanceRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcCreateInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/rpc/create-instance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcCreateInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create instance of the process. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiRpcCreateInstanceAsync(CreateInstanceRequest createInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiRpcCreateInstanceWithHttpInfoAsync(createInstanceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create instance of the process. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiRpcCreateInstanceWithHttpInfoAsync(CreateInstanceRequest createInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createInstanceRequest' is set
            if (createInstanceRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'createInstanceRequest' when calling RpcInstanceApi->WorkflowApiRpcCreateInstance");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createInstanceRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcCreateInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/rpc/create-instance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcCreateInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all subprocesses of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteAllSubprocessesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAllSubprocessesResponse</returns>
        public DeleteAllSubprocessesResponse WorkflowApiRpcDeleteAllSubprocesses(DeleteAllSubprocessesRequest deleteAllSubprocessesRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteAllSubprocessesResponse> localVarResponse = WorkflowApiRpcDeleteAllSubprocessesWithHttpInfo(deleteAllSubprocessesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all subprocesses of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteAllSubprocessesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAllSubprocessesResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<DeleteAllSubprocessesResponse> WorkflowApiRpcDeleteAllSubprocessesWithHttpInfo(DeleteAllSubprocessesRequest deleteAllSubprocessesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteAllSubprocessesRequest' is set
            if (deleteAllSubprocessesRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'deleteAllSubprocessesRequest' when calling RpcInstanceApi->WorkflowApiRpcDeleteAllSubprocesses");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteAllSubprocessesRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcDeleteAllSubprocesses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DeleteAllSubprocessesResponse>("/workflow-api/rpc/delete-all-subprocesses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcDeleteAllSubprocesses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all subprocesses of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteAllSubprocessesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAllSubprocessesResponse</returns>
        public async System.Threading.Tasks.Task<DeleteAllSubprocessesResponse> WorkflowApiRpcDeleteAllSubprocessesAsync(DeleteAllSubprocessesRequest deleteAllSubprocessesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteAllSubprocessesResponse> localVarResponse = await WorkflowApiRpcDeleteAllSubprocessesWithHttpInfoAsync(deleteAllSubprocessesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all subprocesses of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteAllSubprocessesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAllSubprocessesResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<DeleteAllSubprocessesResponse>> WorkflowApiRpcDeleteAllSubprocessesWithHttpInfoAsync(DeleteAllSubprocessesRequest deleteAllSubprocessesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteAllSubprocessesRequest' is set
            if (deleteAllSubprocessesRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'deleteAllSubprocessesRequest' when calling RpcInstanceApi->WorkflowApiRpcDeleteAllSubprocesses");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteAllSubprocessesRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcDeleteAllSubprocesses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteAllSubprocessesResponse>("/workflow-api/rpc/delete-all-subprocesses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcDeleteAllSubprocesses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete process instance and all child subprocesses. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiRpcDeleteInstance(DeleteInstanceRequest deleteInstanceRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiRpcDeleteInstanceWithHttpInfo(deleteInstanceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete process instance and all child subprocesses. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiRpcDeleteInstanceWithHttpInfo(DeleteInstanceRequest deleteInstanceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteInstanceRequest' is set
            if (deleteInstanceRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'deleteInstanceRequest' when calling RpcInstanceApi->WorkflowApiRpcDeleteInstance");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteInstanceRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcDeleteInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/rpc/delete-instance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcDeleteInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete process instance and all child subprocesses. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiRpcDeleteInstanceAsync(DeleteInstanceRequest deleteInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiRpcDeleteInstanceWithHttpInfoAsync(deleteInstanceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete process instance and all child subprocesses. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiRpcDeleteInstanceWithHttpInfoAsync(DeleteInstanceRequest deleteInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteInstanceRequest' is set
            if (deleteInstanceRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'deleteInstanceRequest' when calling RpcInstanceApi->WorkflowApiRpcDeleteInstance");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteInstanceRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcDeleteInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/rpc/delete-instance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcDeleteInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the history records for the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessHistoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProcessHistoryResponse</returns>
        public GetProcessHistoryResponse WorkflowApiRpcGetProcessHistory(GetProcessHistoryRequest getProcessHistoryRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GetProcessHistoryResponse> localVarResponse = WorkflowApiRpcGetProcessHistoryWithHttpInfo(getProcessHistoryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the history records for the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessHistoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProcessHistoryResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<GetProcessHistoryResponse> WorkflowApiRpcGetProcessHistoryWithHttpInfo(GetProcessHistoryRequest getProcessHistoryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getProcessHistoryRequest' is set
            if (getProcessHistoryRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getProcessHistoryRequest' when calling RpcInstanceApi->WorkflowApiRpcGetProcessHistory");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProcessHistoryRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcGetProcessHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetProcessHistoryResponse>("/workflow-api/rpc/get-process-history", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetProcessHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the history records for the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessHistoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProcessHistoryResponse</returns>
        public async System.Threading.Tasks.Task<GetProcessHistoryResponse> WorkflowApiRpcGetProcessHistoryAsync(GetProcessHistoryRequest getProcessHistoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GetProcessHistoryResponse> localVarResponse = await WorkflowApiRpcGetProcessHistoryWithHttpInfoAsync(getProcessHistoryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the history records for the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessHistoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProcessHistoryResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GetProcessHistoryResponse>> WorkflowApiRpcGetProcessHistoryWithHttpInfoAsync(GetProcessHistoryRequest getProcessHistoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getProcessHistoryRequest' is set
            if (getProcessHistoryRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getProcessHistoryRequest' when calling RpcInstanceApi->WorkflowApiRpcGetProcessHistory");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProcessHistoryRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcGetProcessHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetProcessHistoryResponse>("/workflow-api/rpc/get-process-history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetProcessHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the count of history records for the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessHistoryCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProcessHistoryCountResponse</returns>
        public GetProcessHistoryCountResponse WorkflowApiRpcGetProcessHistoryCount(GetProcessHistoryCountRequest getProcessHistoryCountRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GetProcessHistoryCountResponse> localVarResponse = WorkflowApiRpcGetProcessHistoryCountWithHttpInfo(getProcessHistoryCountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the count of history records for the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessHistoryCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProcessHistoryCountResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<GetProcessHistoryCountResponse> WorkflowApiRpcGetProcessHistoryCountWithHttpInfo(GetProcessHistoryCountRequest getProcessHistoryCountRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getProcessHistoryCountRequest' is set
            if (getProcessHistoryCountRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getProcessHistoryCountRequest' when calling RpcInstanceApi->WorkflowApiRpcGetProcessHistoryCount");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProcessHistoryCountRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcGetProcessHistoryCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetProcessHistoryCountResponse>("/workflow-api/rpc/get-process-history-count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetProcessHistoryCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the count of history records for the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessHistoryCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProcessHistoryCountResponse</returns>
        public async System.Threading.Tasks.Task<GetProcessHistoryCountResponse> WorkflowApiRpcGetProcessHistoryCountAsync(GetProcessHistoryCountRequest getProcessHistoryCountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GetProcessHistoryCountResponse> localVarResponse = await WorkflowApiRpcGetProcessHistoryCountWithHttpInfoAsync(getProcessHistoryCountRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the count of history records for the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessHistoryCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProcessHistoryCountResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GetProcessHistoryCountResponse>> WorkflowApiRpcGetProcessHistoryCountWithHttpInfoAsync(GetProcessHistoryCountRequest getProcessHistoryCountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getProcessHistoryCountRequest' is set
            if (getProcessHistoryCountRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getProcessHistoryCountRequest' when calling RpcInstanceApi->WorkflowApiRpcGetProcessHistoryCount");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProcessHistoryCountRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcGetProcessHistoryCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetProcessHistoryCountResponse>("/workflow-api/rpc/get-process-history-count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetProcessHistoryCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the process instance with all parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProcessInstanceResponse</returns>
        public GetProcessInstanceResponse WorkflowApiRpcGetProcessInstance(GetProcessInstanceRequest getProcessInstanceRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GetProcessInstanceResponse> localVarResponse = WorkflowApiRpcGetProcessInstanceWithHttpInfo(getProcessInstanceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the process instance with all parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProcessInstanceResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<GetProcessInstanceResponse> WorkflowApiRpcGetProcessInstanceWithHttpInfo(GetProcessInstanceRequest getProcessInstanceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getProcessInstanceRequest' is set
            if (getProcessInstanceRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getProcessInstanceRequest' when calling RpcInstanceApi->WorkflowApiRpcGetProcessInstance");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProcessInstanceRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcGetProcessInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetProcessInstanceResponse>("/workflow-api/rpc/get-process-instance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetProcessInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the process instance with all parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProcessInstanceResponse</returns>
        public async System.Threading.Tasks.Task<GetProcessInstanceResponse> WorkflowApiRpcGetProcessInstanceAsync(GetProcessInstanceRequest getProcessInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GetProcessInstanceResponse> localVarResponse = await WorkflowApiRpcGetProcessInstanceWithHttpInfoAsync(getProcessInstanceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the process instance with all parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProcessInstanceResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GetProcessInstanceResponse>> WorkflowApiRpcGetProcessInstanceWithHttpInfoAsync(GetProcessInstanceRequest getProcessInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getProcessInstanceRequest' is set
            if (getProcessInstanceRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getProcessInstanceRequest' when calling RpcInstanceApi->WorkflowApiRpcGetProcessInstance");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProcessInstanceRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcGetProcessInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetProcessInstanceResponse>("/workflow-api/rpc/get-process-instance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetProcessInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the root process instance and all subprocesses as a tree. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessInstancesTreeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProcessInstancesTreeResponse</returns>
        public GetProcessInstancesTreeResponse WorkflowApiRpcGetProcessInstanceTree(GetProcessInstancesTreeRequest getProcessInstancesTreeRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GetProcessInstancesTreeResponse> localVarResponse = WorkflowApiRpcGetProcessInstanceTreeWithHttpInfo(getProcessInstancesTreeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the root process instance and all subprocesses as a tree. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessInstancesTreeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProcessInstancesTreeResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<GetProcessInstancesTreeResponse> WorkflowApiRpcGetProcessInstanceTreeWithHttpInfo(GetProcessInstancesTreeRequest getProcessInstancesTreeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getProcessInstancesTreeRequest' is set
            if (getProcessInstancesTreeRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getProcessInstancesTreeRequest' when calling RpcInstanceApi->WorkflowApiRpcGetProcessInstanceTree");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProcessInstancesTreeRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcGetProcessInstanceTree";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetProcessInstancesTreeResponse>("/workflow-api/rpc/get-process-instance-tree", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetProcessInstanceTree", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the root process instance and all subprocesses as a tree. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessInstancesTreeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProcessInstancesTreeResponse</returns>
        public async System.Threading.Tasks.Task<GetProcessInstancesTreeResponse> WorkflowApiRpcGetProcessInstanceTreeAsync(GetProcessInstancesTreeRequest getProcessInstancesTreeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GetProcessInstancesTreeResponse> localVarResponse = await WorkflowApiRpcGetProcessInstanceTreeWithHttpInfoAsync(getProcessInstancesTreeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the root process instance and all subprocesses as a tree. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessInstancesTreeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProcessInstancesTreeResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GetProcessInstancesTreeResponse>> WorkflowApiRpcGetProcessInstanceTreeWithHttpInfoAsync(GetProcessInstancesTreeRequest getProcessInstancesTreeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getProcessInstancesTreeRequest' is set
            if (getProcessInstancesTreeRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getProcessInstancesTreeRequest' when calling RpcInstanceApi->WorkflowApiRpcGetProcessInstanceTree");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProcessInstancesTreeRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcGetProcessInstanceTree";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetProcessInstancesTreeResponse>("/workflow-api/rpc/get-process-instance-tree", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetProcessInstanceTree", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the value of a process parameter. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessParameterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProcessParameterResponse</returns>
        public GetProcessParameterResponse WorkflowApiRpcGetProcessParameter(GetProcessParameterRequest getProcessParameterRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GetProcessParameterResponse> localVarResponse = WorkflowApiRpcGetProcessParameterWithHttpInfo(getProcessParameterRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the value of a process parameter. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessParameterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProcessParameterResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<GetProcessParameterResponse> WorkflowApiRpcGetProcessParameterWithHttpInfo(GetProcessParameterRequest getProcessParameterRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getProcessParameterRequest' is set
            if (getProcessParameterRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getProcessParameterRequest' when calling RpcInstanceApi->WorkflowApiRpcGetProcessParameter");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProcessParameterRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcGetProcessParameter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetProcessParameterResponse>("/workflow-api/rpc/get-process-parameter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetProcessParameter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the value of a process parameter. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessParameterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProcessParameterResponse</returns>
        public async System.Threading.Tasks.Task<GetProcessParameterResponse> WorkflowApiRpcGetProcessParameterAsync(GetProcessParameterRequest getProcessParameterRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GetProcessParameterResponse> localVarResponse = await WorkflowApiRpcGetProcessParameterWithHttpInfoAsync(getProcessParameterRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the value of a process parameter. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessParameterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProcessParameterResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GetProcessParameterResponse>> WorkflowApiRpcGetProcessParameterWithHttpInfoAsync(GetProcessParameterRequest getProcessParameterRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getProcessParameterRequest' is set
            if (getProcessParameterRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getProcessParameterRequest' when calling RpcInstanceApi->WorkflowApiRpcGetProcessParameter");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProcessParameterRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcGetProcessParameter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetProcessParameterResponse>("/workflow-api/rpc/get-process-parameter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetProcessParameter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the status of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProcessStatusResponse</returns>
        public GetProcessStatusResponse WorkflowApiRpcGetProcessStatus(GetProcessStatusRequest getProcessStatusRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GetProcessStatusResponse> localVarResponse = WorkflowApiRpcGetProcessStatusWithHttpInfo(getProcessStatusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProcessStatusResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<GetProcessStatusResponse> WorkflowApiRpcGetProcessStatusWithHttpInfo(GetProcessStatusRequest getProcessStatusRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getProcessStatusRequest' is set
            if (getProcessStatusRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getProcessStatusRequest' when calling RpcInstanceApi->WorkflowApiRpcGetProcessStatus");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProcessStatusRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcGetProcessStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetProcessStatusResponse>("/workflow-api/rpc/get-process-status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetProcessStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the status of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProcessStatusResponse</returns>
        public async System.Threading.Tasks.Task<GetProcessStatusResponse> WorkflowApiRpcGetProcessStatusAsync(GetProcessStatusRequest getProcessStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GetProcessStatusResponse> localVarResponse = await WorkflowApiRpcGetProcessStatusWithHttpInfoAsync(getProcessStatusRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProcessStatusResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GetProcessStatusResponse>> WorkflowApiRpcGetProcessStatusWithHttpInfoAsync(GetProcessStatusRequest getProcessStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getProcessStatusRequest' is set
            if (getProcessStatusRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getProcessStatusRequest' when calling RpcInstanceApi->WorkflowApiRpcGetProcessStatus");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProcessStatusRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcGetProcessStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetProcessStatusResponse>("/workflow-api/rpc/get-process-status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetProcessStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check existence of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isProcessExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IsProcessExistsResponse</returns>
        public IsProcessExistsResponse WorkflowApiRpcIsProcessExists(IsProcessExistsRequest isProcessExistsRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<IsProcessExistsResponse> localVarResponse = WorkflowApiRpcIsProcessExistsWithHttpInfo(isProcessExistsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check existence of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isProcessExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IsProcessExistsResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<IsProcessExistsResponse> WorkflowApiRpcIsProcessExistsWithHttpInfo(IsProcessExistsRequest isProcessExistsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'isProcessExistsRequest' is set
            if (isProcessExistsRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'isProcessExistsRequest' when calling RpcInstanceApi->WorkflowApiRpcIsProcessExists");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = isProcessExistsRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcIsProcessExists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IsProcessExistsResponse>("/workflow-api/rpc/is-process-exists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcIsProcessExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check existence of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isProcessExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IsProcessExistsResponse</returns>
        public async System.Threading.Tasks.Task<IsProcessExistsResponse> WorkflowApiRpcIsProcessExistsAsync(IsProcessExistsRequest isProcessExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<IsProcessExistsResponse> localVarResponse = await WorkflowApiRpcIsProcessExistsWithHttpInfoAsync(isProcessExistsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check existence of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isProcessExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IsProcessExistsResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<IsProcessExistsResponse>> WorkflowApiRpcIsProcessExistsWithHttpInfoAsync(IsProcessExistsRequest isProcessExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'isProcessExistsRequest' is set
            if (isProcessExistsRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'isProcessExistsRequest' when calling RpcInstanceApi->WorkflowApiRpcIsProcessExists");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = isProcessExistsRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcIsProcessExists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IsProcessExistsResponse>("/workflow-api/rpc/is-process-exists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcIsProcessExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set a new status for the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setProcessNewStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiRpcSetProcessNewStatus(SetProcessNewStatusRequest setProcessNewStatusRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiRpcSetProcessNewStatusWithHttpInfo(setProcessNewStatusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set a new status for the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setProcessNewStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiRpcSetProcessNewStatusWithHttpInfo(SetProcessNewStatusRequest setProcessNewStatusRequest, int operationIndex = 0)
        {
            // verify the required parameter 'setProcessNewStatusRequest' is set
            if (setProcessNewStatusRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'setProcessNewStatusRequest' when calling RpcInstanceApi->WorkflowApiRpcSetProcessNewStatus");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setProcessNewStatusRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcSetProcessNewStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/rpc/set-process-new-status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcSetProcessNewStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set a new status for the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setProcessNewStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiRpcSetProcessNewStatusAsync(SetProcessNewStatusRequest setProcessNewStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiRpcSetProcessNewStatusWithHttpInfoAsync(setProcessNewStatusRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set a new status for the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setProcessNewStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiRpcSetProcessNewStatusWithHttpInfoAsync(SetProcessNewStatusRequest setProcessNewStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setProcessNewStatusRequest' is set
            if (setProcessNewStatusRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'setProcessNewStatusRequest' when calling RpcInstanceApi->WorkflowApiRpcSetProcessNewStatus");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setProcessNewStatusRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcSetProcessNewStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/rpc/set-process-new-status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcSetProcessNewStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the value of a process parameter with persistence purpose. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setProcessParameterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiRpcSetProcessParameter(SetProcessParameterRequest setProcessParameterRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiRpcSetProcessParameterWithHttpInfo(setProcessParameterRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the value of a process parameter with persistence purpose. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setProcessParameterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiRpcSetProcessParameterWithHttpInfo(SetProcessParameterRequest setProcessParameterRequest, int operationIndex = 0)
        {
            // verify the required parameter 'setProcessParameterRequest' is set
            if (setProcessParameterRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'setProcessParameterRequest' when calling RpcInstanceApi->WorkflowApiRpcSetProcessParameter");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setProcessParameterRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcSetProcessParameter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/rpc/set-process-parameter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcSetProcessParameter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the value of a process parameter with persistence purpose. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setProcessParameterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiRpcSetProcessParameterAsync(SetProcessParameterRequest setProcessParameterRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiRpcSetProcessParameterWithHttpInfoAsync(setProcessParameterRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the value of a process parameter with persistence purpose. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setProcessParameterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiRpcSetProcessParameterWithHttpInfoAsync(SetProcessParameterRequest setProcessParameterRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setProcessParameterRequest' is set
            if (setProcessParameterRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'setProcessParameterRequest' when calling RpcInstanceApi->WorkflowApiRpcSetProcessParameter");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setProcessParameterRequest;

            localVarRequestOptions.Operation = "RpcInstanceApi.WorkflowApiRpcSetProcessParameter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/rpc/set-process-parameter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcSetProcessParameter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
