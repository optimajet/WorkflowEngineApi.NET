/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using WorkflowApi.Client.Client;
using WorkflowApi.Client.Model;

namespace WorkflowApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create one workflow scheme
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="schemeCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiDataSchemesCreate(string code, SchemeCreateRequest schemeCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create one workflow scheme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="schemeCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiDataSchemesCreateWithHttpInfo(string code, SchemeCreateRequest schemeCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Create multiple workflow schemes
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeCreateRequestWithCode"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCollectionResponse</returns>
        CreateCollectionResponse WorkflowApiDataSchemesCreateCollection(List<SchemeCreateRequestWithCode> schemeCreateRequestWithCode, int operationIndex = 0);

        /// <summary>
        /// Create multiple workflow schemes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeCreateRequestWithCode"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCollectionResponse</returns>
        ApiResponse<CreateCollectionResponse> WorkflowApiDataSchemesCreateCollectionWithHttpInfo(List<SchemeCreateRequestWithCode> schemeCreateRequestWithCode, int operationIndex = 0);
        /// <summary>
        /// Delete one workflow scheme
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteResponse</returns>
        DeleteResponse WorkflowApiDataSchemesDelete(string code, int operationIndex = 0);

        /// <summary>
        /// Delete one workflow scheme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        ApiResponse<DeleteResponse> WorkflowApiDataSchemesDeleteWithHttpInfo(string code, int operationIndex = 0);
        /// <summary>
        /// Delete multiple workflow schemes with filter
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteCollectionResponse</returns>
        DeleteCollectionResponse WorkflowApiDataSchemesDeleteCollection(List<SchemeFieldFilter>? filters = default(List<SchemeFieldFilter>?), int operationIndex = 0);

        /// <summary>
        /// Delete multiple workflow schemes with filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteCollectionResponse</returns>
        ApiResponse<DeleteCollectionResponse> WorkflowApiDataSchemesDeleteCollectionWithHttpInfo(List<SchemeFieldFilter>? filters = default(List<SchemeFieldFilter>?), int operationIndex = 0);
        /// <summary>
        /// Get one workflow scheme
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SchemeModel</returns>
        SchemeModel WorkflowApiDataSchemesGet(string code, int operationIndex = 0);

        /// <summary>
        /// Get one workflow scheme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SchemeModel</returns>
        ApiResponse<SchemeModel> WorkflowApiDataSchemesGetWithHttpInfo(string code, int operationIndex = 0);
        /// <summary>
        /// Get multiple workflow schemes with query
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SchemeModelGetCollectionResponse</returns>
        SchemeModelGetCollectionResponse WorkflowApiDataSchemesGetCollection(string? search = default(string?), List<SchemeFieldFilter>? filters = default(List<SchemeFieldFilter>?), List<SchemeFieldSort>? sorts = default(List<SchemeFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0);

        /// <summary>
        /// Get multiple workflow schemes with query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SchemeModelGetCollectionResponse</returns>
        ApiResponse<SchemeModelGetCollectionResponse> WorkflowApiDataSchemesGetCollectionWithHttpInfo(string? search = default(string?), List<SchemeFieldFilter>? filters = default(List<SchemeFieldFilter>?), List<SchemeFieldSort>? sorts = default(List<SchemeFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0);
        /// <summary>
        /// Update one workflow scheme
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="schemeUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateResponse</returns>
        UpdateResponse WorkflowApiDataSchemesUpdate(string code, SchemeUpdateRequest schemeUpdateRequest, int operationIndex = 0);

        /// <summary>
        /// Update one workflow scheme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="schemeUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateResponse</returns>
        ApiResponse<UpdateResponse> WorkflowApiDataSchemesUpdateWithHttpInfo(string code, SchemeUpdateRequest schemeUpdateRequest, int operationIndex = 0);
        /// <summary>
        /// Search for workflow schemes
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SchemeModelGetCollectionResponse</returns>
        SchemeModelGetCollectionResponse WorkflowApiSearchSchemes(SchemeFieldQuery schemeFieldQuery, int operationIndex = 0);

        /// <summary>
        /// Search for workflow schemes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SchemeModelGetCollectionResponse</returns>
        ApiResponse<SchemeModelGetCollectionResponse> WorkflowApiSearchSchemesWithHttpInfo(SchemeFieldQuery schemeFieldQuery, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create one workflow scheme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="schemeCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiDataSchemesCreateAsync(string code, SchemeCreateRequest schemeCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create one workflow scheme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="schemeCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiDataSchemesCreateWithHttpInfoAsync(string code, SchemeCreateRequest schemeCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create multiple workflow schemes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeCreateRequestWithCode"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCollectionResponse</returns>
        System.Threading.Tasks.Task<CreateCollectionResponse> WorkflowApiDataSchemesCreateCollectionAsync(List<SchemeCreateRequestWithCode> schemeCreateRequestWithCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create multiple workflow schemes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeCreateRequestWithCode"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCollectionResponse>> WorkflowApiDataSchemesCreateCollectionWithHttpInfoAsync(List<SchemeCreateRequestWithCode> schemeCreateRequestWithCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete one workflow scheme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteResponse</returns>
        System.Threading.Tasks.Task<DeleteResponse> WorkflowApiDataSchemesDeleteAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete one workflow scheme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> WorkflowApiDataSchemesDeleteWithHttpInfoAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete multiple workflow schemes with filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCollectionResponse</returns>
        System.Threading.Tasks.Task<DeleteCollectionResponse> WorkflowApiDataSchemesDeleteCollectionAsync(List<SchemeFieldFilter>? filters = default(List<SchemeFieldFilter>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete multiple workflow schemes with filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteCollectionResponse>> WorkflowApiDataSchemesDeleteCollectionWithHttpInfoAsync(List<SchemeFieldFilter>? filters = default(List<SchemeFieldFilter>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get one workflow scheme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemeModel</returns>
        System.Threading.Tasks.Task<SchemeModel> WorkflowApiDataSchemesGetAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get one workflow scheme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemeModel>> WorkflowApiDataSchemesGetWithHttpInfoAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get multiple workflow schemes with query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemeModelGetCollectionResponse</returns>
        System.Threading.Tasks.Task<SchemeModelGetCollectionResponse> WorkflowApiDataSchemesGetCollectionAsync(string? search = default(string?), List<SchemeFieldFilter>? filters = default(List<SchemeFieldFilter>?), List<SchemeFieldSort>? sorts = default(List<SchemeFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get multiple workflow schemes with query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemeModelGetCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemeModelGetCollectionResponse>> WorkflowApiDataSchemesGetCollectionWithHttpInfoAsync(string? search = default(string?), List<SchemeFieldFilter>? filters = default(List<SchemeFieldFilter>?), List<SchemeFieldSort>? sorts = default(List<SchemeFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update one workflow scheme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="schemeUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateResponse</returns>
        System.Threading.Tasks.Task<UpdateResponse> WorkflowApiDataSchemesUpdateAsync(string code, SchemeUpdateRequest schemeUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update one workflow scheme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="schemeUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateResponse>> WorkflowApiDataSchemesUpdateWithHttpInfoAsync(string code, SchemeUpdateRequest schemeUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for workflow schemes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemeModelGetCollectionResponse</returns>
        System.Threading.Tasks.Task<SchemeModelGetCollectionResponse> WorkflowApiSearchSchemesAsync(SchemeFieldQuery schemeFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for workflow schemes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemeModelGetCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemeModelGetCollectionResponse>> WorkflowApiSearchSchemesWithHttpInfoAsync(SchemeFieldQuery schemeFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemesApi : ISchemesApiSync, ISchemesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchemesApi : ISchemesApi
    {
        private WorkflowApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchemesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchemesApi(string basePath)
        {
            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                new WorkflowApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchemesApi(WorkflowApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SchemesApi(WorkflowApi.Client.Client.ISynchronousClient client, WorkflowApi.Client.Client.IAsynchronousClient asyncClient, WorkflowApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public WorkflowApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public WorkflowApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public WorkflowApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WorkflowApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create one workflow scheme 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="schemeCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiDataSchemesCreate(string code, SchemeCreateRequest schemeCreateRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiDataSchemesCreateWithHttpInfo(code, schemeCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create one workflow scheme 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="schemeCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiDataSchemesCreateWithHttpInfo(string code, SchemeCreateRequest schemeCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'code' when calling SchemesApi->WorkflowApiDataSchemesCreate");
            }

            // verify the required parameter 'schemeCreateRequest' is set
            if (schemeCreateRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'schemeCreateRequest' when calling SchemesApi->WorkflowApiDataSchemesCreate");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", WorkflowApi.Client.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = schemeCreateRequest;

            localVarRequestOptions.Operation = "SchemesApi.WorkflowApiDataSchemesCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/data/schemes/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataSchemesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create one workflow scheme 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="schemeCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiDataSchemesCreateAsync(string code, SchemeCreateRequest schemeCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiDataSchemesCreateWithHttpInfoAsync(code, schemeCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create one workflow scheme 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="schemeCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiDataSchemesCreateWithHttpInfoAsync(string code, SchemeCreateRequest schemeCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'code' when calling SchemesApi->WorkflowApiDataSchemesCreate");
            }

            // verify the required parameter 'schemeCreateRequest' is set
            if (schemeCreateRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'schemeCreateRequest' when calling SchemesApi->WorkflowApiDataSchemesCreate");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", WorkflowApi.Client.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = schemeCreateRequest;

            localVarRequestOptions.Operation = "SchemesApi.WorkflowApiDataSchemesCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/data/schemes/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataSchemesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create multiple workflow schemes 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeCreateRequestWithCode"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCollectionResponse</returns>
        public CreateCollectionResponse WorkflowApiDataSchemesCreateCollection(List<SchemeCreateRequestWithCode> schemeCreateRequestWithCode, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<CreateCollectionResponse> localVarResponse = WorkflowApiDataSchemesCreateCollectionWithHttpInfo(schemeCreateRequestWithCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create multiple workflow schemes 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeCreateRequestWithCode"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<CreateCollectionResponse> WorkflowApiDataSchemesCreateCollectionWithHttpInfo(List<SchemeCreateRequestWithCode> schemeCreateRequestWithCode, int operationIndex = 0)
        {
            // verify the required parameter 'schemeCreateRequestWithCode' is set
            if (schemeCreateRequestWithCode == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'schemeCreateRequestWithCode' when calling SchemesApi->WorkflowApiDataSchemesCreateCollection");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = schemeCreateRequestWithCode;

            localVarRequestOptions.Operation = "SchemesApi.WorkflowApiDataSchemesCreateCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCollectionResponse>("/workflow-api/data/schemes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataSchemesCreateCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create multiple workflow schemes 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeCreateRequestWithCode"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCollectionResponse</returns>
        public async System.Threading.Tasks.Task<CreateCollectionResponse> WorkflowApiDataSchemesCreateCollectionAsync(List<SchemeCreateRequestWithCode> schemeCreateRequestWithCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<CreateCollectionResponse> localVarResponse = await WorkflowApiDataSchemesCreateCollectionWithHttpInfoAsync(schemeCreateRequestWithCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create multiple workflow schemes 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeCreateRequestWithCode"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<CreateCollectionResponse>> WorkflowApiDataSchemesCreateCollectionWithHttpInfoAsync(List<SchemeCreateRequestWithCode> schemeCreateRequestWithCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schemeCreateRequestWithCode' is set
            if (schemeCreateRequestWithCode == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'schemeCreateRequestWithCode' when calling SchemesApi->WorkflowApiDataSchemesCreateCollection");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = schemeCreateRequestWithCode;

            localVarRequestOptions.Operation = "SchemesApi.WorkflowApiDataSchemesCreateCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCollectionResponse>("/workflow-api/data/schemes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataSchemesCreateCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete one workflow scheme 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteResponse</returns>
        public DeleteResponse WorkflowApiDataSchemesDelete(string code, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteResponse> localVarResponse = WorkflowApiDataSchemesDeleteWithHttpInfo(code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete one workflow scheme 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<DeleteResponse> WorkflowApiDataSchemesDeleteWithHttpInfo(string code, int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'code' when calling SchemesApi->WorkflowApiDataSchemesDelete");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", WorkflowApi.Client.Client.ClientUtils.ParameterToString(code)); // path parameter

            localVarRequestOptions.Operation = "SchemesApi.WorkflowApiDataSchemesDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteResponse>("/workflow-api/data/schemes/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataSchemesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete one workflow scheme 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteResponse</returns>
        public async System.Threading.Tasks.Task<DeleteResponse> WorkflowApiDataSchemesDeleteAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteResponse> localVarResponse = await WorkflowApiDataSchemesDeleteWithHttpInfoAsync(code, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete one workflow scheme 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<DeleteResponse>> WorkflowApiDataSchemesDeleteWithHttpInfoAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'code' when calling SchemesApi->WorkflowApiDataSchemesDelete");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", WorkflowApi.Client.Client.ClientUtils.ParameterToString(code)); // path parameter

            localVarRequestOptions.Operation = "SchemesApi.WorkflowApiDataSchemesDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteResponse>("/workflow-api/data/schemes/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataSchemesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete multiple workflow schemes with filter 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteCollectionResponse</returns>
        public DeleteCollectionResponse WorkflowApiDataSchemesDeleteCollection(List<SchemeFieldFilter>? filters = default(List<SchemeFieldFilter>?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteCollectionResponse> localVarResponse = WorkflowApiDataSchemesDeleteCollectionWithHttpInfo(filters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete multiple workflow schemes with filter 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<DeleteCollectionResponse> WorkflowApiDataSchemesDeleteCollectionWithHttpInfo(List<SchemeFieldFilter>? filters = default(List<SchemeFieldFilter>?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }

            localVarRequestOptions.Operation = "SchemesApi.WorkflowApiDataSchemesDeleteCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteCollectionResponse>("/workflow-api/data/schemes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataSchemesDeleteCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete multiple workflow schemes with filter 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCollectionResponse</returns>
        public async System.Threading.Tasks.Task<DeleteCollectionResponse> WorkflowApiDataSchemesDeleteCollectionAsync(List<SchemeFieldFilter>? filters = default(List<SchemeFieldFilter>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteCollectionResponse> localVarResponse = await WorkflowApiDataSchemesDeleteCollectionWithHttpInfoAsync(filters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete multiple workflow schemes with filter 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<DeleteCollectionResponse>> WorkflowApiDataSchemesDeleteCollectionWithHttpInfoAsync(List<SchemeFieldFilter>? filters = default(List<SchemeFieldFilter>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }

            localVarRequestOptions.Operation = "SchemesApi.WorkflowApiDataSchemesDeleteCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteCollectionResponse>("/workflow-api/data/schemes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataSchemesDeleteCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get one workflow scheme 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SchemeModel</returns>
        public SchemeModel WorkflowApiDataSchemesGet(string code, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<SchemeModel> localVarResponse = WorkflowApiDataSchemesGetWithHttpInfo(code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get one workflow scheme 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SchemeModel</returns>
        public WorkflowApi.Client.Client.ApiResponse<SchemeModel> WorkflowApiDataSchemesGetWithHttpInfo(string code, int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'code' when calling SchemesApi->WorkflowApiDataSchemesGet");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", WorkflowApi.Client.Client.ClientUtils.ParameterToString(code)); // path parameter

            localVarRequestOptions.Operation = "SchemesApi.WorkflowApiDataSchemesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SchemeModel>("/workflow-api/data/schemes/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataSchemesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get one workflow scheme 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemeModel</returns>
        public async System.Threading.Tasks.Task<SchemeModel> WorkflowApiDataSchemesGetAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<SchemeModel> localVarResponse = await WorkflowApiDataSchemesGetWithHttpInfoAsync(code, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get one workflow scheme 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemeModel)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<SchemeModel>> WorkflowApiDataSchemesGetWithHttpInfoAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'code' when calling SchemesApi->WorkflowApiDataSchemesGet");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", WorkflowApi.Client.Client.ClientUtils.ParameterToString(code)); // path parameter

            localVarRequestOptions.Operation = "SchemesApi.WorkflowApiDataSchemesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemeModel>("/workflow-api/data/schemes/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataSchemesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get multiple workflow schemes with query 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SchemeModelGetCollectionResponse</returns>
        public SchemeModelGetCollectionResponse WorkflowApiDataSchemesGetCollection(string? search = default(string?), List<SchemeFieldFilter>? filters = default(List<SchemeFieldFilter>?), List<SchemeFieldSort>? sorts = default(List<SchemeFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<SchemeModelGetCollectionResponse> localVarResponse = WorkflowApiDataSchemesGetCollectionWithHttpInfo(search, filters, sorts, skip, take);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple workflow schemes with query 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SchemeModelGetCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<SchemeModelGetCollectionResponse> WorkflowApiDataSchemesGetCollectionWithHttpInfo(string? search = default(string?), List<SchemeFieldFilter>? filters = default(List<SchemeFieldFilter>?), List<SchemeFieldSort>? sorts = default(List<SchemeFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }
            if (sorts != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "sorts", sorts));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "take", take));
            }

            localVarRequestOptions.Operation = "SchemesApi.WorkflowApiDataSchemesGetCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SchemeModelGetCollectionResponse>("/workflow-api/data/schemes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataSchemesGetCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get multiple workflow schemes with query 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemeModelGetCollectionResponse</returns>
        public async System.Threading.Tasks.Task<SchemeModelGetCollectionResponse> WorkflowApiDataSchemesGetCollectionAsync(string? search = default(string?), List<SchemeFieldFilter>? filters = default(List<SchemeFieldFilter>?), List<SchemeFieldSort>? sorts = default(List<SchemeFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<SchemeModelGetCollectionResponse> localVarResponse = await WorkflowApiDataSchemesGetCollectionWithHttpInfoAsync(search, filters, sorts, skip, take, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple workflow schemes with query 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemeModelGetCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<SchemeModelGetCollectionResponse>> WorkflowApiDataSchemesGetCollectionWithHttpInfoAsync(string? search = default(string?), List<SchemeFieldFilter>? filters = default(List<SchemeFieldFilter>?), List<SchemeFieldSort>? sorts = default(List<SchemeFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }
            if (sorts != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "sorts", sorts));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "take", take));
            }

            localVarRequestOptions.Operation = "SchemesApi.WorkflowApiDataSchemesGetCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemeModelGetCollectionResponse>("/workflow-api/data/schemes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataSchemesGetCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update one workflow scheme 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="schemeUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateResponse</returns>
        public UpdateResponse WorkflowApiDataSchemesUpdate(string code, SchemeUpdateRequest schemeUpdateRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<UpdateResponse> localVarResponse = WorkflowApiDataSchemesUpdateWithHttpInfo(code, schemeUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update one workflow scheme 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="schemeUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<UpdateResponse> WorkflowApiDataSchemesUpdateWithHttpInfo(string code, SchemeUpdateRequest schemeUpdateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'code' when calling SchemesApi->WorkflowApiDataSchemesUpdate");
            }

            // verify the required parameter 'schemeUpdateRequest' is set
            if (schemeUpdateRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'schemeUpdateRequest' when calling SchemesApi->WorkflowApiDataSchemesUpdate");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", WorkflowApi.Client.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = schemeUpdateRequest;

            localVarRequestOptions.Operation = "SchemesApi.WorkflowApiDataSchemesUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdateResponse>("/workflow-api/data/schemes/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataSchemesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update one workflow scheme 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="schemeUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateResponse</returns>
        public async System.Threading.Tasks.Task<UpdateResponse> WorkflowApiDataSchemesUpdateAsync(string code, SchemeUpdateRequest schemeUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<UpdateResponse> localVarResponse = await WorkflowApiDataSchemesUpdateWithHttpInfoAsync(code, schemeUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update one workflow scheme 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="schemeUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<UpdateResponse>> WorkflowApiDataSchemesUpdateWithHttpInfoAsync(string code, SchemeUpdateRequest schemeUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'code' when calling SchemesApi->WorkflowApiDataSchemesUpdate");
            }

            // verify the required parameter 'schemeUpdateRequest' is set
            if (schemeUpdateRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'schemeUpdateRequest' when calling SchemesApi->WorkflowApiDataSchemesUpdate");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", WorkflowApi.Client.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = schemeUpdateRequest;

            localVarRequestOptions.Operation = "SchemesApi.WorkflowApiDataSchemesUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateResponse>("/workflow-api/data/schemes/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataSchemesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for workflow schemes 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SchemeModelGetCollectionResponse</returns>
        public SchemeModelGetCollectionResponse WorkflowApiSearchSchemes(SchemeFieldQuery schemeFieldQuery, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<SchemeModelGetCollectionResponse> localVarResponse = WorkflowApiSearchSchemesWithHttpInfo(schemeFieldQuery);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for workflow schemes 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SchemeModelGetCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<SchemeModelGetCollectionResponse> WorkflowApiSearchSchemesWithHttpInfo(SchemeFieldQuery schemeFieldQuery, int operationIndex = 0)
        {
            // verify the required parameter 'schemeFieldQuery' is set
            if (schemeFieldQuery == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'schemeFieldQuery' when calling SchemesApi->WorkflowApiSearchSchemes");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = schemeFieldQuery;

            localVarRequestOptions.Operation = "SchemesApi.WorkflowApiSearchSchemes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SchemeModelGetCollectionResponse>("/workflow-api/search/schemes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiSearchSchemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for workflow schemes 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemeModelGetCollectionResponse</returns>
        public async System.Threading.Tasks.Task<SchemeModelGetCollectionResponse> WorkflowApiSearchSchemesAsync(SchemeFieldQuery schemeFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<SchemeModelGetCollectionResponse> localVarResponse = await WorkflowApiSearchSchemesWithHttpInfoAsync(schemeFieldQuery, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for workflow schemes 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemeModelGetCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<SchemeModelGetCollectionResponse>> WorkflowApiSearchSchemesWithHttpInfoAsync(SchemeFieldQuery schemeFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schemeFieldQuery' is set
            if (schemeFieldQuery == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'schemeFieldQuery' when calling SchemesApi->WorkflowApiSearchSchemes");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = schemeFieldQuery;

            localVarRequestOptions.Operation = "SchemesApi.WorkflowApiSearchSchemes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SchemeModelGetCollectionResponse>("/workflow-api/search/schemes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiSearchSchemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
