/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using WorkflowApi.Client.Client;
using WorkflowApi.Client.Model;

namespace WorkflowApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcStateApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the list of all available to set states for the process instance.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableStatesToSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAvailableStatesToSetResponse</returns>
        GetAvailableStatesToSetResponse WorkflowApiRpcGetAvailableStatesToSet(GetAvailableStatesToSetRequest getAvailableStatesToSetRequest, int operationIndex = 0);

        /// <summary>
        /// Get the list of all available to set states for the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableStatesToSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAvailableStatesToSetResponse</returns>
        ApiResponse<GetAvailableStatesToSetResponse> WorkflowApiRpcGetAvailableStatesToSetWithHttpInfo(GetAvailableStatesToSetRequest getAvailableStatesToSetRequest, int operationIndex = 0);
        /// <summary>
        /// Get the list of all available to set states for the scheme.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableStatesToSetBySchemeCodeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAvailableStatesToSetBySchemeCodeResponse</returns>
        GetAvailableStatesToSetBySchemeCodeResponse WorkflowApiRpcGetAvailableStatesToSetBySchemeCode(GetAvailableStatesToSetBySchemeCodeRequest getAvailableStatesToSetBySchemeCodeRequest, int operationIndex = 0);

        /// <summary>
        /// Get the list of all available to set states for the scheme.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableStatesToSetBySchemeCodeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAvailableStatesToSetBySchemeCodeResponse</returns>
        ApiResponse<GetAvailableStatesToSetBySchemeCodeResponse> WorkflowApiRpcGetAvailableStatesToSetBySchemeCodeWithHttpInfo(GetAvailableStatesToSetBySchemeCodeRequest getAvailableStatesToSetBySchemeCodeRequest, int operationIndex = 0);
        /// <summary>
        /// Get the current activity name of the process instance.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentActivityNameRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCurrentActivityNameResponse</returns>
        GetCurrentActivityNameResponse WorkflowApiRpcGetCurrentActivityName(GetCurrentActivityNameRequest getCurrentActivityNameRequest, int operationIndex = 0);

        /// <summary>
        /// Get the current activity name of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentActivityNameRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCurrentActivityNameResponse</returns>
        ApiResponse<GetCurrentActivityNameResponse> WorkflowApiRpcGetCurrentActivityNameWithHttpInfo(GetCurrentActivityNameRequest getCurrentActivityNameRequest, int operationIndex = 0);
        /// <summary>
        /// Get the current state of the process instance.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCurrentStateResponse</returns>
        GetCurrentStateResponse WorkflowApiRpcGetCurrentState(GetCurrentStateRequest getCurrentStateRequest, int operationIndex = 0);

        /// <summary>
        /// Get the current state of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCurrentStateResponse</returns>
        ApiResponse<GetCurrentStateResponse> WorkflowApiRpcGetCurrentStateWithHttpInfo(GetCurrentStateRequest getCurrentStateRequest, int operationIndex = 0);
        /// <summary>
        /// Get the current state name of the process instance.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentStateNameRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCurrentStateNameResult</returns>
        GetCurrentStateNameResult WorkflowApiRpcGetCurrentStateName(GetCurrentStateNameRequest getCurrentStateNameRequest, int operationIndex = 0);

        /// <summary>
        /// Get the current state name of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentStateNameRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCurrentStateNameResult</returns>
        ApiResponse<GetCurrentStateNameResult> WorkflowApiRpcGetCurrentStateNameWithHttpInfo(GetCurrentStateNameRequest getCurrentStateNameRequest, int operationIndex = 0);
        /// <summary>
        /// Get the initial state of the scheme.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getInitialStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetInitialStateResponse</returns>
        GetInitialStateResponse WorkflowApiRpcGetInitialState(GetInitialStateRequest getInitialStateRequest, int operationIndex = 0);

        /// <summary>
        /// Get the initial state of the scheme.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getInitialStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetInitialStateResponse</returns>
        ApiResponse<GetInitialStateResponse> WorkflowApiRpcGetInitialStateWithHttpInfo(GetInitialStateRequest getInitialStateRequest, int operationIndex = 0);
        /// <summary>
        /// Resumes the process instance execution.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resumeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResumeResult</returns>
        ResumeResult WorkflowApiRpcResume(ResumeRequest resumeRequest, int operationIndex = 0);

        /// <summary>
        /// Resumes the process instance execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resumeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResumeResult</returns>
        ApiResponse<ResumeResult> WorkflowApiRpcResumeWithHttpInfo(ResumeRequest resumeRequest, int operationIndex = 0);
        /// <summary>
        /// Set activity for the process instance with execution.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setActivityWithExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiRpcSetActivityWithExecution(SetActivityWithExecutionRequest setActivityWithExecutionRequest, int operationIndex = 0);

        /// <summary>
        /// Set activity for the process instance with execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setActivityWithExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiRpcSetActivityWithExecutionWithHttpInfo(SetActivityWithExecutionRequest setActivityWithExecutionRequest, int operationIndex = 0);
        /// <summary>
        /// Set activity for the process instance without execution.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setActivityWithoutExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiRpcSetActivityWithoutExecution(SetActivityWithoutExecutionRequest setActivityWithoutExecutionRequest, int operationIndex = 0);

        /// <summary>
        /// Set activity for the process instance without execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setActivityWithoutExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiRpcSetActivityWithoutExecutionWithHttpInfo(SetActivityWithoutExecutionRequest setActivityWithoutExecutionRequest, int operationIndex = 0);
        /// <summary>
        /// Set state for the process instance with execution.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setStateWithExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiRpcSetStateWithExecution(SetStateWithExecutionRequest setStateWithExecutionRequest, int operationIndex = 0);

        /// <summary>
        /// Set state for the process instance with execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setStateWithExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiRpcSetStateWithExecutionWithHttpInfo(SetStateWithExecutionRequest setStateWithExecutionRequest, int operationIndex = 0);
        /// <summary>
        /// Set state for the process instance without execution.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setStateWithoutExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiRpcSetStateWithoutExecution(SetStateWithoutExecutionRequest setStateWithoutExecutionRequest, int operationIndex = 0);

        /// <summary>
        /// Set state for the process instance without execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setStateWithoutExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiRpcSetStateWithoutExecutionWithHttpInfo(SetStateWithoutExecutionRequest setStateWithoutExecutionRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcStateApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the list of all available to set states for the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableStatesToSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAvailableStatesToSetResponse</returns>
        System.Threading.Tasks.Task<GetAvailableStatesToSetResponse> WorkflowApiRpcGetAvailableStatesToSetAsync(GetAvailableStatesToSetRequest getAvailableStatesToSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of all available to set states for the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableStatesToSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAvailableStatesToSetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAvailableStatesToSetResponse>> WorkflowApiRpcGetAvailableStatesToSetWithHttpInfoAsync(GetAvailableStatesToSetRequest getAvailableStatesToSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of all available to set states for the scheme.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableStatesToSetBySchemeCodeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAvailableStatesToSetBySchemeCodeResponse</returns>
        System.Threading.Tasks.Task<GetAvailableStatesToSetBySchemeCodeResponse> WorkflowApiRpcGetAvailableStatesToSetBySchemeCodeAsync(GetAvailableStatesToSetBySchemeCodeRequest getAvailableStatesToSetBySchemeCodeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of all available to set states for the scheme.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableStatesToSetBySchemeCodeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAvailableStatesToSetBySchemeCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAvailableStatesToSetBySchemeCodeResponse>> WorkflowApiRpcGetAvailableStatesToSetBySchemeCodeWithHttpInfoAsync(GetAvailableStatesToSetBySchemeCodeRequest getAvailableStatesToSetBySchemeCodeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the current activity name of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentActivityNameRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCurrentActivityNameResponse</returns>
        System.Threading.Tasks.Task<GetCurrentActivityNameResponse> WorkflowApiRpcGetCurrentActivityNameAsync(GetCurrentActivityNameRequest getCurrentActivityNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the current activity name of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentActivityNameRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCurrentActivityNameResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCurrentActivityNameResponse>> WorkflowApiRpcGetCurrentActivityNameWithHttpInfoAsync(GetCurrentActivityNameRequest getCurrentActivityNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the current state of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCurrentStateResponse</returns>
        System.Threading.Tasks.Task<GetCurrentStateResponse> WorkflowApiRpcGetCurrentStateAsync(GetCurrentStateRequest getCurrentStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the current state of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCurrentStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCurrentStateResponse>> WorkflowApiRpcGetCurrentStateWithHttpInfoAsync(GetCurrentStateRequest getCurrentStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the current state name of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentStateNameRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCurrentStateNameResult</returns>
        System.Threading.Tasks.Task<GetCurrentStateNameResult> WorkflowApiRpcGetCurrentStateNameAsync(GetCurrentStateNameRequest getCurrentStateNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the current state name of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentStateNameRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCurrentStateNameResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCurrentStateNameResult>> WorkflowApiRpcGetCurrentStateNameWithHttpInfoAsync(GetCurrentStateNameRequest getCurrentStateNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the initial state of the scheme.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getInitialStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetInitialStateResponse</returns>
        System.Threading.Tasks.Task<GetInitialStateResponse> WorkflowApiRpcGetInitialStateAsync(GetInitialStateRequest getInitialStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the initial state of the scheme.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getInitialStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetInitialStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInitialStateResponse>> WorkflowApiRpcGetInitialStateWithHttpInfoAsync(GetInitialStateRequest getInitialStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resumes the process instance execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resumeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResumeResult</returns>
        System.Threading.Tasks.Task<ResumeResult> WorkflowApiRpcResumeAsync(ResumeRequest resumeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resumes the process instance execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resumeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResumeResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResumeResult>> WorkflowApiRpcResumeWithHttpInfoAsync(ResumeRequest resumeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set activity for the process instance with execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setActivityWithExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiRpcSetActivityWithExecutionAsync(SetActivityWithExecutionRequest setActivityWithExecutionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set activity for the process instance with execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setActivityWithExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiRpcSetActivityWithExecutionWithHttpInfoAsync(SetActivityWithExecutionRequest setActivityWithExecutionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set activity for the process instance without execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setActivityWithoutExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiRpcSetActivityWithoutExecutionAsync(SetActivityWithoutExecutionRequest setActivityWithoutExecutionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set activity for the process instance without execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setActivityWithoutExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiRpcSetActivityWithoutExecutionWithHttpInfoAsync(SetActivityWithoutExecutionRequest setActivityWithoutExecutionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set state for the process instance with execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setStateWithExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiRpcSetStateWithExecutionAsync(SetStateWithExecutionRequest setStateWithExecutionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set state for the process instance with execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setStateWithExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiRpcSetStateWithExecutionWithHttpInfoAsync(SetStateWithExecutionRequest setStateWithExecutionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set state for the process instance without execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setStateWithoutExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiRpcSetStateWithoutExecutionAsync(SetStateWithoutExecutionRequest setStateWithoutExecutionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set state for the process instance without execution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setStateWithoutExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiRpcSetStateWithoutExecutionWithHttpInfoAsync(SetStateWithoutExecutionRequest setStateWithoutExecutionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcStateApi : IRpcStateApiSync, IRpcStateApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RpcStateApi : IRpcStateApi
    {
        private WorkflowApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcStateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RpcStateApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcStateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RpcStateApi(string basePath)
        {
            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                new WorkflowApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcStateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RpcStateApi(WorkflowApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcStateApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RpcStateApi(WorkflowApi.Client.Client.ISynchronousClient client, WorkflowApi.Client.Client.IAsynchronousClient asyncClient, WorkflowApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public WorkflowApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public WorkflowApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public WorkflowApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WorkflowApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the list of all available to set states for the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableStatesToSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAvailableStatesToSetResponse</returns>
        public GetAvailableStatesToSetResponse WorkflowApiRpcGetAvailableStatesToSet(GetAvailableStatesToSetRequest getAvailableStatesToSetRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GetAvailableStatesToSetResponse> localVarResponse = WorkflowApiRpcGetAvailableStatesToSetWithHttpInfo(getAvailableStatesToSetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of all available to set states for the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableStatesToSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAvailableStatesToSetResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<GetAvailableStatesToSetResponse> WorkflowApiRpcGetAvailableStatesToSetWithHttpInfo(GetAvailableStatesToSetRequest getAvailableStatesToSetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getAvailableStatesToSetRequest' is set
            if (getAvailableStatesToSetRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getAvailableStatesToSetRequest' when calling RpcStateApi->WorkflowApiRpcGetAvailableStatesToSet");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getAvailableStatesToSetRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcGetAvailableStatesToSet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetAvailableStatesToSetResponse>("/workflow-api/rpc/get-available-states-to-set", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetAvailableStatesToSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of all available to set states for the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableStatesToSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAvailableStatesToSetResponse</returns>
        public async System.Threading.Tasks.Task<GetAvailableStatesToSetResponse> WorkflowApiRpcGetAvailableStatesToSetAsync(GetAvailableStatesToSetRequest getAvailableStatesToSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GetAvailableStatesToSetResponse> localVarResponse = await WorkflowApiRpcGetAvailableStatesToSetWithHttpInfoAsync(getAvailableStatesToSetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of all available to set states for the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableStatesToSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAvailableStatesToSetResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GetAvailableStatesToSetResponse>> WorkflowApiRpcGetAvailableStatesToSetWithHttpInfoAsync(GetAvailableStatesToSetRequest getAvailableStatesToSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getAvailableStatesToSetRequest' is set
            if (getAvailableStatesToSetRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getAvailableStatesToSetRequest' when calling RpcStateApi->WorkflowApiRpcGetAvailableStatesToSet");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getAvailableStatesToSetRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcGetAvailableStatesToSet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetAvailableStatesToSetResponse>("/workflow-api/rpc/get-available-states-to-set", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetAvailableStatesToSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of all available to set states for the scheme. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableStatesToSetBySchemeCodeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAvailableStatesToSetBySchemeCodeResponse</returns>
        public GetAvailableStatesToSetBySchemeCodeResponse WorkflowApiRpcGetAvailableStatesToSetBySchemeCode(GetAvailableStatesToSetBySchemeCodeRequest getAvailableStatesToSetBySchemeCodeRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GetAvailableStatesToSetBySchemeCodeResponse> localVarResponse = WorkflowApiRpcGetAvailableStatesToSetBySchemeCodeWithHttpInfo(getAvailableStatesToSetBySchemeCodeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of all available to set states for the scheme. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableStatesToSetBySchemeCodeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAvailableStatesToSetBySchemeCodeResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<GetAvailableStatesToSetBySchemeCodeResponse> WorkflowApiRpcGetAvailableStatesToSetBySchemeCodeWithHttpInfo(GetAvailableStatesToSetBySchemeCodeRequest getAvailableStatesToSetBySchemeCodeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getAvailableStatesToSetBySchemeCodeRequest' is set
            if (getAvailableStatesToSetBySchemeCodeRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getAvailableStatesToSetBySchemeCodeRequest' when calling RpcStateApi->WorkflowApiRpcGetAvailableStatesToSetBySchemeCode");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getAvailableStatesToSetBySchemeCodeRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcGetAvailableStatesToSetBySchemeCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetAvailableStatesToSetBySchemeCodeResponse>("/workflow-api/rpc/get-available-states-to-set-by-scheme-code", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetAvailableStatesToSetBySchemeCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of all available to set states for the scheme. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableStatesToSetBySchemeCodeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAvailableStatesToSetBySchemeCodeResponse</returns>
        public async System.Threading.Tasks.Task<GetAvailableStatesToSetBySchemeCodeResponse> WorkflowApiRpcGetAvailableStatesToSetBySchemeCodeAsync(GetAvailableStatesToSetBySchemeCodeRequest getAvailableStatesToSetBySchemeCodeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GetAvailableStatesToSetBySchemeCodeResponse> localVarResponse = await WorkflowApiRpcGetAvailableStatesToSetBySchemeCodeWithHttpInfoAsync(getAvailableStatesToSetBySchemeCodeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of all available to set states for the scheme. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableStatesToSetBySchemeCodeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAvailableStatesToSetBySchemeCodeResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GetAvailableStatesToSetBySchemeCodeResponse>> WorkflowApiRpcGetAvailableStatesToSetBySchemeCodeWithHttpInfoAsync(GetAvailableStatesToSetBySchemeCodeRequest getAvailableStatesToSetBySchemeCodeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getAvailableStatesToSetBySchemeCodeRequest' is set
            if (getAvailableStatesToSetBySchemeCodeRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getAvailableStatesToSetBySchemeCodeRequest' when calling RpcStateApi->WorkflowApiRpcGetAvailableStatesToSetBySchemeCode");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getAvailableStatesToSetBySchemeCodeRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcGetAvailableStatesToSetBySchemeCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetAvailableStatesToSetBySchemeCodeResponse>("/workflow-api/rpc/get-available-states-to-set-by-scheme-code", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetAvailableStatesToSetBySchemeCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the current activity name of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentActivityNameRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCurrentActivityNameResponse</returns>
        public GetCurrentActivityNameResponse WorkflowApiRpcGetCurrentActivityName(GetCurrentActivityNameRequest getCurrentActivityNameRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GetCurrentActivityNameResponse> localVarResponse = WorkflowApiRpcGetCurrentActivityNameWithHttpInfo(getCurrentActivityNameRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current activity name of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentActivityNameRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCurrentActivityNameResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<GetCurrentActivityNameResponse> WorkflowApiRpcGetCurrentActivityNameWithHttpInfo(GetCurrentActivityNameRequest getCurrentActivityNameRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getCurrentActivityNameRequest' is set
            if (getCurrentActivityNameRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getCurrentActivityNameRequest' when calling RpcStateApi->WorkflowApiRpcGetCurrentActivityName");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCurrentActivityNameRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcGetCurrentActivityName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetCurrentActivityNameResponse>("/workflow-api/rpc/get-current-activity-name", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetCurrentActivityName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the current activity name of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentActivityNameRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCurrentActivityNameResponse</returns>
        public async System.Threading.Tasks.Task<GetCurrentActivityNameResponse> WorkflowApiRpcGetCurrentActivityNameAsync(GetCurrentActivityNameRequest getCurrentActivityNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GetCurrentActivityNameResponse> localVarResponse = await WorkflowApiRpcGetCurrentActivityNameWithHttpInfoAsync(getCurrentActivityNameRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current activity name of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentActivityNameRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCurrentActivityNameResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GetCurrentActivityNameResponse>> WorkflowApiRpcGetCurrentActivityNameWithHttpInfoAsync(GetCurrentActivityNameRequest getCurrentActivityNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getCurrentActivityNameRequest' is set
            if (getCurrentActivityNameRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getCurrentActivityNameRequest' when calling RpcStateApi->WorkflowApiRpcGetCurrentActivityName");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCurrentActivityNameRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcGetCurrentActivityName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetCurrentActivityNameResponse>("/workflow-api/rpc/get-current-activity-name", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetCurrentActivityName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the current state of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCurrentStateResponse</returns>
        public GetCurrentStateResponse WorkflowApiRpcGetCurrentState(GetCurrentStateRequest getCurrentStateRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GetCurrentStateResponse> localVarResponse = WorkflowApiRpcGetCurrentStateWithHttpInfo(getCurrentStateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current state of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCurrentStateResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<GetCurrentStateResponse> WorkflowApiRpcGetCurrentStateWithHttpInfo(GetCurrentStateRequest getCurrentStateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getCurrentStateRequest' is set
            if (getCurrentStateRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getCurrentStateRequest' when calling RpcStateApi->WorkflowApiRpcGetCurrentState");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCurrentStateRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcGetCurrentState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetCurrentStateResponse>("/workflow-api/rpc/get-current-state", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetCurrentState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the current state of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCurrentStateResponse</returns>
        public async System.Threading.Tasks.Task<GetCurrentStateResponse> WorkflowApiRpcGetCurrentStateAsync(GetCurrentStateRequest getCurrentStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GetCurrentStateResponse> localVarResponse = await WorkflowApiRpcGetCurrentStateWithHttpInfoAsync(getCurrentStateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current state of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCurrentStateResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GetCurrentStateResponse>> WorkflowApiRpcGetCurrentStateWithHttpInfoAsync(GetCurrentStateRequest getCurrentStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getCurrentStateRequest' is set
            if (getCurrentStateRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getCurrentStateRequest' when calling RpcStateApi->WorkflowApiRpcGetCurrentState");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCurrentStateRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcGetCurrentState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetCurrentStateResponse>("/workflow-api/rpc/get-current-state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetCurrentState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the current state name of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentStateNameRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCurrentStateNameResult</returns>
        public GetCurrentStateNameResult WorkflowApiRpcGetCurrentStateName(GetCurrentStateNameRequest getCurrentStateNameRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GetCurrentStateNameResult> localVarResponse = WorkflowApiRpcGetCurrentStateNameWithHttpInfo(getCurrentStateNameRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current state name of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentStateNameRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCurrentStateNameResult</returns>
        public WorkflowApi.Client.Client.ApiResponse<GetCurrentStateNameResult> WorkflowApiRpcGetCurrentStateNameWithHttpInfo(GetCurrentStateNameRequest getCurrentStateNameRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getCurrentStateNameRequest' is set
            if (getCurrentStateNameRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getCurrentStateNameRequest' when calling RpcStateApi->WorkflowApiRpcGetCurrentStateName");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCurrentStateNameRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcGetCurrentStateName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetCurrentStateNameResult>("/workflow-api/rpc/get-current-state-name", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetCurrentStateName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the current state name of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentStateNameRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCurrentStateNameResult</returns>
        public async System.Threading.Tasks.Task<GetCurrentStateNameResult> WorkflowApiRpcGetCurrentStateNameAsync(GetCurrentStateNameRequest getCurrentStateNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GetCurrentStateNameResult> localVarResponse = await WorkflowApiRpcGetCurrentStateNameWithHttpInfoAsync(getCurrentStateNameRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current state name of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentStateNameRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCurrentStateNameResult)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GetCurrentStateNameResult>> WorkflowApiRpcGetCurrentStateNameWithHttpInfoAsync(GetCurrentStateNameRequest getCurrentStateNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getCurrentStateNameRequest' is set
            if (getCurrentStateNameRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getCurrentStateNameRequest' when calling RpcStateApi->WorkflowApiRpcGetCurrentStateName");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCurrentStateNameRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcGetCurrentStateName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetCurrentStateNameResult>("/workflow-api/rpc/get-current-state-name", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetCurrentStateName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the initial state of the scheme. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getInitialStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetInitialStateResponse</returns>
        public GetInitialStateResponse WorkflowApiRpcGetInitialState(GetInitialStateRequest getInitialStateRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GetInitialStateResponse> localVarResponse = WorkflowApiRpcGetInitialStateWithHttpInfo(getInitialStateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the initial state of the scheme. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getInitialStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetInitialStateResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<GetInitialStateResponse> WorkflowApiRpcGetInitialStateWithHttpInfo(GetInitialStateRequest getInitialStateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getInitialStateRequest' is set
            if (getInitialStateRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getInitialStateRequest' when calling RpcStateApi->WorkflowApiRpcGetInitialState");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getInitialStateRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcGetInitialState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetInitialStateResponse>("/workflow-api/rpc/get-initial-state", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetInitialState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the initial state of the scheme. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getInitialStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetInitialStateResponse</returns>
        public async System.Threading.Tasks.Task<GetInitialStateResponse> WorkflowApiRpcGetInitialStateAsync(GetInitialStateRequest getInitialStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GetInitialStateResponse> localVarResponse = await WorkflowApiRpcGetInitialStateWithHttpInfoAsync(getInitialStateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the initial state of the scheme. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getInitialStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetInitialStateResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GetInitialStateResponse>> WorkflowApiRpcGetInitialStateWithHttpInfoAsync(GetInitialStateRequest getInitialStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getInitialStateRequest' is set
            if (getInitialStateRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getInitialStateRequest' when calling RpcStateApi->WorkflowApiRpcGetInitialState");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getInitialStateRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcGetInitialState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetInitialStateResponse>("/workflow-api/rpc/get-initial-state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetInitialState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resumes the process instance execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resumeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResumeResult</returns>
        public ResumeResult WorkflowApiRpcResume(ResumeRequest resumeRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<ResumeResult> localVarResponse = WorkflowApiRpcResumeWithHttpInfo(resumeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resumes the process instance execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resumeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResumeResult</returns>
        public WorkflowApi.Client.Client.ApiResponse<ResumeResult> WorkflowApiRpcResumeWithHttpInfo(ResumeRequest resumeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'resumeRequest' is set
            if (resumeRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'resumeRequest' when calling RpcStateApi->WorkflowApiRpcResume");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = resumeRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcResume";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResumeResult>("/workflow-api/rpc/resume", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcResume", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resumes the process instance execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resumeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResumeResult</returns>
        public async System.Threading.Tasks.Task<ResumeResult> WorkflowApiRpcResumeAsync(ResumeRequest resumeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<ResumeResult> localVarResponse = await WorkflowApiRpcResumeWithHttpInfoAsync(resumeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resumes the process instance execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resumeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResumeResult)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<ResumeResult>> WorkflowApiRpcResumeWithHttpInfoAsync(ResumeRequest resumeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resumeRequest' is set
            if (resumeRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'resumeRequest' when calling RpcStateApi->WorkflowApiRpcResume");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = resumeRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcResume";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResumeResult>("/workflow-api/rpc/resume", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcResume", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set activity for the process instance with execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setActivityWithExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiRpcSetActivityWithExecution(SetActivityWithExecutionRequest setActivityWithExecutionRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiRpcSetActivityWithExecutionWithHttpInfo(setActivityWithExecutionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set activity for the process instance with execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setActivityWithExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiRpcSetActivityWithExecutionWithHttpInfo(SetActivityWithExecutionRequest setActivityWithExecutionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'setActivityWithExecutionRequest' is set
            if (setActivityWithExecutionRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'setActivityWithExecutionRequest' when calling RpcStateApi->WorkflowApiRpcSetActivityWithExecution");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setActivityWithExecutionRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcSetActivityWithExecution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/rpc/set-activity-with-execution", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcSetActivityWithExecution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set activity for the process instance with execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setActivityWithExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiRpcSetActivityWithExecutionAsync(SetActivityWithExecutionRequest setActivityWithExecutionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiRpcSetActivityWithExecutionWithHttpInfoAsync(setActivityWithExecutionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set activity for the process instance with execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setActivityWithExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiRpcSetActivityWithExecutionWithHttpInfoAsync(SetActivityWithExecutionRequest setActivityWithExecutionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setActivityWithExecutionRequest' is set
            if (setActivityWithExecutionRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'setActivityWithExecutionRequest' when calling RpcStateApi->WorkflowApiRpcSetActivityWithExecution");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setActivityWithExecutionRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcSetActivityWithExecution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/rpc/set-activity-with-execution", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcSetActivityWithExecution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set activity for the process instance without execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setActivityWithoutExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiRpcSetActivityWithoutExecution(SetActivityWithoutExecutionRequest setActivityWithoutExecutionRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiRpcSetActivityWithoutExecutionWithHttpInfo(setActivityWithoutExecutionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set activity for the process instance without execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setActivityWithoutExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiRpcSetActivityWithoutExecutionWithHttpInfo(SetActivityWithoutExecutionRequest setActivityWithoutExecutionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'setActivityWithoutExecutionRequest' is set
            if (setActivityWithoutExecutionRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'setActivityWithoutExecutionRequest' when calling RpcStateApi->WorkflowApiRpcSetActivityWithoutExecution");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setActivityWithoutExecutionRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcSetActivityWithoutExecution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/rpc/set-activity-without-execution", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcSetActivityWithoutExecution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set activity for the process instance without execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setActivityWithoutExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiRpcSetActivityWithoutExecutionAsync(SetActivityWithoutExecutionRequest setActivityWithoutExecutionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiRpcSetActivityWithoutExecutionWithHttpInfoAsync(setActivityWithoutExecutionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set activity for the process instance without execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setActivityWithoutExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiRpcSetActivityWithoutExecutionWithHttpInfoAsync(SetActivityWithoutExecutionRequest setActivityWithoutExecutionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setActivityWithoutExecutionRequest' is set
            if (setActivityWithoutExecutionRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'setActivityWithoutExecutionRequest' when calling RpcStateApi->WorkflowApiRpcSetActivityWithoutExecution");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setActivityWithoutExecutionRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcSetActivityWithoutExecution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/rpc/set-activity-without-execution", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcSetActivityWithoutExecution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set state for the process instance with execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setStateWithExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiRpcSetStateWithExecution(SetStateWithExecutionRequest setStateWithExecutionRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiRpcSetStateWithExecutionWithHttpInfo(setStateWithExecutionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set state for the process instance with execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setStateWithExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiRpcSetStateWithExecutionWithHttpInfo(SetStateWithExecutionRequest setStateWithExecutionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'setStateWithExecutionRequest' is set
            if (setStateWithExecutionRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'setStateWithExecutionRequest' when calling RpcStateApi->WorkflowApiRpcSetStateWithExecution");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setStateWithExecutionRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcSetStateWithExecution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/rpc/set-state-with-execution", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcSetStateWithExecution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set state for the process instance with execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setStateWithExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiRpcSetStateWithExecutionAsync(SetStateWithExecutionRequest setStateWithExecutionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiRpcSetStateWithExecutionWithHttpInfoAsync(setStateWithExecutionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set state for the process instance with execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setStateWithExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiRpcSetStateWithExecutionWithHttpInfoAsync(SetStateWithExecutionRequest setStateWithExecutionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setStateWithExecutionRequest' is set
            if (setStateWithExecutionRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'setStateWithExecutionRequest' when calling RpcStateApi->WorkflowApiRpcSetStateWithExecution");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setStateWithExecutionRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcSetStateWithExecution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/rpc/set-state-with-execution", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcSetStateWithExecution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set state for the process instance without execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setStateWithoutExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiRpcSetStateWithoutExecution(SetStateWithoutExecutionRequest setStateWithoutExecutionRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiRpcSetStateWithoutExecutionWithHttpInfo(setStateWithoutExecutionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set state for the process instance without execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setStateWithoutExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiRpcSetStateWithoutExecutionWithHttpInfo(SetStateWithoutExecutionRequest setStateWithoutExecutionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'setStateWithoutExecutionRequest' is set
            if (setStateWithoutExecutionRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'setStateWithoutExecutionRequest' when calling RpcStateApi->WorkflowApiRpcSetStateWithoutExecution");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setStateWithoutExecutionRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcSetStateWithoutExecution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/rpc/set-state-without-execution", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcSetStateWithoutExecution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set state for the process instance without execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setStateWithoutExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiRpcSetStateWithoutExecutionAsync(SetStateWithoutExecutionRequest setStateWithoutExecutionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiRpcSetStateWithoutExecutionWithHttpInfoAsync(setStateWithoutExecutionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set state for the process instance without execution. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setStateWithoutExecutionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiRpcSetStateWithoutExecutionWithHttpInfoAsync(SetStateWithoutExecutionRequest setStateWithoutExecutionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setStateWithoutExecutionRequest' is set
            if (setStateWithoutExecutionRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'setStateWithoutExecutionRequest' when calling RpcStateApi->WorkflowApiRpcSetStateWithoutExecution");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setStateWithoutExecutionRequest;

            localVarRequestOptions.Operation = "RpcStateApi.WorkflowApiRpcSetStateWithoutExecution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/rpc/set-state-without-execution", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcSetStateWithoutExecution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
