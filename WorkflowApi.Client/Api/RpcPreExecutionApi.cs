/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using WorkflowApi.Client.Client;
using WorkflowApi.Client.Model;

namespace WorkflowApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcPreExecutionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Pre-execute from the specified activity of the process instance.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PreExecuteResponse</returns>
        PreExecuteResponse WorkflowApiRpcPreExecute(PreExecuteRequest preExecuteRequest, int operationIndex = 0);

        /// <summary>
        /// Pre-execute from the specified activity of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PreExecuteResponse</returns>
        ApiResponse<PreExecuteResponse> WorkflowApiRpcPreExecuteWithHttpInfo(PreExecuteRequest preExecuteRequest, int operationIndex = 0);
        /// <summary>
        /// Pre-execute from the current activity of the process instance.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteFromCurrentActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PreExecuteFromCurrentActivityResponse</returns>
        PreExecuteFromCurrentActivityResponse WorkflowApiRpcPreExecuteFromCurrentActivity(PreExecuteFromCurrentActivityRequest preExecuteFromCurrentActivityRequest, int operationIndex = 0);

        /// <summary>
        /// Pre-execute from the current activity of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteFromCurrentActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PreExecuteFromCurrentActivityResponse</returns>
        ApiResponse<PreExecuteFromCurrentActivityResponse> WorkflowApiRpcPreExecuteFromCurrentActivityWithHttpInfo(PreExecuteFromCurrentActivityRequest preExecuteFromCurrentActivityRequest, int operationIndex = 0);
        /// <summary>
        /// Pre-execute from the initial activity of the process instance.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteFromInitialActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PreExecuteFromInitialActivityResponse</returns>
        PreExecuteFromInitialActivityResponse WorkflowApiRpcPreExecuteFromInitialActivity(PreExecuteFromInitialActivityRequest preExecuteFromInitialActivityRequest, int operationIndex = 0);

        /// <summary>
        /// Pre-execute from the initial activity of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteFromInitialActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PreExecuteFromInitialActivityResponse</returns>
        ApiResponse<PreExecuteFromInitialActivityResponse> WorkflowApiRpcPreExecuteFromInitialActivityWithHttpInfo(PreExecuteFromInitialActivityRequest preExecuteFromInitialActivityRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcPreExecutionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Pre-execute from the specified activity of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreExecuteResponse</returns>
        System.Threading.Tasks.Task<PreExecuteResponse> WorkflowApiRpcPreExecuteAsync(PreExecuteRequest preExecuteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pre-execute from the specified activity of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreExecuteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreExecuteResponse>> WorkflowApiRpcPreExecuteWithHttpInfoAsync(PreExecuteRequest preExecuteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pre-execute from the current activity of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteFromCurrentActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreExecuteFromCurrentActivityResponse</returns>
        System.Threading.Tasks.Task<PreExecuteFromCurrentActivityResponse> WorkflowApiRpcPreExecuteFromCurrentActivityAsync(PreExecuteFromCurrentActivityRequest preExecuteFromCurrentActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pre-execute from the current activity of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteFromCurrentActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreExecuteFromCurrentActivityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreExecuteFromCurrentActivityResponse>> WorkflowApiRpcPreExecuteFromCurrentActivityWithHttpInfoAsync(PreExecuteFromCurrentActivityRequest preExecuteFromCurrentActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pre-execute from the initial activity of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteFromInitialActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreExecuteFromInitialActivityResponse</returns>
        System.Threading.Tasks.Task<PreExecuteFromInitialActivityResponse> WorkflowApiRpcPreExecuteFromInitialActivityAsync(PreExecuteFromInitialActivityRequest preExecuteFromInitialActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pre-execute from the initial activity of the process instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteFromInitialActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreExecuteFromInitialActivityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreExecuteFromInitialActivityResponse>> WorkflowApiRpcPreExecuteFromInitialActivityWithHttpInfoAsync(PreExecuteFromInitialActivityRequest preExecuteFromInitialActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcPreExecutionApi : IRpcPreExecutionApiSync, IRpcPreExecutionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RpcPreExecutionApi : IRpcPreExecutionApi
    {
        private WorkflowApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcPreExecutionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RpcPreExecutionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcPreExecutionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RpcPreExecutionApi(string basePath)
        {
            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                new WorkflowApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcPreExecutionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RpcPreExecutionApi(WorkflowApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcPreExecutionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RpcPreExecutionApi(WorkflowApi.Client.Client.ISynchronousClient client, WorkflowApi.Client.Client.IAsynchronousClient asyncClient, WorkflowApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public WorkflowApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public WorkflowApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public WorkflowApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WorkflowApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Pre-execute from the specified activity of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PreExecuteResponse</returns>
        public PreExecuteResponse WorkflowApiRpcPreExecute(PreExecuteRequest preExecuteRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<PreExecuteResponse> localVarResponse = WorkflowApiRpcPreExecuteWithHttpInfo(preExecuteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pre-execute from the specified activity of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PreExecuteResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<PreExecuteResponse> WorkflowApiRpcPreExecuteWithHttpInfo(PreExecuteRequest preExecuteRequest, int operationIndex = 0)
        {
            // verify the required parameter 'preExecuteRequest' is set
            if (preExecuteRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'preExecuteRequest' when calling RpcPreExecutionApi->WorkflowApiRpcPreExecute");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = preExecuteRequest;

            localVarRequestOptions.Operation = "RpcPreExecutionApi.WorkflowApiRpcPreExecute";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PreExecuteResponse>("/workflow-api/rpc/pre-execute", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcPreExecute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pre-execute from the specified activity of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreExecuteResponse</returns>
        public async System.Threading.Tasks.Task<PreExecuteResponse> WorkflowApiRpcPreExecuteAsync(PreExecuteRequest preExecuteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<PreExecuteResponse> localVarResponse = await WorkflowApiRpcPreExecuteWithHttpInfoAsync(preExecuteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pre-execute from the specified activity of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreExecuteResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<PreExecuteResponse>> WorkflowApiRpcPreExecuteWithHttpInfoAsync(PreExecuteRequest preExecuteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'preExecuteRequest' is set
            if (preExecuteRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'preExecuteRequest' when calling RpcPreExecutionApi->WorkflowApiRpcPreExecute");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = preExecuteRequest;

            localVarRequestOptions.Operation = "RpcPreExecutionApi.WorkflowApiRpcPreExecute";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PreExecuteResponse>("/workflow-api/rpc/pre-execute", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcPreExecute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pre-execute from the current activity of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteFromCurrentActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PreExecuteFromCurrentActivityResponse</returns>
        public PreExecuteFromCurrentActivityResponse WorkflowApiRpcPreExecuteFromCurrentActivity(PreExecuteFromCurrentActivityRequest preExecuteFromCurrentActivityRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<PreExecuteFromCurrentActivityResponse> localVarResponse = WorkflowApiRpcPreExecuteFromCurrentActivityWithHttpInfo(preExecuteFromCurrentActivityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pre-execute from the current activity of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteFromCurrentActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PreExecuteFromCurrentActivityResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<PreExecuteFromCurrentActivityResponse> WorkflowApiRpcPreExecuteFromCurrentActivityWithHttpInfo(PreExecuteFromCurrentActivityRequest preExecuteFromCurrentActivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'preExecuteFromCurrentActivityRequest' is set
            if (preExecuteFromCurrentActivityRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'preExecuteFromCurrentActivityRequest' when calling RpcPreExecutionApi->WorkflowApiRpcPreExecuteFromCurrentActivity");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = preExecuteFromCurrentActivityRequest;

            localVarRequestOptions.Operation = "RpcPreExecutionApi.WorkflowApiRpcPreExecuteFromCurrentActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PreExecuteFromCurrentActivityResponse>("/workflow-api/rpc/pre-execute-from-current-activity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcPreExecuteFromCurrentActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pre-execute from the current activity of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteFromCurrentActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreExecuteFromCurrentActivityResponse</returns>
        public async System.Threading.Tasks.Task<PreExecuteFromCurrentActivityResponse> WorkflowApiRpcPreExecuteFromCurrentActivityAsync(PreExecuteFromCurrentActivityRequest preExecuteFromCurrentActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<PreExecuteFromCurrentActivityResponse> localVarResponse = await WorkflowApiRpcPreExecuteFromCurrentActivityWithHttpInfoAsync(preExecuteFromCurrentActivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pre-execute from the current activity of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteFromCurrentActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreExecuteFromCurrentActivityResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<PreExecuteFromCurrentActivityResponse>> WorkflowApiRpcPreExecuteFromCurrentActivityWithHttpInfoAsync(PreExecuteFromCurrentActivityRequest preExecuteFromCurrentActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'preExecuteFromCurrentActivityRequest' is set
            if (preExecuteFromCurrentActivityRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'preExecuteFromCurrentActivityRequest' when calling RpcPreExecutionApi->WorkflowApiRpcPreExecuteFromCurrentActivity");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = preExecuteFromCurrentActivityRequest;

            localVarRequestOptions.Operation = "RpcPreExecutionApi.WorkflowApiRpcPreExecuteFromCurrentActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PreExecuteFromCurrentActivityResponse>("/workflow-api/rpc/pre-execute-from-current-activity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcPreExecuteFromCurrentActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pre-execute from the initial activity of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteFromInitialActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PreExecuteFromInitialActivityResponse</returns>
        public PreExecuteFromInitialActivityResponse WorkflowApiRpcPreExecuteFromInitialActivity(PreExecuteFromInitialActivityRequest preExecuteFromInitialActivityRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<PreExecuteFromInitialActivityResponse> localVarResponse = WorkflowApiRpcPreExecuteFromInitialActivityWithHttpInfo(preExecuteFromInitialActivityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pre-execute from the initial activity of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteFromInitialActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PreExecuteFromInitialActivityResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<PreExecuteFromInitialActivityResponse> WorkflowApiRpcPreExecuteFromInitialActivityWithHttpInfo(PreExecuteFromInitialActivityRequest preExecuteFromInitialActivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'preExecuteFromInitialActivityRequest' is set
            if (preExecuteFromInitialActivityRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'preExecuteFromInitialActivityRequest' when calling RpcPreExecutionApi->WorkflowApiRpcPreExecuteFromInitialActivity");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = preExecuteFromInitialActivityRequest;

            localVarRequestOptions.Operation = "RpcPreExecutionApi.WorkflowApiRpcPreExecuteFromInitialActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PreExecuteFromInitialActivityResponse>("/workflow-api/rpc/pre-execute-from-initial-activity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcPreExecuteFromInitialActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pre-execute from the initial activity of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteFromInitialActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreExecuteFromInitialActivityResponse</returns>
        public async System.Threading.Tasks.Task<PreExecuteFromInitialActivityResponse> WorkflowApiRpcPreExecuteFromInitialActivityAsync(PreExecuteFromInitialActivityRequest preExecuteFromInitialActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<PreExecuteFromInitialActivityResponse> localVarResponse = await WorkflowApiRpcPreExecuteFromInitialActivityWithHttpInfoAsync(preExecuteFromInitialActivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pre-execute from the initial activity of the process instance. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preExecuteFromInitialActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreExecuteFromInitialActivityResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<PreExecuteFromInitialActivityResponse>> WorkflowApiRpcPreExecuteFromInitialActivityWithHttpInfoAsync(PreExecuteFromInitialActivityRequest preExecuteFromInitialActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'preExecuteFromInitialActivityRequest' is set
            if (preExecuteFromInitialActivityRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'preExecuteFromInitialActivityRequest' when calling RpcPreExecutionApi->WorkflowApiRpcPreExecuteFromInitialActivity");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = preExecuteFromInitialActivityRequest;

            localVarRequestOptions.Operation = "RpcPreExecutionApi.WorkflowApiRpcPreExecuteFromInitialActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PreExecuteFromInitialActivityResponse>("/workflow-api/rpc/pre-execute-from-initial-activity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcPreExecuteFromInitialActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
