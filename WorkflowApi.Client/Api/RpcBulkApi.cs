/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using WorkflowApi.Client.Client;
using WorkflowApi.Client.Model;

namespace WorkflowApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcBulkApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create multiple process instances.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkCreateInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        Dictionary<string, ObjectBulkTaskResult> WorkflowApiRpcBulkCreateInstance(BulkCreateInstanceRequest bulkCreateInstanceRequest, int operationIndex = 0);

        /// <summary>
        /// Create multiple process instances.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkCreateInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        ApiResponse<Dictionary<string, ObjectBulkTaskResult>> WorkflowApiRpcBulkCreateInstanceWithHttpInfo(BulkCreateInstanceRequest bulkCreateInstanceRequest, int operationIndex = 0);
        /// <summary>
        /// Delete multiple process instances with all their subprocesses.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkDeleteInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        Dictionary<string, ObjectBulkTaskResult> WorkflowApiRpcBulkDeleteInstance(BulkDeleteInstanceRequest bulkDeleteInstanceRequest, int operationIndex = 0);

        /// <summary>
        /// Delete multiple process instances with all their subprocesses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkDeleteInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        ApiResponse<Dictionary<string, ObjectBulkTaskResult>> WorkflowApiRpcBulkDeleteInstanceWithHttpInfo(BulkDeleteInstanceRequest bulkDeleteInstanceRequest, int operationIndex = 0);
        /// <summary>
        /// Execute multiple commands with specified identity.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkExecuteCommandRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, CommandExecutionResultBulkTaskResult&gt;</returns>
        Dictionary<string, CommandExecutionResultBulkTaskResult> WorkflowApiRpcBulkExecuteCommand(BulkExecuteCommandRequest bulkExecuteCommandRequest, int operationIndex = 0);

        /// <summary>
        /// Execute multiple commands with specified identity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkExecuteCommandRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, CommandExecutionResultBulkTaskResult&gt;</returns>
        ApiResponse<Dictionary<string, CommandExecutionResultBulkTaskResult>> WorkflowApiRpcBulkExecuteCommandWithHttpInfo(BulkExecuteCommandRequest bulkExecuteCommandRequest, int operationIndex = 0);
        /// <summary>
        /// Get multiple lists of commands available for current activities and identities.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetAvailableCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, WorkflowCommandListBulkTaskResult&gt;</returns>
        Dictionary<string, WorkflowCommandListBulkTaskResult> WorkflowApiRpcBulkGetAvailableCommands(BulkGetAvailableCommandsRequest bulkGetAvailableCommandsRequest, int operationIndex = 0);

        /// <summary>
        /// Get multiple lists of commands available for current activities and identities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetAvailableCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, WorkflowCommandListBulkTaskResult&gt;</returns>
        ApiResponse<Dictionary<string, WorkflowCommandListBulkTaskResult>> WorkflowApiRpcBulkGetAvailableCommandsWithHttpInfo(BulkGetAvailableCommandsRequest bulkGetAvailableCommandsRequest, int operationIndex = 0);
        /// <summary>
        /// Get multiple process instances with parameters.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetProcessInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, ProcessInstanceBulkTaskResult&gt;</returns>
        Dictionary<string, ProcessInstanceBulkTaskResult> WorkflowApiRpcBulkGetProcessInstance(BulkGetProcessInstanceRequest bulkGetProcessInstanceRequest, int operationIndex = 0);

        /// <summary>
        /// Get multiple process instances with parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetProcessInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, ProcessInstanceBulkTaskResult&gt;</returns>
        ApiResponse<Dictionary<string, ProcessInstanceBulkTaskResult>> WorkflowApiRpcBulkGetProcessInstanceWithHttpInfo(BulkGetProcessInstanceRequest bulkGetProcessInstanceRequest, int operationIndex = 0);
        /// <summary>
        /// Get multiple root process instances with all subprocesses as trees.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetProcessInstancesTreeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, ProcessInstancesTreeBulkTaskResult&gt;</returns>
        Dictionary<string, ProcessInstancesTreeBulkTaskResult> WorkflowApiRpcBulkGetProcessInstancesTree(BulkGetProcessInstancesTreeRequest bulkGetProcessInstancesTreeRequest, int operationIndex = 0);

        /// <summary>
        /// Get multiple root process instances with all subprocesses as trees.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetProcessInstancesTreeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, ProcessInstancesTreeBulkTaskResult&gt;</returns>
        ApiResponse<Dictionary<string, ProcessInstancesTreeBulkTaskResult>> WorkflowApiRpcBulkGetProcessInstancesTreeWithHttpInfo(BulkGetProcessInstancesTreeRequest bulkGetProcessInstancesTreeRequest, int operationIndex = 0);
        /// <summary>
        /// Check existence of multiple process instances.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkIsProcessExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, BooleanBulkTaskResult&gt;</returns>
        Dictionary<string, BooleanBulkTaskResult> WorkflowApiRpcBulkIsProcessExists(BulkIsProcessExistsRequest bulkIsProcessExistsRequest, int operationIndex = 0);

        /// <summary>
        /// Check existence of multiple process instances.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkIsProcessExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, BooleanBulkTaskResult&gt;</returns>
        ApiResponse<Dictionary<string, BooleanBulkTaskResult>> WorkflowApiRpcBulkIsProcessExistsWithHttpInfo(BulkIsProcessExistsRequest bulkIsProcessExistsRequest, int operationIndex = 0);
        /// <summary>
        /// Update multiple schemes of process instances if they are obsolete.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkUpdateSchemeIfObsoleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        Dictionary<string, ObjectBulkTaskResult> WorkflowApiRpcBulkUpdateSchemeIfObsolete(BulkUpdateSchemeIfObsoleteRequest bulkUpdateSchemeIfObsoleteRequest, int operationIndex = 0);

        /// <summary>
        /// Update multiple schemes of process instances if they are obsolete.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkUpdateSchemeIfObsoleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        ApiResponse<Dictionary<string, ObjectBulkTaskResult>> WorkflowApiRpcBulkUpdateSchemeIfObsoleteWithHttpInfo(BulkUpdateSchemeIfObsoleteRequest bulkUpdateSchemeIfObsoleteRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcBulkApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create multiple process instances.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkCreateInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, ObjectBulkTaskResult>> WorkflowApiRpcBulkCreateInstanceAsync(BulkCreateInstanceRequest bulkCreateInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create multiple process instances.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkCreateInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, ObjectBulkTaskResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, ObjectBulkTaskResult>>> WorkflowApiRpcBulkCreateInstanceWithHttpInfoAsync(BulkCreateInstanceRequest bulkCreateInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete multiple process instances with all their subprocesses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkDeleteInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, ObjectBulkTaskResult>> WorkflowApiRpcBulkDeleteInstanceAsync(BulkDeleteInstanceRequest bulkDeleteInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete multiple process instances with all their subprocesses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkDeleteInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, ObjectBulkTaskResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, ObjectBulkTaskResult>>> WorkflowApiRpcBulkDeleteInstanceWithHttpInfoAsync(BulkDeleteInstanceRequest bulkDeleteInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Execute multiple commands with specified identity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkExecuteCommandRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, CommandExecutionResultBulkTaskResult&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, CommandExecutionResultBulkTaskResult>> WorkflowApiRpcBulkExecuteCommandAsync(BulkExecuteCommandRequest bulkExecuteCommandRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Execute multiple commands with specified identity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkExecuteCommandRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, CommandExecutionResultBulkTaskResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, CommandExecutionResultBulkTaskResult>>> WorkflowApiRpcBulkExecuteCommandWithHttpInfoAsync(BulkExecuteCommandRequest bulkExecuteCommandRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get multiple lists of commands available for current activities and identities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetAvailableCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, WorkflowCommandListBulkTaskResult&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, WorkflowCommandListBulkTaskResult>> WorkflowApiRpcBulkGetAvailableCommandsAsync(BulkGetAvailableCommandsRequest bulkGetAvailableCommandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get multiple lists of commands available for current activities and identities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetAvailableCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, WorkflowCommandListBulkTaskResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, WorkflowCommandListBulkTaskResult>>> WorkflowApiRpcBulkGetAvailableCommandsWithHttpInfoAsync(BulkGetAvailableCommandsRequest bulkGetAvailableCommandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get multiple process instances with parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetProcessInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, ProcessInstanceBulkTaskResult&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, ProcessInstanceBulkTaskResult>> WorkflowApiRpcBulkGetProcessInstanceAsync(BulkGetProcessInstanceRequest bulkGetProcessInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get multiple process instances with parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetProcessInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, ProcessInstanceBulkTaskResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, ProcessInstanceBulkTaskResult>>> WorkflowApiRpcBulkGetProcessInstanceWithHttpInfoAsync(BulkGetProcessInstanceRequest bulkGetProcessInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get multiple root process instances with all subprocesses as trees.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetProcessInstancesTreeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, ProcessInstancesTreeBulkTaskResult&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, ProcessInstancesTreeBulkTaskResult>> WorkflowApiRpcBulkGetProcessInstancesTreeAsync(BulkGetProcessInstancesTreeRequest bulkGetProcessInstancesTreeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get multiple root process instances with all subprocesses as trees.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetProcessInstancesTreeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, ProcessInstancesTreeBulkTaskResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, ProcessInstancesTreeBulkTaskResult>>> WorkflowApiRpcBulkGetProcessInstancesTreeWithHttpInfoAsync(BulkGetProcessInstancesTreeRequest bulkGetProcessInstancesTreeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check existence of multiple process instances.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkIsProcessExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, BooleanBulkTaskResult&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, BooleanBulkTaskResult>> WorkflowApiRpcBulkIsProcessExistsAsync(BulkIsProcessExistsRequest bulkIsProcessExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check existence of multiple process instances.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkIsProcessExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, BooleanBulkTaskResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, BooleanBulkTaskResult>>> WorkflowApiRpcBulkIsProcessExistsWithHttpInfoAsync(BulkIsProcessExistsRequest bulkIsProcessExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update multiple schemes of process instances if they are obsolete.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkUpdateSchemeIfObsoleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, ObjectBulkTaskResult>> WorkflowApiRpcBulkUpdateSchemeIfObsoleteAsync(BulkUpdateSchemeIfObsoleteRequest bulkUpdateSchemeIfObsoleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update multiple schemes of process instances if they are obsolete.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkUpdateSchemeIfObsoleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, ObjectBulkTaskResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, ObjectBulkTaskResult>>> WorkflowApiRpcBulkUpdateSchemeIfObsoleteWithHttpInfoAsync(BulkUpdateSchemeIfObsoleteRequest bulkUpdateSchemeIfObsoleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcBulkApi : IRpcBulkApiSync, IRpcBulkApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RpcBulkApi : IRpcBulkApi
    {
        private WorkflowApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcBulkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RpcBulkApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcBulkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RpcBulkApi(string basePath)
        {
            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                new WorkflowApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcBulkApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RpcBulkApi(WorkflowApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcBulkApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RpcBulkApi(WorkflowApi.Client.Client.ISynchronousClient client, WorkflowApi.Client.Client.IAsynchronousClient asyncClient, WorkflowApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public WorkflowApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public WorkflowApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public WorkflowApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WorkflowApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create multiple process instances. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkCreateInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        public Dictionary<string, ObjectBulkTaskResult> WorkflowApiRpcBulkCreateInstance(BulkCreateInstanceRequest bulkCreateInstanceRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ObjectBulkTaskResult>> localVarResponse = WorkflowApiRpcBulkCreateInstanceWithHttpInfo(bulkCreateInstanceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create multiple process instances. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkCreateInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        public WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ObjectBulkTaskResult>> WorkflowApiRpcBulkCreateInstanceWithHttpInfo(BulkCreateInstanceRequest bulkCreateInstanceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bulkCreateInstanceRequest' is set
            if (bulkCreateInstanceRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'bulkCreateInstanceRequest' when calling RpcBulkApi->WorkflowApiRpcBulkCreateInstance");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bulkCreateInstanceRequest;

            localVarRequestOptions.Operation = "RpcBulkApi.WorkflowApiRpcBulkCreateInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, ObjectBulkTaskResult>>("/workflow-api/rpc/bulk-create-instance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcBulkCreateInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create multiple process instances. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkCreateInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, ObjectBulkTaskResult>> WorkflowApiRpcBulkCreateInstanceAsync(BulkCreateInstanceRequest bulkCreateInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ObjectBulkTaskResult>> localVarResponse = await WorkflowApiRpcBulkCreateInstanceWithHttpInfoAsync(bulkCreateInstanceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create multiple process instances. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkCreateInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, ObjectBulkTaskResult&gt;)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ObjectBulkTaskResult>>> WorkflowApiRpcBulkCreateInstanceWithHttpInfoAsync(BulkCreateInstanceRequest bulkCreateInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bulkCreateInstanceRequest' is set
            if (bulkCreateInstanceRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'bulkCreateInstanceRequest' when calling RpcBulkApi->WorkflowApiRpcBulkCreateInstance");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bulkCreateInstanceRequest;

            localVarRequestOptions.Operation = "RpcBulkApi.WorkflowApiRpcBulkCreateInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, ObjectBulkTaskResult>>("/workflow-api/rpc/bulk-create-instance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcBulkCreateInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete multiple process instances with all their subprocesses. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkDeleteInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        public Dictionary<string, ObjectBulkTaskResult> WorkflowApiRpcBulkDeleteInstance(BulkDeleteInstanceRequest bulkDeleteInstanceRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ObjectBulkTaskResult>> localVarResponse = WorkflowApiRpcBulkDeleteInstanceWithHttpInfo(bulkDeleteInstanceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete multiple process instances with all their subprocesses. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkDeleteInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        public WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ObjectBulkTaskResult>> WorkflowApiRpcBulkDeleteInstanceWithHttpInfo(BulkDeleteInstanceRequest bulkDeleteInstanceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bulkDeleteInstanceRequest' is set
            if (bulkDeleteInstanceRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'bulkDeleteInstanceRequest' when calling RpcBulkApi->WorkflowApiRpcBulkDeleteInstance");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bulkDeleteInstanceRequest;

            localVarRequestOptions.Operation = "RpcBulkApi.WorkflowApiRpcBulkDeleteInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, ObjectBulkTaskResult>>("/workflow-api/rpc/bulk-delete-instance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcBulkDeleteInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete multiple process instances with all their subprocesses. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkDeleteInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, ObjectBulkTaskResult>> WorkflowApiRpcBulkDeleteInstanceAsync(BulkDeleteInstanceRequest bulkDeleteInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ObjectBulkTaskResult>> localVarResponse = await WorkflowApiRpcBulkDeleteInstanceWithHttpInfoAsync(bulkDeleteInstanceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete multiple process instances with all their subprocesses. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkDeleteInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, ObjectBulkTaskResult&gt;)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ObjectBulkTaskResult>>> WorkflowApiRpcBulkDeleteInstanceWithHttpInfoAsync(BulkDeleteInstanceRequest bulkDeleteInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bulkDeleteInstanceRequest' is set
            if (bulkDeleteInstanceRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'bulkDeleteInstanceRequest' when calling RpcBulkApi->WorkflowApiRpcBulkDeleteInstance");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bulkDeleteInstanceRequest;

            localVarRequestOptions.Operation = "RpcBulkApi.WorkflowApiRpcBulkDeleteInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, ObjectBulkTaskResult>>("/workflow-api/rpc/bulk-delete-instance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcBulkDeleteInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute multiple commands with specified identity. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkExecuteCommandRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, CommandExecutionResultBulkTaskResult&gt;</returns>
        public Dictionary<string, CommandExecutionResultBulkTaskResult> WorkflowApiRpcBulkExecuteCommand(BulkExecuteCommandRequest bulkExecuteCommandRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Dictionary<string, CommandExecutionResultBulkTaskResult>> localVarResponse = WorkflowApiRpcBulkExecuteCommandWithHttpInfo(bulkExecuteCommandRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Execute multiple commands with specified identity. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkExecuteCommandRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, CommandExecutionResultBulkTaskResult&gt;</returns>
        public WorkflowApi.Client.Client.ApiResponse<Dictionary<string, CommandExecutionResultBulkTaskResult>> WorkflowApiRpcBulkExecuteCommandWithHttpInfo(BulkExecuteCommandRequest bulkExecuteCommandRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bulkExecuteCommandRequest' is set
            if (bulkExecuteCommandRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'bulkExecuteCommandRequest' when calling RpcBulkApi->WorkflowApiRpcBulkExecuteCommand");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bulkExecuteCommandRequest;

            localVarRequestOptions.Operation = "RpcBulkApi.WorkflowApiRpcBulkExecuteCommand";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, CommandExecutionResultBulkTaskResult>>("/workflow-api/rpc/bulk-execute-command", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcBulkExecuteCommand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute multiple commands with specified identity. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkExecuteCommandRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, CommandExecutionResultBulkTaskResult&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, CommandExecutionResultBulkTaskResult>> WorkflowApiRpcBulkExecuteCommandAsync(BulkExecuteCommandRequest bulkExecuteCommandRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Dictionary<string, CommandExecutionResultBulkTaskResult>> localVarResponse = await WorkflowApiRpcBulkExecuteCommandWithHttpInfoAsync(bulkExecuteCommandRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Execute multiple commands with specified identity. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkExecuteCommandRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, CommandExecutionResultBulkTaskResult&gt;)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Dictionary<string, CommandExecutionResultBulkTaskResult>>> WorkflowApiRpcBulkExecuteCommandWithHttpInfoAsync(BulkExecuteCommandRequest bulkExecuteCommandRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bulkExecuteCommandRequest' is set
            if (bulkExecuteCommandRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'bulkExecuteCommandRequest' when calling RpcBulkApi->WorkflowApiRpcBulkExecuteCommand");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bulkExecuteCommandRequest;

            localVarRequestOptions.Operation = "RpcBulkApi.WorkflowApiRpcBulkExecuteCommand";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, CommandExecutionResultBulkTaskResult>>("/workflow-api/rpc/bulk-execute-command", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcBulkExecuteCommand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get multiple lists of commands available for current activities and identities. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetAvailableCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, WorkflowCommandListBulkTaskResult&gt;</returns>
        public Dictionary<string, WorkflowCommandListBulkTaskResult> WorkflowApiRpcBulkGetAvailableCommands(BulkGetAvailableCommandsRequest bulkGetAvailableCommandsRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Dictionary<string, WorkflowCommandListBulkTaskResult>> localVarResponse = WorkflowApiRpcBulkGetAvailableCommandsWithHttpInfo(bulkGetAvailableCommandsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple lists of commands available for current activities and identities. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetAvailableCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, WorkflowCommandListBulkTaskResult&gt;</returns>
        public WorkflowApi.Client.Client.ApiResponse<Dictionary<string, WorkflowCommandListBulkTaskResult>> WorkflowApiRpcBulkGetAvailableCommandsWithHttpInfo(BulkGetAvailableCommandsRequest bulkGetAvailableCommandsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bulkGetAvailableCommandsRequest' is set
            if (bulkGetAvailableCommandsRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'bulkGetAvailableCommandsRequest' when calling RpcBulkApi->WorkflowApiRpcBulkGetAvailableCommands");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bulkGetAvailableCommandsRequest;

            localVarRequestOptions.Operation = "RpcBulkApi.WorkflowApiRpcBulkGetAvailableCommands";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, WorkflowCommandListBulkTaskResult>>("/workflow-api/rpc/bulk-get-available-commands", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcBulkGetAvailableCommands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get multiple lists of commands available for current activities and identities. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetAvailableCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, WorkflowCommandListBulkTaskResult&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, WorkflowCommandListBulkTaskResult>> WorkflowApiRpcBulkGetAvailableCommandsAsync(BulkGetAvailableCommandsRequest bulkGetAvailableCommandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Dictionary<string, WorkflowCommandListBulkTaskResult>> localVarResponse = await WorkflowApiRpcBulkGetAvailableCommandsWithHttpInfoAsync(bulkGetAvailableCommandsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple lists of commands available for current activities and identities. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetAvailableCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, WorkflowCommandListBulkTaskResult&gt;)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Dictionary<string, WorkflowCommandListBulkTaskResult>>> WorkflowApiRpcBulkGetAvailableCommandsWithHttpInfoAsync(BulkGetAvailableCommandsRequest bulkGetAvailableCommandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bulkGetAvailableCommandsRequest' is set
            if (bulkGetAvailableCommandsRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'bulkGetAvailableCommandsRequest' when calling RpcBulkApi->WorkflowApiRpcBulkGetAvailableCommands");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bulkGetAvailableCommandsRequest;

            localVarRequestOptions.Operation = "RpcBulkApi.WorkflowApiRpcBulkGetAvailableCommands";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, WorkflowCommandListBulkTaskResult>>("/workflow-api/rpc/bulk-get-available-commands", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcBulkGetAvailableCommands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get multiple process instances with parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetProcessInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, ProcessInstanceBulkTaskResult&gt;</returns>
        public Dictionary<string, ProcessInstanceBulkTaskResult> WorkflowApiRpcBulkGetProcessInstance(BulkGetProcessInstanceRequest bulkGetProcessInstanceRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ProcessInstanceBulkTaskResult>> localVarResponse = WorkflowApiRpcBulkGetProcessInstanceWithHttpInfo(bulkGetProcessInstanceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple process instances with parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetProcessInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, ProcessInstanceBulkTaskResult&gt;</returns>
        public WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ProcessInstanceBulkTaskResult>> WorkflowApiRpcBulkGetProcessInstanceWithHttpInfo(BulkGetProcessInstanceRequest bulkGetProcessInstanceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bulkGetProcessInstanceRequest' is set
            if (bulkGetProcessInstanceRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'bulkGetProcessInstanceRequest' when calling RpcBulkApi->WorkflowApiRpcBulkGetProcessInstance");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bulkGetProcessInstanceRequest;

            localVarRequestOptions.Operation = "RpcBulkApi.WorkflowApiRpcBulkGetProcessInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, ProcessInstanceBulkTaskResult>>("/workflow-api/rpc/bulk-get-process-instance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcBulkGetProcessInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get multiple process instances with parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetProcessInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, ProcessInstanceBulkTaskResult&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, ProcessInstanceBulkTaskResult>> WorkflowApiRpcBulkGetProcessInstanceAsync(BulkGetProcessInstanceRequest bulkGetProcessInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ProcessInstanceBulkTaskResult>> localVarResponse = await WorkflowApiRpcBulkGetProcessInstanceWithHttpInfoAsync(bulkGetProcessInstanceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple process instances with parameters. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetProcessInstanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, ProcessInstanceBulkTaskResult&gt;)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ProcessInstanceBulkTaskResult>>> WorkflowApiRpcBulkGetProcessInstanceWithHttpInfoAsync(BulkGetProcessInstanceRequest bulkGetProcessInstanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bulkGetProcessInstanceRequest' is set
            if (bulkGetProcessInstanceRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'bulkGetProcessInstanceRequest' when calling RpcBulkApi->WorkflowApiRpcBulkGetProcessInstance");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bulkGetProcessInstanceRequest;

            localVarRequestOptions.Operation = "RpcBulkApi.WorkflowApiRpcBulkGetProcessInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, ProcessInstanceBulkTaskResult>>("/workflow-api/rpc/bulk-get-process-instance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcBulkGetProcessInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get multiple root process instances with all subprocesses as trees. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetProcessInstancesTreeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, ProcessInstancesTreeBulkTaskResult&gt;</returns>
        public Dictionary<string, ProcessInstancesTreeBulkTaskResult> WorkflowApiRpcBulkGetProcessInstancesTree(BulkGetProcessInstancesTreeRequest bulkGetProcessInstancesTreeRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ProcessInstancesTreeBulkTaskResult>> localVarResponse = WorkflowApiRpcBulkGetProcessInstancesTreeWithHttpInfo(bulkGetProcessInstancesTreeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple root process instances with all subprocesses as trees. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetProcessInstancesTreeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, ProcessInstancesTreeBulkTaskResult&gt;</returns>
        public WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ProcessInstancesTreeBulkTaskResult>> WorkflowApiRpcBulkGetProcessInstancesTreeWithHttpInfo(BulkGetProcessInstancesTreeRequest bulkGetProcessInstancesTreeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bulkGetProcessInstancesTreeRequest' is set
            if (bulkGetProcessInstancesTreeRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'bulkGetProcessInstancesTreeRequest' when calling RpcBulkApi->WorkflowApiRpcBulkGetProcessInstancesTree");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bulkGetProcessInstancesTreeRequest;

            localVarRequestOptions.Operation = "RpcBulkApi.WorkflowApiRpcBulkGetProcessInstancesTree";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, ProcessInstancesTreeBulkTaskResult>>("/workflow-api/rpc/bulk-get-process-instance-tree", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcBulkGetProcessInstancesTree", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get multiple root process instances with all subprocesses as trees. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetProcessInstancesTreeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, ProcessInstancesTreeBulkTaskResult&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, ProcessInstancesTreeBulkTaskResult>> WorkflowApiRpcBulkGetProcessInstancesTreeAsync(BulkGetProcessInstancesTreeRequest bulkGetProcessInstancesTreeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ProcessInstancesTreeBulkTaskResult>> localVarResponse = await WorkflowApiRpcBulkGetProcessInstancesTreeWithHttpInfoAsync(bulkGetProcessInstancesTreeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple root process instances with all subprocesses as trees. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkGetProcessInstancesTreeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, ProcessInstancesTreeBulkTaskResult&gt;)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ProcessInstancesTreeBulkTaskResult>>> WorkflowApiRpcBulkGetProcessInstancesTreeWithHttpInfoAsync(BulkGetProcessInstancesTreeRequest bulkGetProcessInstancesTreeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bulkGetProcessInstancesTreeRequest' is set
            if (bulkGetProcessInstancesTreeRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'bulkGetProcessInstancesTreeRequest' when calling RpcBulkApi->WorkflowApiRpcBulkGetProcessInstancesTree");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bulkGetProcessInstancesTreeRequest;

            localVarRequestOptions.Operation = "RpcBulkApi.WorkflowApiRpcBulkGetProcessInstancesTree";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, ProcessInstancesTreeBulkTaskResult>>("/workflow-api/rpc/bulk-get-process-instance-tree", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcBulkGetProcessInstancesTree", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check existence of multiple process instances. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkIsProcessExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, BooleanBulkTaskResult&gt;</returns>
        public Dictionary<string, BooleanBulkTaskResult> WorkflowApiRpcBulkIsProcessExists(BulkIsProcessExistsRequest bulkIsProcessExistsRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Dictionary<string, BooleanBulkTaskResult>> localVarResponse = WorkflowApiRpcBulkIsProcessExistsWithHttpInfo(bulkIsProcessExistsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check existence of multiple process instances. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkIsProcessExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, BooleanBulkTaskResult&gt;</returns>
        public WorkflowApi.Client.Client.ApiResponse<Dictionary<string, BooleanBulkTaskResult>> WorkflowApiRpcBulkIsProcessExistsWithHttpInfo(BulkIsProcessExistsRequest bulkIsProcessExistsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bulkIsProcessExistsRequest' is set
            if (bulkIsProcessExistsRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'bulkIsProcessExistsRequest' when calling RpcBulkApi->WorkflowApiRpcBulkIsProcessExists");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bulkIsProcessExistsRequest;

            localVarRequestOptions.Operation = "RpcBulkApi.WorkflowApiRpcBulkIsProcessExists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, BooleanBulkTaskResult>>("/workflow-api/rpc/bulk-is-process-exists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcBulkIsProcessExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check existence of multiple process instances. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkIsProcessExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, BooleanBulkTaskResult&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, BooleanBulkTaskResult>> WorkflowApiRpcBulkIsProcessExistsAsync(BulkIsProcessExistsRequest bulkIsProcessExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Dictionary<string, BooleanBulkTaskResult>> localVarResponse = await WorkflowApiRpcBulkIsProcessExistsWithHttpInfoAsync(bulkIsProcessExistsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check existence of multiple process instances. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkIsProcessExistsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, BooleanBulkTaskResult&gt;)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Dictionary<string, BooleanBulkTaskResult>>> WorkflowApiRpcBulkIsProcessExistsWithHttpInfoAsync(BulkIsProcessExistsRequest bulkIsProcessExistsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bulkIsProcessExistsRequest' is set
            if (bulkIsProcessExistsRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'bulkIsProcessExistsRequest' when calling RpcBulkApi->WorkflowApiRpcBulkIsProcessExists");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bulkIsProcessExistsRequest;

            localVarRequestOptions.Operation = "RpcBulkApi.WorkflowApiRpcBulkIsProcessExists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, BooleanBulkTaskResult>>("/workflow-api/rpc/bulk-is-process-exists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcBulkIsProcessExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update multiple schemes of process instances if they are obsolete. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkUpdateSchemeIfObsoleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        public Dictionary<string, ObjectBulkTaskResult> WorkflowApiRpcBulkUpdateSchemeIfObsolete(BulkUpdateSchemeIfObsoleteRequest bulkUpdateSchemeIfObsoleteRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ObjectBulkTaskResult>> localVarResponse = WorkflowApiRpcBulkUpdateSchemeIfObsoleteWithHttpInfo(bulkUpdateSchemeIfObsoleteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update multiple schemes of process instances if they are obsolete. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkUpdateSchemeIfObsoleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        public WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ObjectBulkTaskResult>> WorkflowApiRpcBulkUpdateSchemeIfObsoleteWithHttpInfo(BulkUpdateSchemeIfObsoleteRequest bulkUpdateSchemeIfObsoleteRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bulkUpdateSchemeIfObsoleteRequest' is set
            if (bulkUpdateSchemeIfObsoleteRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'bulkUpdateSchemeIfObsoleteRequest' when calling RpcBulkApi->WorkflowApiRpcBulkUpdateSchemeIfObsolete");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bulkUpdateSchemeIfObsoleteRequest;

            localVarRequestOptions.Operation = "RpcBulkApi.WorkflowApiRpcBulkUpdateSchemeIfObsolete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, ObjectBulkTaskResult>>("/workflow-api/rpc/bulk-update-scheme-if-obsolete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcBulkUpdateSchemeIfObsolete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update multiple schemes of process instances if they are obsolete. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkUpdateSchemeIfObsoleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, ObjectBulkTaskResult&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, ObjectBulkTaskResult>> WorkflowApiRpcBulkUpdateSchemeIfObsoleteAsync(BulkUpdateSchemeIfObsoleteRequest bulkUpdateSchemeIfObsoleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ObjectBulkTaskResult>> localVarResponse = await WorkflowApiRpcBulkUpdateSchemeIfObsoleteWithHttpInfoAsync(bulkUpdateSchemeIfObsoleteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update multiple schemes of process instances if they are obsolete. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkUpdateSchemeIfObsoleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, ObjectBulkTaskResult&gt;)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Dictionary<string, ObjectBulkTaskResult>>> WorkflowApiRpcBulkUpdateSchemeIfObsoleteWithHttpInfoAsync(BulkUpdateSchemeIfObsoleteRequest bulkUpdateSchemeIfObsoleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bulkUpdateSchemeIfObsoleteRequest' is set
            if (bulkUpdateSchemeIfObsoleteRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'bulkUpdateSchemeIfObsoleteRequest' when calling RpcBulkApi->WorkflowApiRpcBulkUpdateSchemeIfObsolete");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bulkUpdateSchemeIfObsoleteRequest;

            localVarRequestOptions.Operation = "RpcBulkApi.WorkflowApiRpcBulkUpdateSchemeIfObsolete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, ObjectBulkTaskResult>>("/workflow-api/rpc/bulk-update-scheme-if-obsolete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcBulkUpdateSchemeIfObsolete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
