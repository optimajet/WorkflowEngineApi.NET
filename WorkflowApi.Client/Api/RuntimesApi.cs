/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using WorkflowApi.Client.Client;
using WorkflowApi.Client.Model;

namespace WorkflowApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRuntimesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get one runtime instance
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuntimeModel</returns>
        RuntimeModel WorkflowApiDataRuntimesGet(string id, int operationIndex = 0);

        /// <summary>
        /// Get one runtime instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuntimeModel</returns>
        ApiResponse<RuntimeModel> WorkflowApiDataRuntimesGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get runtime instances with query
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuntimeModelGetCollectionResponse</returns>
        RuntimeModelGetCollectionResponse WorkflowApiDataRuntimesGetCollection(string? search = default(string?), List<RuntimeFieldFilter>? filters = default(List<RuntimeFieldFilter>?), List<RuntimeFieldSort>? sorts = default(List<RuntimeFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0);

        /// <summary>
        /// Get runtime instances with query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuntimeModelGetCollectionResponse</returns>
        ApiResponse<RuntimeModelGetCollectionResponse> WorkflowApiDataRuntimesGetCollectionWithHttpInfo(string? search = default(string?), List<RuntimeFieldFilter>? filters = default(List<RuntimeFieldFilter>?), List<RuntimeFieldSort>? sorts = default(List<RuntimeFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0);
        /// <summary>
        /// Search for runtime instances
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runtimeFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuntimeModelGetCollectionResponse</returns>
        RuntimeModelGetCollectionResponse WorkflowApiSearchRuntimes(RuntimeFieldQuery runtimeFieldQuery, int operationIndex = 0);

        /// <summary>
        /// Search for runtime instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runtimeFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuntimeModelGetCollectionResponse</returns>
        ApiResponse<RuntimeModelGetCollectionResponse> WorkflowApiSearchRuntimesWithHttpInfo(RuntimeFieldQuery runtimeFieldQuery, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRuntimesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get one runtime instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuntimeModel</returns>
        System.Threading.Tasks.Task<RuntimeModel> WorkflowApiDataRuntimesGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get one runtime instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuntimeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuntimeModel>> WorkflowApiDataRuntimesGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get runtime instances with query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuntimeModelGetCollectionResponse</returns>
        System.Threading.Tasks.Task<RuntimeModelGetCollectionResponse> WorkflowApiDataRuntimesGetCollectionAsync(string? search = default(string?), List<RuntimeFieldFilter>? filters = default(List<RuntimeFieldFilter>?), List<RuntimeFieldSort>? sorts = default(List<RuntimeFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get runtime instances with query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuntimeModelGetCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuntimeModelGetCollectionResponse>> WorkflowApiDataRuntimesGetCollectionWithHttpInfoAsync(string? search = default(string?), List<RuntimeFieldFilter>? filters = default(List<RuntimeFieldFilter>?), List<RuntimeFieldSort>? sorts = default(List<RuntimeFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for runtime instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runtimeFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuntimeModelGetCollectionResponse</returns>
        System.Threading.Tasks.Task<RuntimeModelGetCollectionResponse> WorkflowApiSearchRuntimesAsync(RuntimeFieldQuery runtimeFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for runtime instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runtimeFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuntimeModelGetCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuntimeModelGetCollectionResponse>> WorkflowApiSearchRuntimesWithHttpInfoAsync(RuntimeFieldQuery runtimeFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRuntimesApi : IRuntimesApiSync, IRuntimesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RuntimesApi : IRuntimesApi
    {
        private WorkflowApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RuntimesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RuntimesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RuntimesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RuntimesApi(string basePath)
        {
            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                new WorkflowApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RuntimesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RuntimesApi(WorkflowApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RuntimesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RuntimesApi(WorkflowApi.Client.Client.ISynchronousClient client, WorkflowApi.Client.Client.IAsynchronousClient asyncClient, WorkflowApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public WorkflowApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public WorkflowApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public WorkflowApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WorkflowApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get one runtime instance 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuntimeModel</returns>
        public RuntimeModel WorkflowApiDataRuntimesGet(string id, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<RuntimeModel> localVarResponse = WorkflowApiDataRuntimesGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get one runtime instance 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuntimeModel</returns>
        public WorkflowApi.Client.Client.ApiResponse<RuntimeModel> WorkflowApiDataRuntimesGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling RuntimesApi->WorkflowApiDataRuntimesGet");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", WorkflowApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RuntimesApi.WorkflowApiDataRuntimesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RuntimeModel>("/workflow-api/data/runtimes/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataRuntimesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get one runtime instance 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuntimeModel</returns>
        public async System.Threading.Tasks.Task<RuntimeModel> WorkflowApiDataRuntimesGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<RuntimeModel> localVarResponse = await WorkflowApiDataRuntimesGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get one runtime instance 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuntimeModel)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<RuntimeModel>> WorkflowApiDataRuntimesGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling RuntimesApi->WorkflowApiDataRuntimesGet");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", WorkflowApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RuntimesApi.WorkflowApiDataRuntimesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RuntimeModel>("/workflow-api/data/runtimes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataRuntimesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get runtime instances with query 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuntimeModelGetCollectionResponse</returns>
        public RuntimeModelGetCollectionResponse WorkflowApiDataRuntimesGetCollection(string? search = default(string?), List<RuntimeFieldFilter>? filters = default(List<RuntimeFieldFilter>?), List<RuntimeFieldSort>? sorts = default(List<RuntimeFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<RuntimeModelGetCollectionResponse> localVarResponse = WorkflowApiDataRuntimesGetCollectionWithHttpInfo(search, filters, sorts, skip, take);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get runtime instances with query 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuntimeModelGetCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<RuntimeModelGetCollectionResponse> WorkflowApiDataRuntimesGetCollectionWithHttpInfo(string? search = default(string?), List<RuntimeFieldFilter>? filters = default(List<RuntimeFieldFilter>?), List<RuntimeFieldSort>? sorts = default(List<RuntimeFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }
            if (sorts != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "sorts", sorts));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "take", take));
            }

            localVarRequestOptions.Operation = "RuntimesApi.WorkflowApiDataRuntimesGetCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RuntimeModelGetCollectionResponse>("/workflow-api/data/runtimes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataRuntimesGetCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get runtime instances with query 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuntimeModelGetCollectionResponse</returns>
        public async System.Threading.Tasks.Task<RuntimeModelGetCollectionResponse> WorkflowApiDataRuntimesGetCollectionAsync(string? search = default(string?), List<RuntimeFieldFilter>? filters = default(List<RuntimeFieldFilter>?), List<RuntimeFieldSort>? sorts = default(List<RuntimeFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<RuntimeModelGetCollectionResponse> localVarResponse = await WorkflowApiDataRuntimesGetCollectionWithHttpInfoAsync(search, filters, sorts, skip, take, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get runtime instances with query 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuntimeModelGetCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<RuntimeModelGetCollectionResponse>> WorkflowApiDataRuntimesGetCollectionWithHttpInfoAsync(string? search = default(string?), List<RuntimeFieldFilter>? filters = default(List<RuntimeFieldFilter>?), List<RuntimeFieldSort>? sorts = default(List<RuntimeFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }
            if (sorts != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "sorts", sorts));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "take", take));
            }

            localVarRequestOptions.Operation = "RuntimesApi.WorkflowApiDataRuntimesGetCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RuntimeModelGetCollectionResponse>("/workflow-api/data/runtimes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataRuntimesGetCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for runtime instances 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runtimeFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuntimeModelGetCollectionResponse</returns>
        public RuntimeModelGetCollectionResponse WorkflowApiSearchRuntimes(RuntimeFieldQuery runtimeFieldQuery, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<RuntimeModelGetCollectionResponse> localVarResponse = WorkflowApiSearchRuntimesWithHttpInfo(runtimeFieldQuery);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for runtime instances 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runtimeFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuntimeModelGetCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<RuntimeModelGetCollectionResponse> WorkflowApiSearchRuntimesWithHttpInfo(RuntimeFieldQuery runtimeFieldQuery, int operationIndex = 0)
        {
            // verify the required parameter 'runtimeFieldQuery' is set
            if (runtimeFieldQuery == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'runtimeFieldQuery' when calling RuntimesApi->WorkflowApiSearchRuntimes");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = runtimeFieldQuery;

            localVarRequestOptions.Operation = "RuntimesApi.WorkflowApiSearchRuntimes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RuntimeModelGetCollectionResponse>("/workflow-api/search/runtimes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiSearchRuntimes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for runtime instances 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runtimeFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuntimeModelGetCollectionResponse</returns>
        public async System.Threading.Tasks.Task<RuntimeModelGetCollectionResponse> WorkflowApiSearchRuntimesAsync(RuntimeFieldQuery runtimeFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<RuntimeModelGetCollectionResponse> localVarResponse = await WorkflowApiSearchRuntimesWithHttpInfoAsync(runtimeFieldQuery, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for runtime instances 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runtimeFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuntimeModelGetCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<RuntimeModelGetCollectionResponse>> WorkflowApiSearchRuntimesWithHttpInfoAsync(RuntimeFieldQuery runtimeFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'runtimeFieldQuery' is set
            if (runtimeFieldQuery == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'runtimeFieldQuery' when calling RuntimesApi->WorkflowApiSearchRuntimes");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = runtimeFieldQuery;

            localVarRequestOptions.Operation = "RuntimesApi.WorkflowApiSearchRuntimes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RuntimeModelGetCollectionResponse>("/workflow-api/search/runtimes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiSearchRuntimes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
