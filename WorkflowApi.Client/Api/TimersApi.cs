/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using WorkflowApi.Client.Client;
using WorkflowApi.Client.Model;

namespace WorkflowApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create one process instance timer
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="timerCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowApiDataProcessesTimersCreate(Guid processId, string name, TimerCreateRequest timerCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create one process instance timer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="timerCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowApiDataProcessesTimersCreateWithHttpInfo(Guid processId, string name, TimerCreateRequest timerCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Create multiple process instance timers
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="timerCreateRequestWithName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCollectionResponse</returns>
        CreateCollectionResponse WorkflowApiDataProcessesTimersCreateCollection(Guid processId, List<TimerCreateRequestWithName> timerCreateRequestWithName, int operationIndex = 0);

        /// <summary>
        /// Create multiple process instance timers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="timerCreateRequestWithName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCollectionResponse</returns>
        ApiResponse<CreateCollectionResponse> WorkflowApiDataProcessesTimersCreateCollectionWithHttpInfo(Guid processId, List<TimerCreateRequestWithName> timerCreateRequestWithName, int operationIndex = 0);
        /// <summary>
        /// Delete one process instance timer
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteResponse</returns>
        DeleteResponse WorkflowApiDataProcessesTimersDelete(Guid processId, string name, int operationIndex = 0);

        /// <summary>
        /// Delete one process instance timer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        ApiResponse<DeleteResponse> WorkflowApiDataProcessesTimersDeleteWithHttpInfo(Guid processId, string name, int operationIndex = 0);
        /// <summary>
        /// Delete multiple process instance timers with filter
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteCollectionResponse</returns>
        DeleteCollectionResponse WorkflowApiDataProcessesTimersDeleteCollection(Guid processId, List<TimerFieldFilter>? filters = default(List<TimerFieldFilter>?), int operationIndex = 0);

        /// <summary>
        /// Delete multiple process instance timers with filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteCollectionResponse</returns>
        ApiResponse<DeleteCollectionResponse> WorkflowApiDataProcessesTimersDeleteCollectionWithHttpInfo(Guid processId, List<TimerFieldFilter>? filters = default(List<TimerFieldFilter>?), int operationIndex = 0);
        /// <summary>
        /// Get one process instance timer
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimerModel</returns>
        TimerModel WorkflowApiDataProcessesTimersGet(Guid processId, string name, int operationIndex = 0);

        /// <summary>
        /// Get one process instance timer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimerModel</returns>
        ApiResponse<TimerModel> WorkflowApiDataProcessesTimersGetWithHttpInfo(Guid processId, string name, int operationIndex = 0);
        /// <summary>
        /// Get multiple process instance timers with query
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimerModelGetCollectionResponse</returns>
        TimerModelGetCollectionResponse WorkflowApiDataProcessesTimersGetCollection(Guid processId, string? search = default(string?), List<TimerFieldFilter>? filters = default(List<TimerFieldFilter>?), List<TimerFieldSort>? sorts = default(List<TimerFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0);

        /// <summary>
        /// Get multiple process instance timers with query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimerModelGetCollectionResponse</returns>
        ApiResponse<TimerModelGetCollectionResponse> WorkflowApiDataProcessesTimersGetCollectionWithHttpInfo(Guid processId, string? search = default(string?), List<TimerFieldFilter>? filters = default(List<TimerFieldFilter>?), List<TimerFieldSort>? sorts = default(List<TimerFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0);
        /// <summary>
        /// Update one process instance timer
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="timerUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateResponse</returns>
        UpdateResponse WorkflowApiDataProcessesTimersUpdate(Guid processId, string name, TimerUpdateRequest timerUpdateRequest, int operationIndex = 0);

        /// <summary>
        /// Update one process instance timer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="timerUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateResponse</returns>
        ApiResponse<UpdateResponse> WorkflowApiDataProcessesTimersUpdateWithHttpInfo(Guid processId, string name, TimerUpdateRequest timerUpdateRequest, int operationIndex = 0);
        /// <summary>
        /// Search for process instance timers
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimerModelGetCollectionResponse</returns>
        TimerModelGetCollectionResponse WorkflowApiSearchProcessesTimers(TimerFieldQuery timerFieldQuery, int operationIndex = 0);

        /// <summary>
        /// Search for process instance timers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimerModelGetCollectionResponse</returns>
        ApiResponse<TimerModelGetCollectionResponse> WorkflowApiSearchProcessesTimersWithHttpInfo(TimerFieldQuery timerFieldQuery, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create one process instance timer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="timerCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowApiDataProcessesTimersCreateAsync(Guid processId, string name, TimerCreateRequest timerCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create one process instance timer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="timerCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowApiDataProcessesTimersCreateWithHttpInfoAsync(Guid processId, string name, TimerCreateRequest timerCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create multiple process instance timers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="timerCreateRequestWithName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCollectionResponse</returns>
        System.Threading.Tasks.Task<CreateCollectionResponse> WorkflowApiDataProcessesTimersCreateCollectionAsync(Guid processId, List<TimerCreateRequestWithName> timerCreateRequestWithName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create multiple process instance timers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="timerCreateRequestWithName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCollectionResponse>> WorkflowApiDataProcessesTimersCreateCollectionWithHttpInfoAsync(Guid processId, List<TimerCreateRequestWithName> timerCreateRequestWithName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete one process instance timer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteResponse</returns>
        System.Threading.Tasks.Task<DeleteResponse> WorkflowApiDataProcessesTimersDeleteAsync(Guid processId, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete one process instance timer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> WorkflowApiDataProcessesTimersDeleteWithHttpInfoAsync(Guid processId, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete multiple process instance timers with filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCollectionResponse</returns>
        System.Threading.Tasks.Task<DeleteCollectionResponse> WorkflowApiDataProcessesTimersDeleteCollectionAsync(Guid processId, List<TimerFieldFilter>? filters = default(List<TimerFieldFilter>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete multiple process instance timers with filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteCollectionResponse>> WorkflowApiDataProcessesTimersDeleteCollectionWithHttpInfoAsync(Guid processId, List<TimerFieldFilter>? filters = default(List<TimerFieldFilter>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get one process instance timer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimerModel</returns>
        System.Threading.Tasks.Task<TimerModel> WorkflowApiDataProcessesTimersGetAsync(Guid processId, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get one process instance timer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimerModel>> WorkflowApiDataProcessesTimersGetWithHttpInfoAsync(Guid processId, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get multiple process instance timers with query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimerModelGetCollectionResponse</returns>
        System.Threading.Tasks.Task<TimerModelGetCollectionResponse> WorkflowApiDataProcessesTimersGetCollectionAsync(Guid processId, string? search = default(string?), List<TimerFieldFilter>? filters = default(List<TimerFieldFilter>?), List<TimerFieldSort>? sorts = default(List<TimerFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get multiple process instance timers with query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimerModelGetCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimerModelGetCollectionResponse>> WorkflowApiDataProcessesTimersGetCollectionWithHttpInfoAsync(Guid processId, string? search = default(string?), List<TimerFieldFilter>? filters = default(List<TimerFieldFilter>?), List<TimerFieldSort>? sorts = default(List<TimerFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update one process instance timer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="timerUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateResponse</returns>
        System.Threading.Tasks.Task<UpdateResponse> WorkflowApiDataProcessesTimersUpdateAsync(Guid processId, string name, TimerUpdateRequest timerUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update one process instance timer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="timerUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateResponse>> WorkflowApiDataProcessesTimersUpdateWithHttpInfoAsync(Guid processId, string name, TimerUpdateRequest timerUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for process instance timers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimerModelGetCollectionResponse</returns>
        System.Threading.Tasks.Task<TimerModelGetCollectionResponse> WorkflowApiSearchProcessesTimersAsync(TimerFieldQuery timerFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for process instance timers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimerModelGetCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimerModelGetCollectionResponse>> WorkflowApiSearchProcessesTimersWithHttpInfoAsync(TimerFieldQuery timerFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimersApi : ITimersApiSync, ITimersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TimersApi : ITimersApi
    {
        private WorkflowApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TimersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TimersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TimersApi(string basePath)
        {
            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                new WorkflowApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TimersApi(WorkflowApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TimersApi(WorkflowApi.Client.Client.ISynchronousClient client, WorkflowApi.Client.Client.IAsynchronousClient asyncClient, WorkflowApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public WorkflowApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public WorkflowApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public WorkflowApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WorkflowApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create one process instance timer 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="timerCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowApiDataProcessesTimersCreate(Guid processId, string name, TimerCreateRequest timerCreateRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = WorkflowApiDataProcessesTimersCreateWithHttpInfo(processId, name, timerCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create one process instance timer 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="timerCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public WorkflowApi.Client.Client.ApiResponse<Object> WorkflowApiDataProcessesTimersCreateWithHttpInfo(Guid processId, string name, TimerCreateRequest timerCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TimersApi->WorkflowApiDataProcessesTimersCreate");
            }

            // verify the required parameter 'timerCreateRequest' is set
            if (timerCreateRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'timerCreateRequest' when calling TimersApi->WorkflowApiDataProcessesTimersCreate");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", WorkflowApi.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = timerCreateRequest;

            localVarRequestOptions.Operation = "TimersApi.WorkflowApiDataProcessesTimersCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workflow-api/data/processes/{processId}/timers/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTimersCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create one process instance timer 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="timerCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowApiDataProcessesTimersCreateAsync(Guid processId, string name, TimerCreateRequest timerCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<Object> localVarResponse = await WorkflowApiDataProcessesTimersCreateWithHttpInfoAsync(processId, name, timerCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create one process instance timer 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="timerCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<Object>> WorkflowApiDataProcessesTimersCreateWithHttpInfoAsync(Guid processId, string name, TimerCreateRequest timerCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TimersApi->WorkflowApiDataProcessesTimersCreate");
            }

            // verify the required parameter 'timerCreateRequest' is set
            if (timerCreateRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'timerCreateRequest' when calling TimersApi->WorkflowApiDataProcessesTimersCreate");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", WorkflowApi.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = timerCreateRequest;

            localVarRequestOptions.Operation = "TimersApi.WorkflowApiDataProcessesTimersCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workflow-api/data/processes/{processId}/timers/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTimersCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create multiple process instance timers 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="timerCreateRequestWithName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCollectionResponse</returns>
        public CreateCollectionResponse WorkflowApiDataProcessesTimersCreateCollection(Guid processId, List<TimerCreateRequestWithName> timerCreateRequestWithName, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<CreateCollectionResponse> localVarResponse = WorkflowApiDataProcessesTimersCreateCollectionWithHttpInfo(processId, timerCreateRequestWithName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create multiple process instance timers 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="timerCreateRequestWithName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<CreateCollectionResponse> WorkflowApiDataProcessesTimersCreateCollectionWithHttpInfo(Guid processId, List<TimerCreateRequestWithName> timerCreateRequestWithName, int operationIndex = 0)
        {
            // verify the required parameter 'timerCreateRequestWithName' is set
            if (timerCreateRequestWithName == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'timerCreateRequestWithName' when calling TimersApi->WorkflowApiDataProcessesTimersCreateCollection");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            localVarRequestOptions.Data = timerCreateRequestWithName;

            localVarRequestOptions.Operation = "TimersApi.WorkflowApiDataProcessesTimersCreateCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCollectionResponse>("/workflow-api/data/processes/{processId}/timers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTimersCreateCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create multiple process instance timers 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="timerCreateRequestWithName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCollectionResponse</returns>
        public async System.Threading.Tasks.Task<CreateCollectionResponse> WorkflowApiDataProcessesTimersCreateCollectionAsync(Guid processId, List<TimerCreateRequestWithName> timerCreateRequestWithName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<CreateCollectionResponse> localVarResponse = await WorkflowApiDataProcessesTimersCreateCollectionWithHttpInfoAsync(processId, timerCreateRequestWithName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create multiple process instance timers 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="timerCreateRequestWithName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<CreateCollectionResponse>> WorkflowApiDataProcessesTimersCreateCollectionWithHttpInfoAsync(Guid processId, List<TimerCreateRequestWithName> timerCreateRequestWithName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'timerCreateRequestWithName' is set
            if (timerCreateRequestWithName == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'timerCreateRequestWithName' when calling TimersApi->WorkflowApiDataProcessesTimersCreateCollection");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            localVarRequestOptions.Data = timerCreateRequestWithName;

            localVarRequestOptions.Operation = "TimersApi.WorkflowApiDataProcessesTimersCreateCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCollectionResponse>("/workflow-api/data/processes/{processId}/timers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTimersCreateCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete one process instance timer 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteResponse</returns>
        public DeleteResponse WorkflowApiDataProcessesTimersDelete(Guid processId, string name, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteResponse> localVarResponse = WorkflowApiDataProcessesTimersDeleteWithHttpInfo(processId, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete one process instance timer 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<DeleteResponse> WorkflowApiDataProcessesTimersDeleteWithHttpInfo(Guid processId, string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TimersApi->WorkflowApiDataProcessesTimersDelete");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", WorkflowApi.Client.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "TimersApi.WorkflowApiDataProcessesTimersDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteResponse>("/workflow-api/data/processes/{processId}/timers/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTimersDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete one process instance timer 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteResponse</returns>
        public async System.Threading.Tasks.Task<DeleteResponse> WorkflowApiDataProcessesTimersDeleteAsync(Guid processId, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteResponse> localVarResponse = await WorkflowApiDataProcessesTimersDeleteWithHttpInfoAsync(processId, name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete one process instance timer 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<DeleteResponse>> WorkflowApiDataProcessesTimersDeleteWithHttpInfoAsync(Guid processId, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TimersApi->WorkflowApiDataProcessesTimersDelete");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", WorkflowApi.Client.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "TimersApi.WorkflowApiDataProcessesTimersDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteResponse>("/workflow-api/data/processes/{processId}/timers/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTimersDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete multiple process instance timers with filter 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteCollectionResponse</returns>
        public DeleteCollectionResponse WorkflowApiDataProcessesTimersDeleteCollection(Guid processId, List<TimerFieldFilter>? filters = default(List<TimerFieldFilter>?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteCollectionResponse> localVarResponse = WorkflowApiDataProcessesTimersDeleteCollectionWithHttpInfo(processId, filters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete multiple process instance timers with filter 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<DeleteCollectionResponse> WorkflowApiDataProcessesTimersDeleteCollectionWithHttpInfo(Guid processId, List<TimerFieldFilter>? filters = default(List<TimerFieldFilter>?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }

            localVarRequestOptions.Operation = "TimersApi.WorkflowApiDataProcessesTimersDeleteCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteCollectionResponse>("/workflow-api/data/processes/{processId}/timers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTimersDeleteCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete multiple process instance timers with filter 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCollectionResponse</returns>
        public async System.Threading.Tasks.Task<DeleteCollectionResponse> WorkflowApiDataProcessesTimersDeleteCollectionAsync(Guid processId, List<TimerFieldFilter>? filters = default(List<TimerFieldFilter>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<DeleteCollectionResponse> localVarResponse = await WorkflowApiDataProcessesTimersDeleteCollectionWithHttpInfoAsync(processId, filters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete multiple process instance timers with filter 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="filters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<DeleteCollectionResponse>> WorkflowApiDataProcessesTimersDeleteCollectionWithHttpInfoAsync(Guid processId, List<TimerFieldFilter>? filters = default(List<TimerFieldFilter>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }

            localVarRequestOptions.Operation = "TimersApi.WorkflowApiDataProcessesTimersDeleteCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteCollectionResponse>("/workflow-api/data/processes/{processId}/timers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTimersDeleteCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get one process instance timer 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimerModel</returns>
        public TimerModel WorkflowApiDataProcessesTimersGet(Guid processId, string name, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<TimerModel> localVarResponse = WorkflowApiDataProcessesTimersGetWithHttpInfo(processId, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get one process instance timer 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimerModel</returns>
        public WorkflowApi.Client.Client.ApiResponse<TimerModel> WorkflowApiDataProcessesTimersGetWithHttpInfo(Guid processId, string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TimersApi->WorkflowApiDataProcessesTimersGet");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", WorkflowApi.Client.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "TimersApi.WorkflowApiDataProcessesTimersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TimerModel>("/workflow-api/data/processes/{processId}/timers/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTimersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get one process instance timer 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimerModel</returns>
        public async System.Threading.Tasks.Task<TimerModel> WorkflowApiDataProcessesTimersGetAsync(Guid processId, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<TimerModel> localVarResponse = await WorkflowApiDataProcessesTimersGetWithHttpInfoAsync(processId, name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get one process instance timer 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimerModel)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<TimerModel>> WorkflowApiDataProcessesTimersGetWithHttpInfoAsync(Guid processId, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TimersApi->WorkflowApiDataProcessesTimersGet");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", WorkflowApi.Client.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "TimersApi.WorkflowApiDataProcessesTimersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TimerModel>("/workflow-api/data/processes/{processId}/timers/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTimersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get multiple process instance timers with query 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimerModelGetCollectionResponse</returns>
        public TimerModelGetCollectionResponse WorkflowApiDataProcessesTimersGetCollection(Guid processId, string? search = default(string?), List<TimerFieldFilter>? filters = default(List<TimerFieldFilter>?), List<TimerFieldSort>? sorts = default(List<TimerFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<TimerModelGetCollectionResponse> localVarResponse = WorkflowApiDataProcessesTimersGetCollectionWithHttpInfo(processId, search, filters, sorts, skip, take);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple process instance timers with query 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimerModelGetCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<TimerModelGetCollectionResponse> WorkflowApiDataProcessesTimersGetCollectionWithHttpInfo(Guid processId, string? search = default(string?), List<TimerFieldFilter>? filters = default(List<TimerFieldFilter>?), List<TimerFieldSort>? sorts = default(List<TimerFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0)
        {
            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }
            if (sorts != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "sorts", sorts));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "take", take));
            }

            localVarRequestOptions.Operation = "TimersApi.WorkflowApiDataProcessesTimersGetCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TimerModelGetCollectionResponse>("/workflow-api/data/processes/{processId}/timers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTimersGetCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get multiple process instance timers with query 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimerModelGetCollectionResponse</returns>
        public async System.Threading.Tasks.Task<TimerModelGetCollectionResponse> WorkflowApiDataProcessesTimersGetCollectionAsync(Guid processId, string? search = default(string?), List<TimerFieldFilter>? filters = default(List<TimerFieldFilter>?), List<TimerFieldSort>? sorts = default(List<TimerFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<TimerModelGetCollectionResponse> localVarResponse = await WorkflowApiDataProcessesTimersGetCollectionWithHttpInfoAsync(processId, search, filters, sorts, skip, take, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple process instance timers with query 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="search"> (optional)</param>
        /// <param name="filters"> (optional)</param>
        /// <param name="sorts"> (optional)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimerModelGetCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<TimerModelGetCollectionResponse>> WorkflowApiDataProcessesTimersGetCollectionWithHttpInfoAsync(Guid processId, string? search = default(string?), List<TimerFieldFilter>? filters = default(List<TimerFieldFilter>?), List<TimerFieldSort>? sorts = default(List<TimerFieldSort>?), long? skip = default(long?), long? take = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "filters", filters));
            }
            if (sorts != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("multi", "sorts", sorts));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(WorkflowApi.Client.Client.ClientUtils.ParameterToMultiMap("", "take", take));
            }

            localVarRequestOptions.Operation = "TimersApi.WorkflowApiDataProcessesTimersGetCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TimerModelGetCollectionResponse>("/workflow-api/data/processes/{processId}/timers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTimersGetCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update one process instance timer 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="timerUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateResponse</returns>
        public UpdateResponse WorkflowApiDataProcessesTimersUpdate(Guid processId, string name, TimerUpdateRequest timerUpdateRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<UpdateResponse> localVarResponse = WorkflowApiDataProcessesTimersUpdateWithHttpInfo(processId, name, timerUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update one process instance timer 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="timerUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<UpdateResponse> WorkflowApiDataProcessesTimersUpdateWithHttpInfo(Guid processId, string name, TimerUpdateRequest timerUpdateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TimersApi->WorkflowApiDataProcessesTimersUpdate");
            }

            // verify the required parameter 'timerUpdateRequest' is set
            if (timerUpdateRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'timerUpdateRequest' when calling TimersApi->WorkflowApiDataProcessesTimersUpdate");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", WorkflowApi.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = timerUpdateRequest;

            localVarRequestOptions.Operation = "TimersApi.WorkflowApiDataProcessesTimersUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdateResponse>("/workflow-api/data/processes/{processId}/timers/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTimersUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update one process instance timer 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="timerUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateResponse</returns>
        public async System.Threading.Tasks.Task<UpdateResponse> WorkflowApiDataProcessesTimersUpdateAsync(Guid processId, string name, TimerUpdateRequest timerUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<UpdateResponse> localVarResponse = await WorkflowApiDataProcessesTimersUpdateWithHttpInfoAsync(processId, name, timerUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update one process instance timer 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <param name="name"></param>
        /// <param name="timerUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<UpdateResponse>> WorkflowApiDataProcessesTimersUpdateWithHttpInfoAsync(Guid processId, string name, TimerUpdateRequest timerUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TimersApi->WorkflowApiDataProcessesTimersUpdate");
            }

            // verify the required parameter 'timerUpdateRequest' is set
            if (timerUpdateRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'timerUpdateRequest' when calling TimersApi->WorkflowApiDataProcessesTimersUpdate");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("processId", WorkflowApi.Client.Client.ClientUtils.ParameterToString(processId)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", WorkflowApi.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = timerUpdateRequest;

            localVarRequestOptions.Operation = "TimersApi.WorkflowApiDataProcessesTimersUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateResponse>("/workflow-api/data/processes/{processId}/timers/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiDataProcessesTimersUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for process instance timers 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimerModelGetCollectionResponse</returns>
        public TimerModelGetCollectionResponse WorkflowApiSearchProcessesTimers(TimerFieldQuery timerFieldQuery, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<TimerModelGetCollectionResponse> localVarResponse = WorkflowApiSearchProcessesTimersWithHttpInfo(timerFieldQuery);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for process instance timers 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimerModelGetCollectionResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<TimerModelGetCollectionResponse> WorkflowApiSearchProcessesTimersWithHttpInfo(TimerFieldQuery timerFieldQuery, int operationIndex = 0)
        {
            // verify the required parameter 'timerFieldQuery' is set
            if (timerFieldQuery == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'timerFieldQuery' when calling TimersApi->WorkflowApiSearchProcessesTimers");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = timerFieldQuery;

            localVarRequestOptions.Operation = "TimersApi.WorkflowApiSearchProcessesTimers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TimerModelGetCollectionResponse>("/workflow-api/search/processes/timers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiSearchProcessesTimers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for process instance timers 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimerModelGetCollectionResponse</returns>
        public async System.Threading.Tasks.Task<TimerModelGetCollectionResponse> WorkflowApiSearchProcessesTimersAsync(TimerFieldQuery timerFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<TimerModelGetCollectionResponse> localVarResponse = await WorkflowApiSearchProcessesTimersWithHttpInfoAsync(timerFieldQuery, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for process instance timers 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerFieldQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimerModelGetCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<TimerModelGetCollectionResponse>> WorkflowApiSearchProcessesTimersWithHttpInfoAsync(TimerFieldQuery timerFieldQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'timerFieldQuery' is set
            if (timerFieldQuery == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'timerFieldQuery' when calling TimersApi->WorkflowApiSearchProcessesTimers");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = timerFieldQuery;

            localVarRequestOptions.Operation = "TimersApi.WorkflowApiSearchProcessesTimers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TimerModelGetCollectionResponse>("/workflow-api/search/processes/timers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiSearchProcessesTimers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
