/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using WorkflowApi.Client.Client;
using WorkflowApi.Client.Model;

namespace WorkflowApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcCommandsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Execute command with specified identity.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executeCommandRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExecuteCommandResponse</returns>
        ExecuteCommandResponse WorkflowApiRpcExecuteCommand(ExecuteCommandRequest executeCommandRequest, int operationIndex = 0);

        /// <summary>
        /// Execute command with specified identity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executeCommandRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExecuteCommandResponse</returns>
        ApiResponse<ExecuteCommandResponse> WorkflowApiRpcExecuteCommandWithHttpInfo(ExecuteCommandRequest executeCommandRequest, int operationIndex = 0);
        /// <summary>
        /// Get the list of commands available for current activity and identities.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAvailableCommandsResponse</returns>
        GetAvailableCommandsResponse WorkflowApiRpcGetAvailableCommands(GetAvailableCommandsRequest getAvailableCommandsRequest, int operationIndex = 0);

        /// <summary>
        /// Get the list of commands available for current activity and identities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAvailableCommandsResponse</returns>
        ApiResponse<GetAvailableCommandsResponse> WorkflowApiRpcGetAvailableCommandsWithHttpInfo(GetAvailableCommandsRequest getAvailableCommandsRequest, int operationIndex = 0);
        /// <summary>
        /// Get the list of commands available for initial activity and identities.
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getInitialCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetInitialCommandsResponse</returns>
        GetInitialCommandsResponse WorkflowApiRpcGetInitialCommands(GetInitialCommandsRequest getInitialCommandsRequest, int operationIndex = 0);

        /// <summary>
        /// Get the list of commands available for initial activity and identities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getInitialCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetInitialCommandsResponse</returns>
        ApiResponse<GetInitialCommandsResponse> WorkflowApiRpcGetInitialCommandsWithHttpInfo(GetInitialCommandsRequest getInitialCommandsRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcCommandsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Execute command with specified identity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executeCommandRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExecuteCommandResponse</returns>
        System.Threading.Tasks.Task<ExecuteCommandResponse> WorkflowApiRpcExecuteCommandAsync(ExecuteCommandRequest executeCommandRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Execute command with specified identity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executeCommandRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExecuteCommandResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExecuteCommandResponse>> WorkflowApiRpcExecuteCommandWithHttpInfoAsync(ExecuteCommandRequest executeCommandRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of commands available for current activity and identities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAvailableCommandsResponse</returns>
        System.Threading.Tasks.Task<GetAvailableCommandsResponse> WorkflowApiRpcGetAvailableCommandsAsync(GetAvailableCommandsRequest getAvailableCommandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of commands available for current activity and identities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAvailableCommandsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAvailableCommandsResponse>> WorkflowApiRpcGetAvailableCommandsWithHttpInfoAsync(GetAvailableCommandsRequest getAvailableCommandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of commands available for initial activity and identities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getInitialCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetInitialCommandsResponse</returns>
        System.Threading.Tasks.Task<GetInitialCommandsResponse> WorkflowApiRpcGetInitialCommandsAsync(GetInitialCommandsRequest getInitialCommandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of commands available for initial activity and identities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getInitialCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetInitialCommandsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInitialCommandsResponse>> WorkflowApiRpcGetInitialCommandsWithHttpInfoAsync(GetInitialCommandsRequest getInitialCommandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRpcCommandsApi : IRpcCommandsApiSync, IRpcCommandsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RpcCommandsApi : IRpcCommandsApi
    {
        private WorkflowApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcCommandsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RpcCommandsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcCommandsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RpcCommandsApi(string basePath)
        {
            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                new WorkflowApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcCommandsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RpcCommandsApi(WorkflowApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = WorkflowApi.Client.Client.Configuration.MergeConfigurations(
                WorkflowApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WorkflowApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RpcCommandsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RpcCommandsApi(WorkflowApi.Client.Client.ISynchronousClient client, WorkflowApi.Client.Client.IAsynchronousClient asyncClient, WorkflowApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = WorkflowApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public WorkflowApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public WorkflowApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public WorkflowApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WorkflowApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Execute command with specified identity. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executeCommandRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExecuteCommandResponse</returns>
        public ExecuteCommandResponse WorkflowApiRpcExecuteCommand(ExecuteCommandRequest executeCommandRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<ExecuteCommandResponse> localVarResponse = WorkflowApiRpcExecuteCommandWithHttpInfo(executeCommandRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Execute command with specified identity. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executeCommandRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExecuteCommandResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<ExecuteCommandResponse> WorkflowApiRpcExecuteCommandWithHttpInfo(ExecuteCommandRequest executeCommandRequest, int operationIndex = 0)
        {
            // verify the required parameter 'executeCommandRequest' is set
            if (executeCommandRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'executeCommandRequest' when calling RpcCommandsApi->WorkflowApiRpcExecuteCommand");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = executeCommandRequest;

            localVarRequestOptions.Operation = "RpcCommandsApi.WorkflowApiRpcExecuteCommand";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ExecuteCommandResponse>("/workflow-api/rpc/execute-command", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcExecuteCommand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute command with specified identity. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executeCommandRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExecuteCommandResponse</returns>
        public async System.Threading.Tasks.Task<ExecuteCommandResponse> WorkflowApiRpcExecuteCommandAsync(ExecuteCommandRequest executeCommandRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<ExecuteCommandResponse> localVarResponse = await WorkflowApiRpcExecuteCommandWithHttpInfoAsync(executeCommandRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Execute command with specified identity. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executeCommandRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExecuteCommandResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<ExecuteCommandResponse>> WorkflowApiRpcExecuteCommandWithHttpInfoAsync(ExecuteCommandRequest executeCommandRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'executeCommandRequest' is set
            if (executeCommandRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'executeCommandRequest' when calling RpcCommandsApi->WorkflowApiRpcExecuteCommand");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = executeCommandRequest;

            localVarRequestOptions.Operation = "RpcCommandsApi.WorkflowApiRpcExecuteCommand";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ExecuteCommandResponse>("/workflow-api/rpc/execute-command", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcExecuteCommand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of commands available for current activity and identities. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAvailableCommandsResponse</returns>
        public GetAvailableCommandsResponse WorkflowApiRpcGetAvailableCommands(GetAvailableCommandsRequest getAvailableCommandsRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GetAvailableCommandsResponse> localVarResponse = WorkflowApiRpcGetAvailableCommandsWithHttpInfo(getAvailableCommandsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of commands available for current activity and identities. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAvailableCommandsResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<GetAvailableCommandsResponse> WorkflowApiRpcGetAvailableCommandsWithHttpInfo(GetAvailableCommandsRequest getAvailableCommandsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getAvailableCommandsRequest' is set
            if (getAvailableCommandsRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getAvailableCommandsRequest' when calling RpcCommandsApi->WorkflowApiRpcGetAvailableCommands");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getAvailableCommandsRequest;

            localVarRequestOptions.Operation = "RpcCommandsApi.WorkflowApiRpcGetAvailableCommands";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetAvailableCommandsResponse>("/workflow-api/rpc/get-available-commands", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetAvailableCommands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of commands available for current activity and identities. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAvailableCommandsResponse</returns>
        public async System.Threading.Tasks.Task<GetAvailableCommandsResponse> WorkflowApiRpcGetAvailableCommandsAsync(GetAvailableCommandsRequest getAvailableCommandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GetAvailableCommandsResponse> localVarResponse = await WorkflowApiRpcGetAvailableCommandsWithHttpInfoAsync(getAvailableCommandsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of commands available for current activity and identities. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAvailableCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAvailableCommandsResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GetAvailableCommandsResponse>> WorkflowApiRpcGetAvailableCommandsWithHttpInfoAsync(GetAvailableCommandsRequest getAvailableCommandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getAvailableCommandsRequest' is set
            if (getAvailableCommandsRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getAvailableCommandsRequest' when calling RpcCommandsApi->WorkflowApiRpcGetAvailableCommands");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getAvailableCommandsRequest;

            localVarRequestOptions.Operation = "RpcCommandsApi.WorkflowApiRpcGetAvailableCommands";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetAvailableCommandsResponse>("/workflow-api/rpc/get-available-commands", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetAvailableCommands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of commands available for initial activity and identities. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getInitialCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetInitialCommandsResponse</returns>
        public GetInitialCommandsResponse WorkflowApiRpcGetInitialCommands(GetInitialCommandsRequest getInitialCommandsRequest, int operationIndex = 0)
        {
            WorkflowApi.Client.Client.ApiResponse<GetInitialCommandsResponse> localVarResponse = WorkflowApiRpcGetInitialCommandsWithHttpInfo(getInitialCommandsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of commands available for initial activity and identities. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getInitialCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetInitialCommandsResponse</returns>
        public WorkflowApi.Client.Client.ApiResponse<GetInitialCommandsResponse> WorkflowApiRpcGetInitialCommandsWithHttpInfo(GetInitialCommandsRequest getInitialCommandsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getInitialCommandsRequest' is set
            if (getInitialCommandsRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getInitialCommandsRequest' when calling RpcCommandsApi->WorkflowApiRpcGetInitialCommands");
            }

            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getInitialCommandsRequest;

            localVarRequestOptions.Operation = "RpcCommandsApi.WorkflowApiRpcGetInitialCommands";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetInitialCommandsResponse>("/workflow-api/rpc/get-initial-commands", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetInitialCommands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of commands available for initial activity and identities. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getInitialCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetInitialCommandsResponse</returns>
        public async System.Threading.Tasks.Task<GetInitialCommandsResponse> WorkflowApiRpcGetInitialCommandsAsync(GetInitialCommandsRequest getInitialCommandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WorkflowApi.Client.Client.ApiResponse<GetInitialCommandsResponse> localVarResponse = await WorkflowApiRpcGetInitialCommandsWithHttpInfoAsync(getInitialCommandsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of commands available for initial activity and identities. 
        /// </summary>
        /// <exception cref="WorkflowApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getInitialCommandsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetInitialCommandsResponse)</returns>
        public async System.Threading.Tasks.Task<WorkflowApi.Client.Client.ApiResponse<GetInitialCommandsResponse>> WorkflowApiRpcGetInitialCommandsWithHttpInfoAsync(GetInitialCommandsRequest getInitialCommandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getInitialCommandsRequest' is set
            if (getInitialCommandsRequest == null)
            {
                throw new WorkflowApi.Client.Client.ApiException(400, "Missing required parameter 'getInitialCommandsRequest' when calling RpcCommandsApi->WorkflowApiRpcGetInitialCommands");
            }


            WorkflowApi.Client.Client.RequestOptions localVarRequestOptions = new WorkflowApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WorkflowApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WorkflowApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getInitialCommandsRequest;

            localVarRequestOptions.Operation = "RpcCommandsApi.WorkflowApiRpcGetInitialCommands";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetInitialCommandsResponse>("/workflow-api/rpc/get-initial-commands", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowApiRpcGetInitialCommands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
