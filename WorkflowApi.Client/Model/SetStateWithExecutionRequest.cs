/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// SetStateWithExecutionRequest
    /// </summary>
    [DataContract(Name = "SetStateWithExecutionRequest")]
    public partial class SetStateWithExecutionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetStateWithExecutionRequest" /> class.
        /// </summary>
        /// <param name="processId">processId.</param>
        /// <param name="identityId">identityId.</param>
        /// <param name="impersonatedIdentityId">impersonatedIdentityId.</param>
        /// <param name="stateName">stateName.</param>
        /// <param name="processParameters">processParameters.</param>
        public SetStateWithExecutionRequest(Guid processId = default(Guid), string identityId = default(string), string impersonatedIdentityId = default(string), string stateName = default(string), List<ProcessParameter> processParameters = default(List<ProcessParameter>))
        {
            this.ProcessId = processId;
            this.IdentityId = identityId;
            this.ImpersonatedIdentityId = impersonatedIdentityId;
            this.StateName = stateName;
            this.ProcessParameters = processParameters;
        }

        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name = "processId", EmitDefaultValue = false)]
        public Guid ProcessId { get; set; }

        /// <summary>
        /// Gets or Sets IdentityId
        /// </summary>
        [DataMember(Name = "identityId", EmitDefaultValue = true)]
        public string IdentityId { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatedIdentityId
        /// </summary>
        [DataMember(Name = "impersonatedIdentityId", EmitDefaultValue = true)]
        public string ImpersonatedIdentityId { get; set; }

        /// <summary>
        /// Gets or Sets StateName
        /// </summary>
        [DataMember(Name = "stateName", EmitDefaultValue = true)]
        public string StateName { get; set; }

        /// <summary>
        /// Gets or Sets ProcessParameters
        /// </summary>
        [DataMember(Name = "processParameters", EmitDefaultValue = true)]
        public List<ProcessParameter> ProcessParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetStateWithExecutionRequest {\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  IdentityId: ").Append(IdentityId).Append("\n");
            sb.Append("  ImpersonatedIdentityId: ").Append(ImpersonatedIdentityId).Append("\n");
            sb.Append("  StateName: ").Append(StateName).Append("\n");
            sb.Append("  ProcessParameters: ").Append(ProcessParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
