/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// ActivityTimeout
    /// </summary>
    [DataContract(Name = "ActivityTimeout")]
    public partial class ActivityTimeout : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityTimeout" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="timer">timer.</param>
        /// <param name="nameForSet">nameForSet.</param>
        /// <param name="retryCount">retryCount.</param>
        public ActivityTimeout(string type = default(string), string timer = default(string), string nameForSet = default(string), int retryCount = default(int))
        {
            this.Type = type;
            this.Timer = timer;
            this.NameForSet = nameForSet;
            this.RetryCount = retryCount;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Timer
        /// </summary>
        [DataMember(Name = "timer", EmitDefaultValue = true)]
        public string Timer { get; set; }

        /// <summary>
        /// Gets or Sets NameForSet
        /// </summary>
        [DataMember(Name = "nameForSet", EmitDefaultValue = true)]
        public string NameForSet { get; set; }

        /// <summary>
        /// Gets or Sets RetryCount
        /// </summary>
        [DataMember(Name = "retryCount", EmitDefaultValue = false)]
        public int RetryCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivityTimeout {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Timer: ").Append(Timer).Append("\n");
            sb.Append("  NameForSet: ").Append(NameForSet).Append("\n");
            sb.Append("  RetryCount: ").Append(RetryCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
