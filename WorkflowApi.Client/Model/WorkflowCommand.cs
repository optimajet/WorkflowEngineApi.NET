/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// WorkflowCommand
    /// </summary>
    [DataContract(Name = "WorkflowCommand")]
    public partial class WorkflowCommand : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Classifier
        /// </summary>
        [DataMember(Name = "classifier", EmitDefaultValue = false)]
        public TransitionClassifier? Classifier { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowCommand" /> class.
        /// </summary>
        /// <param name="processId">processId.</param>
        /// <param name="name">name.</param>
        /// <param name="localizedName">localizedName.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="validForActivityName">validForActivityName.</param>
        /// <param name="validForStateName">validForStateName.</param>
        /// <param name="isForSubprocess">isForSubprocess.</param>
        /// <param name="classifier">classifier.</param>
        /// <param name="identities">identities.</param>
        public WorkflowCommand(Guid processId = default(Guid), string name = default(string), string localizedName = default(string), List<CommandParameter> parameters = default(List<CommandParameter>), string validForActivityName = default(string), string validForStateName = default(string), bool isForSubprocess = default(bool), TransitionClassifier? classifier = default(TransitionClassifier?), List<string> identities = default(List<string>))
        {
            this.ProcessId = processId;
            this.Name = name;
            this.LocalizedName = localizedName;
            this.Parameters = parameters;
            this.ValidForActivityName = validForActivityName;
            this.ValidForStateName = validForStateName;
            this.IsForSubprocess = isForSubprocess;
            this.Classifier = classifier;
            this.Identities = identities;
        }

        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name = "processId", EmitDefaultValue = false)]
        public Guid ProcessId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedName
        /// </summary>
        [DataMember(Name = "localizedName", EmitDefaultValue = true)]
        public string LocalizedName { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", EmitDefaultValue = true)]
        public List<CommandParameter> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets ValidForActivityName
        /// </summary>
        [DataMember(Name = "validForActivityName", EmitDefaultValue = true)]
        public string ValidForActivityName { get; set; }

        /// <summary>
        /// Gets or Sets ValidForStateName
        /// </summary>
        [DataMember(Name = "validForStateName", EmitDefaultValue = true)]
        public string ValidForStateName { get; set; }

        /// <summary>
        /// Gets or Sets IsForSubprocess
        /// </summary>
        [DataMember(Name = "isForSubprocess", EmitDefaultValue = true)]
        public bool IsForSubprocess { get; set; }

        /// <summary>
        /// Gets or Sets Identities
        /// </summary>
        [DataMember(Name = "identities", EmitDefaultValue = true)]
        public List<string> Identities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowCommand {\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LocalizedName: ").Append(LocalizedName).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  ValidForActivityName: ").Append(ValidForActivityName).Append("\n");
            sb.Append("  ValidForStateName: ").Append(ValidForStateName).Append("\n");
            sb.Append("  IsForSubprocess: ").Append(IsForSubprocess).Append("\n");
            sb.Append("  Classifier: ").Append(Classifier).Append("\n");
            sb.Append("  Identities: ").Append(Identities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
