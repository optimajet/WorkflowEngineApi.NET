/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// ProcessHistoryItem
    /// </summary>
    [DataContract(Name = "ProcessHistoryItem")]
    public partial class ProcessHistoryItem : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TransitionClassifier
        /// </summary>
        [DataMember(Name = "transitionClassifier", EmitDefaultValue = false)]
        public TransitionClassifier? TransitionClassifier { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessHistoryItem" /> class.
        /// </summary>
        /// <param name="processId">processId.</param>
        /// <param name="actorIdentityId">actorIdentityId.</param>
        /// <param name="executorName">executorName.</param>
        /// <param name="actorName">actorName.</param>
        /// <param name="executorIdentityId">executorIdentityId.</param>
        /// <param name="fromActivityName">fromActivityName.</param>
        /// <param name="fromStateName">fromStateName.</param>
        /// <param name="isFinalised">isFinalised.</param>
        /// <param name="toActivityName">toActivityName.</param>
        /// <param name="toStateName">toStateName.</param>
        /// <param name="transitionClassifier">transitionClassifier.</param>
        /// <param name="transitionTime">transitionTime.</param>
        /// <param name="triggerName">triggerName.</param>
        /// <param name="startTransitionTime">startTransitionTime.</param>
        /// <param name="transitionDuration">transitionDuration.</param>
        public ProcessHistoryItem(Guid processId = default(Guid), string actorIdentityId = default(string), string executorName = default(string), string actorName = default(string), string executorIdentityId = default(string), string fromActivityName = default(string), string fromStateName = default(string), bool isFinalised = default(bool), string toActivityName = default(string), string toStateName = default(string), TransitionClassifier? transitionClassifier = default(TransitionClassifier?), DateTimeOffset transitionTime = default(DateTimeOffset), string triggerName = default(string), DateTimeOffset? startTransitionTime = default(DateTimeOffset?), long? transitionDuration = default(long?))
        {
            this.ProcessId = processId;
            this.ActorIdentityId = actorIdentityId;
            this.ExecutorName = executorName;
            this.ActorName = actorName;
            this.ExecutorIdentityId = executorIdentityId;
            this.FromActivityName = fromActivityName;
            this.FromStateName = fromStateName;
            this.IsFinalised = isFinalised;
            this.ToActivityName = toActivityName;
            this.ToStateName = toStateName;
            this.TransitionClassifier = transitionClassifier;
            this.TransitionTime = transitionTime;
            this.TriggerName = triggerName;
            this.StartTransitionTime = startTransitionTime;
            this.TransitionDuration = transitionDuration;
        }

        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name = "processId", EmitDefaultValue = false)]
        public Guid ProcessId { get; set; }

        /// <summary>
        /// Gets or Sets ActorIdentityId
        /// </summary>
        [DataMember(Name = "actorIdentityId", EmitDefaultValue = true)]
        public string ActorIdentityId { get; set; }

        /// <summary>
        /// Gets or Sets ExecutorName
        /// </summary>
        [DataMember(Name = "executorName", EmitDefaultValue = true)]
        public string ExecutorName { get; set; }

        /// <summary>
        /// Gets or Sets ActorName
        /// </summary>
        [DataMember(Name = "actorName", EmitDefaultValue = true)]
        public string ActorName { get; set; }

        /// <summary>
        /// Gets or Sets ExecutorIdentityId
        /// </summary>
        [DataMember(Name = "executorIdentityId", EmitDefaultValue = true)]
        public string ExecutorIdentityId { get; set; }

        /// <summary>
        /// Gets or Sets FromActivityName
        /// </summary>
        [DataMember(Name = "fromActivityName", EmitDefaultValue = true)]
        public string FromActivityName { get; set; }

        /// <summary>
        /// Gets or Sets FromStateName
        /// </summary>
        [DataMember(Name = "fromStateName", EmitDefaultValue = true)]
        public string FromStateName { get; set; }

        /// <summary>
        /// Gets or Sets IsFinalised
        /// </summary>
        [DataMember(Name = "isFinalised", EmitDefaultValue = true)]
        public bool IsFinalised { get; set; }

        /// <summary>
        /// Gets or Sets ToActivityName
        /// </summary>
        [DataMember(Name = "toActivityName", EmitDefaultValue = true)]
        public string ToActivityName { get; set; }

        /// <summary>
        /// Gets or Sets ToStateName
        /// </summary>
        [DataMember(Name = "toStateName", EmitDefaultValue = true)]
        public string ToStateName { get; set; }

        /// <summary>
        /// Gets or Sets TransitionTime
        /// </summary>
        [DataMember(Name = "transitionTime", EmitDefaultValue = false)]
        public DateTimeOffset TransitionTime { get; set; }

        /// <summary>
        /// Gets or Sets TriggerName
        /// </summary>
        [DataMember(Name = "triggerName", EmitDefaultValue = true)]
        public string TriggerName { get; set; }

        /// <summary>
        /// Gets or Sets StartTransitionTime
        /// </summary>
        [DataMember(Name = "startTransitionTime", EmitDefaultValue = true)]
        public DateTimeOffset? StartTransitionTime { get; set; }

        /// <summary>
        /// Gets or Sets TransitionDuration
        /// </summary>
        [DataMember(Name = "transitionDuration", EmitDefaultValue = true)]
        public long? TransitionDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessHistoryItem {\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  ActorIdentityId: ").Append(ActorIdentityId).Append("\n");
            sb.Append("  ExecutorName: ").Append(ExecutorName).Append("\n");
            sb.Append("  ActorName: ").Append(ActorName).Append("\n");
            sb.Append("  ExecutorIdentityId: ").Append(ExecutorIdentityId).Append("\n");
            sb.Append("  FromActivityName: ").Append(FromActivityName).Append("\n");
            sb.Append("  FromStateName: ").Append(FromStateName).Append("\n");
            sb.Append("  IsFinalised: ").Append(IsFinalised).Append("\n");
            sb.Append("  ToActivityName: ").Append(ToActivityName).Append("\n");
            sb.Append("  ToStateName: ").Append(ToStateName).Append("\n");
            sb.Append("  TransitionClassifier: ").Append(TransitionClassifier).Append("\n");
            sb.Append("  TransitionTime: ").Append(TransitionTime).Append("\n");
            sb.Append("  TriggerName: ").Append(TriggerName).Append("\n");
            sb.Append("  StartTransitionTime: ").Append(StartTransitionTime).Append("\n");
            sb.Append("  TransitionDuration: ").Append(TransitionDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
