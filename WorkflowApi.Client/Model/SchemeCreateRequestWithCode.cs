/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// SchemeCreateRequestWithCode
    /// </summary>
    [DataContract(Name = "SchemeCreateRequestWithCode")]
    public partial class SchemeCreateRequestWithCode : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SchemeCreateRequestWithCode" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="scheme">scheme.</param>
        /// <param name="canBeInlined">canBeInlined.</param>
        /// <param name="inlinedSchemes">inlinedSchemes.</param>
        /// <param name="tags">tags.</param>
        public SchemeCreateRequestWithCode(string code = default(string), Scheme scheme = default(Scheme), bool canBeInlined = default(bool), List<string> inlinedSchemes = default(List<string>), List<string> tags = default(List<string>))
        {
            this.Code = code;
            this.Scheme = scheme;
            this.CanBeInlined = canBeInlined;
            this.InlinedSchemes = inlinedSchemes;
            this.Tags = tags;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Scheme
        /// </summary>
        [DataMember(Name = "scheme", EmitDefaultValue = false)]
        public Scheme Scheme { get; set; }

        /// <summary>
        /// Gets or Sets CanBeInlined
        /// </summary>
        [DataMember(Name = "canBeInlined", EmitDefaultValue = true)]
        public bool CanBeInlined { get; set; }

        /// <summary>
        /// Gets or Sets InlinedSchemes
        /// </summary>
        [DataMember(Name = "inlinedSchemes", EmitDefaultValue = true)]
        public List<string> InlinedSchemes { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SchemeCreateRequestWithCode {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Scheme: ").Append(Scheme).Append("\n");
            sb.Append("  CanBeInlined: ").Append(CanBeInlined).Append("\n");
            sb.Append("  InlinedSchemes: ").Append(InlinedSchemes).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
