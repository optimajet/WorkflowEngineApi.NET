/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// PreExecutionTransition
    /// </summary>
    [DataContract(Name = "PreExecutionTransition")]
    public partial class PreExecutionTransition : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Classifier
        /// </summary>
        [DataMember(Name = "classifier", EmitDefaultValue = false)]
        public TransitionClassifier? Classifier { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PreExecutionTransition" /> class.
        /// </summary>
        /// <param name="commandName">commandName.</param>
        /// <param name="nextActivityName">nextActivityName.</param>
        /// <param name="triggerType">triggerType.</param>
        /// <param name="classifier">classifier.</param>
        /// <param name="localizedCommandName">localizedCommandName.</param>
        public PreExecutionTransition(string commandName = default(string), string nextActivityName = default(string), string triggerType = default(string), TransitionClassifier? classifier = default(TransitionClassifier?), string localizedCommandName = default(string))
        {
            this.CommandName = commandName;
            this.NextActivityName = nextActivityName;
            this.TriggerType = triggerType;
            this.Classifier = classifier;
            this.LocalizedCommandName = localizedCommandName;
        }

        /// <summary>
        /// Gets or Sets CommandName
        /// </summary>
        [DataMember(Name = "commandName", EmitDefaultValue = true)]
        public string CommandName { get; set; }

        /// <summary>
        /// Gets or Sets NextActivityName
        /// </summary>
        [DataMember(Name = "nextActivityName", EmitDefaultValue = true)]
        public string NextActivityName { get; set; }

        /// <summary>
        /// Gets or Sets TriggerType
        /// </summary>
        [DataMember(Name = "triggerType", EmitDefaultValue = true)]
        public string TriggerType { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedCommandName
        /// </summary>
        [DataMember(Name = "localizedCommandName", EmitDefaultValue = true)]
        public string LocalizedCommandName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PreExecutionTransition {\n");
            sb.Append("  CommandName: ").Append(CommandName).Append("\n");
            sb.Append("  NextActivityName: ").Append(NextActivityName).Append("\n");
            sb.Append("  TriggerType: ").Append(TriggerType).Append("\n");
            sb.Append("  Classifier: ").Append(Classifier).Append("\n");
            sb.Append("  LocalizedCommandName: ").Append(LocalizedCommandName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
