/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// ProcessInstancesTree
    /// </summary>
    [DataContract(Name = "ProcessInstancesTree")]
    public partial class ProcessInstancesTree : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessInstancesTree" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="startingTransitionName">startingTransitionName.</param>
        /// <param name="isRoot">isRoot.</param>
        /// <param name="children">children.</param>
        public ProcessInstancesTree(Guid id = default(Guid), string name = default(string), string startingTransitionName = default(string), bool isRoot = default(bool), List<ProcessInstancesTree> children = default(List<ProcessInstancesTree>))
        {
            this.Id = id;
            this.Name = name;
            this.StartingTransitionName = startingTransitionName;
            this.IsRoot = isRoot;
            this.Children = children;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets StartingTransitionName
        /// </summary>
        [DataMember(Name = "startingTransitionName", EmitDefaultValue = true)]
        public string StartingTransitionName { get; set; }

        /// <summary>
        /// Gets or Sets IsRoot
        /// </summary>
        [DataMember(Name = "isRoot", EmitDefaultValue = true)]
        public bool IsRoot { get; set; }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name = "children", EmitDefaultValue = true)]
        public List<ProcessInstancesTree> Children { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessInstancesTree {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StartingTransitionName: ").Append(StartingTransitionName).Append("\n");
            sb.Append("  IsRoot: ").Append(IsRoot).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
