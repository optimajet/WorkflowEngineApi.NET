/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// ProcessModel
    /// </summary>
    [DataContract(Name = "ProcessModel")]
    public partial class ProcessModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="stateName">stateName.</param>
        /// <param name="activityName">activityName.</param>
        /// <param name="schemeId">schemeId.</param>
        /// <param name="previousState">previousState.</param>
        /// <param name="previousStateForDirect">previousStateForDirect.</param>
        /// <param name="previousStateForReverse">previousStateForReverse.</param>
        /// <param name="previousActivity">previousActivity.</param>
        /// <param name="previousActivityForDirect">previousActivityForDirect.</param>
        /// <param name="previousActivityForReverse">previousActivityForReverse.</param>
        /// <param name="parentProcessId">parentProcessId.</param>
        /// <param name="rootProcessId">rootProcessId.</param>
        /// <param name="isDeterminingParametersChanged">isDeterminingParametersChanged.</param>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="startingTransition">startingTransition.</param>
        /// <param name="subprocessName">subprocessName.</param>
        /// <param name="creationDate">creationDate.</param>
        /// <param name="lastTransitionDate">lastTransitionDate.</param>
        /// <param name="calendarName">calendarName.</param>
        public ProcessModel(Guid id = default(Guid), string stateName = default(string), string activityName = default(string), Guid? schemeId = default(Guid?), string previousState = default(string), string previousStateForDirect = default(string), string previousStateForReverse = default(string), string previousActivity = default(string), string previousActivityForDirect = default(string), string previousActivityForReverse = default(string), Guid? parentProcessId = default(Guid?), Guid rootProcessId = default(Guid), bool isDeterminingParametersChanged = default(bool), string tenantId = default(string), string startingTransition = default(string), string subprocessName = default(string), DateTimeOffset creationDate = default(DateTimeOffset), DateTimeOffset? lastTransitionDate = default(DateTimeOffset?), string calendarName = default(string))
        {
            this.Id = id;
            this.StateName = stateName;
            this.ActivityName = activityName;
            this.SchemeId = schemeId;
            this.PreviousState = previousState;
            this.PreviousStateForDirect = previousStateForDirect;
            this.PreviousStateForReverse = previousStateForReverse;
            this.PreviousActivity = previousActivity;
            this.PreviousActivityForDirect = previousActivityForDirect;
            this.PreviousActivityForReverse = previousActivityForReverse;
            this.ParentProcessId = parentProcessId;
            this.RootProcessId = rootProcessId;
            this.IsDeterminingParametersChanged = isDeterminingParametersChanged;
            this.TenantId = tenantId;
            this.StartingTransition = startingTransition;
            this.SubprocessName = subprocessName;
            this.CreationDate = creationDate;
            this.LastTransitionDate = lastTransitionDate;
            this.CalendarName = calendarName;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets StateName
        /// </summary>
        [DataMember(Name = "stateName", EmitDefaultValue = true)]
        public string StateName { get; set; }

        /// <summary>
        /// Gets or Sets ActivityName
        /// </summary>
        [DataMember(Name = "activityName", EmitDefaultValue = true)]
        public string ActivityName { get; set; }

        /// <summary>
        /// Gets or Sets SchemeId
        /// </summary>
        [DataMember(Name = "schemeId", EmitDefaultValue = true)]
        public Guid? SchemeId { get; set; }

        /// <summary>
        /// Gets or Sets PreviousState
        /// </summary>
        [DataMember(Name = "previousState", EmitDefaultValue = true)]
        public string PreviousState { get; set; }

        /// <summary>
        /// Gets or Sets PreviousStateForDirect
        /// </summary>
        [DataMember(Name = "previousStateForDirect", EmitDefaultValue = true)]
        public string PreviousStateForDirect { get; set; }

        /// <summary>
        /// Gets or Sets PreviousStateForReverse
        /// </summary>
        [DataMember(Name = "previousStateForReverse", EmitDefaultValue = true)]
        public string PreviousStateForReverse { get; set; }

        /// <summary>
        /// Gets or Sets PreviousActivity
        /// </summary>
        [DataMember(Name = "previousActivity", EmitDefaultValue = true)]
        public string PreviousActivity { get; set; }

        /// <summary>
        /// Gets or Sets PreviousActivityForDirect
        /// </summary>
        [DataMember(Name = "previousActivityForDirect", EmitDefaultValue = true)]
        public string PreviousActivityForDirect { get; set; }

        /// <summary>
        /// Gets or Sets PreviousActivityForReverse
        /// </summary>
        [DataMember(Name = "previousActivityForReverse", EmitDefaultValue = true)]
        public string PreviousActivityForReverse { get; set; }

        /// <summary>
        /// Gets or Sets ParentProcessId
        /// </summary>
        [DataMember(Name = "parentProcessId", EmitDefaultValue = true)]
        public Guid? ParentProcessId { get; set; }

        /// <summary>
        /// Gets or Sets RootProcessId
        /// </summary>
        [DataMember(Name = "rootProcessId", EmitDefaultValue = false)]
        public Guid RootProcessId { get; set; }

        /// <summary>
        /// Gets or Sets IsDeterminingParametersChanged
        /// </summary>
        [DataMember(Name = "isDeterminingParametersChanged", EmitDefaultValue = true)]
        public bool IsDeterminingParametersChanged { get; set; }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets StartingTransition
        /// </summary>
        [DataMember(Name = "startingTransition", EmitDefaultValue = true)]
        public string StartingTransition { get; set; }

        /// <summary>
        /// Gets or Sets SubprocessName
        /// </summary>
        [DataMember(Name = "subprocessName", EmitDefaultValue = true)]
        public string SubprocessName { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name = "creationDate", EmitDefaultValue = false)]
        public DateTimeOffset CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets LastTransitionDate
        /// </summary>
        [DataMember(Name = "lastTransitionDate", EmitDefaultValue = true)]
        public DateTimeOffset? LastTransitionDate { get; set; }

        /// <summary>
        /// Gets or Sets CalendarName
        /// </summary>
        [DataMember(Name = "calendarName", EmitDefaultValue = true)]
        public string CalendarName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StateName: ").Append(StateName).Append("\n");
            sb.Append("  ActivityName: ").Append(ActivityName).Append("\n");
            sb.Append("  SchemeId: ").Append(SchemeId).Append("\n");
            sb.Append("  PreviousState: ").Append(PreviousState).Append("\n");
            sb.Append("  PreviousStateForDirect: ").Append(PreviousStateForDirect).Append("\n");
            sb.Append("  PreviousStateForReverse: ").Append(PreviousStateForReverse).Append("\n");
            sb.Append("  PreviousActivity: ").Append(PreviousActivity).Append("\n");
            sb.Append("  PreviousActivityForDirect: ").Append(PreviousActivityForDirect).Append("\n");
            sb.Append("  PreviousActivityForReverse: ").Append(PreviousActivityForReverse).Append("\n");
            sb.Append("  ParentProcessId: ").Append(ParentProcessId).Append("\n");
            sb.Append("  RootProcessId: ").Append(RootProcessId).Append("\n");
            sb.Append("  IsDeterminingParametersChanged: ").Append(IsDeterminingParametersChanged).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  StartingTransition: ").Append(StartingTransition).Append("\n");
            sb.Append("  SubprocessName: ").Append(SubprocessName).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  LastTransitionDate: ").Append(LastTransitionDate).Append("\n");
            sb.Append("  CalendarName: ").Append(CalendarName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
