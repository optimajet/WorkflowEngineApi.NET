/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// CommandExecutionResultBulkTaskResult
    /// </summary>
    [DataContract(Name = "CommandExecutionResultBulkTaskResult")]
    public partial class CommandExecutionResultBulkTaskResult : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public BulkTaskState? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommandExecutionResultBulkTaskResult" /> class.
        /// </summary>
        /// <param name="state">state.</param>
        /// <param name="result">result.</param>
        /// <param name="exception">exception.</param>
        /// <param name="startedAt">startedAt.</param>
        /// <param name="finalizedAt">finalizedAt.</param>
        /// <param name="duration">duration.</param>
        public CommandExecutionResultBulkTaskResult(BulkTaskState? state = default(BulkTaskState?), CommandExecutionResult result = default(CommandExecutionResult), ExceptionModel exception = default(ExceptionModel), DateTimeOffset? startedAt = default(DateTimeOffset?), DateTimeOffset? finalizedAt = default(DateTimeOffset?), string duration = default(string))
        {
            this.State = state;
            this.Result = result;
            this.Exception = exception;
            this.StartedAt = startedAt;
            this.FinalizedAt = finalizedAt;
            this.Duration = duration;
        }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "result", EmitDefaultValue = false)]
        public CommandExecutionResult Result { get; set; }

        /// <summary>
        /// Gets or Sets Exception
        /// </summary>
        [DataMember(Name = "exception", EmitDefaultValue = false)]
        public ExceptionModel Exception { get; set; }

        /// <summary>
        /// Gets or Sets StartedAt
        /// </summary>
        [DataMember(Name = "startedAt", EmitDefaultValue = true)]
        public DateTimeOffset? StartedAt { get; set; }

        /// <summary>
        /// Gets or Sets FinalizedAt
        /// </summary>
        [DataMember(Name = "finalizedAt", EmitDefaultValue = true)]
        public DateTimeOffset? FinalizedAt { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = true)]
        public string Duration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommandExecutionResultBulkTaskResult {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Exception: ").Append(Exception).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  FinalizedAt: ").Append(FinalizedAt).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
