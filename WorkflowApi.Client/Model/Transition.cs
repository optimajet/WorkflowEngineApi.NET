/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// Transition
    /// </summary>
    [DataContract(Name = "Transition")]
    public partial class Transition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transition" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="designerSettings">designerSettings.</param>
        /// <param name="inlinedFinalActivityName">inlinedFinalActivityName.</param>
        /// <param name="originalName">originalName.</param>
        /// <param name="originalSchemeCode">originalSchemeCode.</param>
        /// <param name="lastTimeInlineName">lastTimeInlineName.</param>
        /// <param name="firstTimeInlineName">firstTimeInlineName.</param>
        /// <param name="userComment">userComment.</param>
        /// <param name="wasInlined">wasInlined.</param>
        /// <param name="from">from.</param>
        /// <param name="to">to.</param>
        /// <param name="classifier">classifier.</param>
        /// <param name="trigger">trigger.</param>
        /// <param name="conditions">conditions.</param>
        /// <param name="restrictions">restrictions.</param>
        /// <param name="allowConcatenationType">allowConcatenationType.</param>
        /// <param name="restrictConcatenationType">restrictConcatenationType.</param>
        /// <param name="conditionsConcatenationType">conditionsConcatenationType.</param>
        /// <param name="annotations">annotations.</param>
        /// <param name="isFork">isFork.</param>
        /// <param name="mergeViaSetState">mergeViaSetState.</param>
        /// <param name="disableParentStateControl">disableParentStateControl.</param>
        /// <param name="subprocessStartupType">subprocessStartupType.</param>
        /// <param name="subprocessInOutDefinition">subprocessInOutDefinition.</param>
        /// <param name="subprocessName">subprocessName.</param>
        /// <param name="subprocessId">subprocessId.</param>
        /// <param name="subprocessStartupParameterCopyStrategy">subprocessStartupParameterCopyStrategy.</param>
        /// <param name="subprocessFinalizeParameterMergeStrategy">subprocessFinalizeParameterMergeStrategy.</param>
        /// <param name="subprocessSpecifiedParameters">subprocessSpecifiedParameters.</param>
        /// <param name="isAlwaysTransition">isAlwaysTransition.</param>
        /// <param name="isOtherwiseTransition">isOtherwiseTransition.</param>
        /// <param name="isConditionTransition">isConditionTransition.</param>
        public Transition(string name = default(string), Designer designerSettings = default(Designer), string inlinedFinalActivityName = default(string), string originalName = default(string), string originalSchemeCode = default(string), string lastTimeInlineName = default(string), string firstTimeInlineName = default(string), string userComment = default(string), bool wasInlined = default(bool), Activity from = default(Activity), Activity to = default(Activity), string classifier = default(string), Trigger trigger = default(Trigger), List<Condition> conditions = default(List<Condition>), List<Restriction> restrictions = default(List<Restriction>), string allowConcatenationType = default(string), string restrictConcatenationType = default(string), string conditionsConcatenationType = default(string), List<Annotation> annotations = default(List<Annotation>), bool isFork = default(bool), bool mergeViaSetState = default(bool), bool disableParentStateControl = default(bool), string subprocessStartupType = default(string), string subprocessInOutDefinition = default(string), string subprocessName = default(string), string subprocessId = default(string), string subprocessStartupParameterCopyStrategy = default(string), string subprocessFinalizeParameterMergeStrategy = default(string), string subprocessSpecifiedParameters = default(string), bool isAlwaysTransition = default(bool), bool isOtherwiseTransition = default(bool), bool isConditionTransition = default(bool))
        {
            this.Name = name;
            this.DesignerSettings = designerSettings;
            this.InlinedFinalActivityName = inlinedFinalActivityName;
            this.OriginalName = originalName;
            this.OriginalSchemeCode = originalSchemeCode;
            this.LastTimeInlineName = lastTimeInlineName;
            this.FirstTimeInlineName = firstTimeInlineName;
            this.UserComment = userComment;
            this.WasInlined = wasInlined;
            this.From = from;
            this.To = to;
            this.Classifier = classifier;
            this.Trigger = trigger;
            this.Conditions = conditions;
            this.Restrictions = restrictions;
            this.AllowConcatenationType = allowConcatenationType;
            this.RestrictConcatenationType = restrictConcatenationType;
            this.ConditionsConcatenationType = conditionsConcatenationType;
            this.Annotations = annotations;
            this.IsFork = isFork;
            this.MergeViaSetState = mergeViaSetState;
            this.DisableParentStateControl = disableParentStateControl;
            this.SubprocessStartupType = subprocessStartupType;
            this.SubprocessInOutDefinition = subprocessInOutDefinition;
            this.SubprocessName = subprocessName;
            this.SubprocessId = subprocessId;
            this.SubprocessStartupParameterCopyStrategy = subprocessStartupParameterCopyStrategy;
            this.SubprocessFinalizeParameterMergeStrategy = subprocessFinalizeParameterMergeStrategy;
            this.SubprocessSpecifiedParameters = subprocessSpecifiedParameters;
            this.IsAlwaysTransition = isAlwaysTransition;
            this.IsOtherwiseTransition = isOtherwiseTransition;
            this.IsConditionTransition = isConditionTransition;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DesignerSettings
        /// </summary>
        [DataMember(Name = "designerSettings", EmitDefaultValue = false)]
        public Designer DesignerSettings { get; set; }

        /// <summary>
        /// Gets or Sets InlinedFinalActivityName
        /// </summary>
        [DataMember(Name = "inlinedFinalActivityName", EmitDefaultValue = true)]
        public string InlinedFinalActivityName { get; set; }

        /// <summary>
        /// Gets or Sets OriginalName
        /// </summary>
        [DataMember(Name = "originalName", EmitDefaultValue = true)]
        public string OriginalName { get; set; }

        /// <summary>
        /// Gets or Sets OriginalSchemeCode
        /// </summary>
        [DataMember(Name = "originalSchemeCode", EmitDefaultValue = true)]
        public string OriginalSchemeCode { get; set; }

        /// <summary>
        /// Gets or Sets LastTimeInlineName
        /// </summary>
        [DataMember(Name = "lastTimeInlineName", EmitDefaultValue = true)]
        public string LastTimeInlineName { get; set; }

        /// <summary>
        /// Gets or Sets FirstTimeInlineName
        /// </summary>
        [DataMember(Name = "firstTimeInlineName", EmitDefaultValue = true)]
        public string FirstTimeInlineName { get; set; }

        /// <summary>
        /// Gets or Sets UserComment
        /// </summary>
        [DataMember(Name = "userComment", EmitDefaultValue = true)]
        public string UserComment { get; set; }

        /// <summary>
        /// Gets or Sets WasInlined
        /// </summary>
        [DataMember(Name = "wasInlined", EmitDefaultValue = true)]
        public bool WasInlined { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public Activity From { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public Activity To { get; set; }

        /// <summary>
        /// Gets or Sets Classifier
        /// </summary>
        [DataMember(Name = "classifier", EmitDefaultValue = true)]
        public string Classifier { get; set; }

        /// <summary>
        /// Gets or Sets Trigger
        /// </summary>
        [DataMember(Name = "trigger", EmitDefaultValue = false)]
        public Trigger Trigger { get; set; }

        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        [DataMember(Name = "conditions", EmitDefaultValue = true)]
        public List<Condition> Conditions { get; set; }

        /// <summary>
        /// Gets or Sets Restrictions
        /// </summary>
        [DataMember(Name = "restrictions", EmitDefaultValue = true)]
        public List<Restriction> Restrictions { get; set; }

        /// <summary>
        /// Gets or Sets AllowConcatenationType
        /// </summary>
        [DataMember(Name = "allowConcatenationType", EmitDefaultValue = true)]
        public string AllowConcatenationType { get; set; }

        /// <summary>
        /// Gets or Sets RestrictConcatenationType
        /// </summary>
        [DataMember(Name = "restrictConcatenationType", EmitDefaultValue = true)]
        public string RestrictConcatenationType { get; set; }

        /// <summary>
        /// Gets or Sets ConditionsConcatenationType
        /// </summary>
        [DataMember(Name = "conditionsConcatenationType", EmitDefaultValue = true)]
        public string ConditionsConcatenationType { get; set; }

        /// <summary>
        /// Gets or Sets Annotations
        /// </summary>
        [DataMember(Name = "annotations", EmitDefaultValue = true)]
        public List<Annotation> Annotations { get; set; }

        /// <summary>
        /// Gets or Sets IsFork
        /// </summary>
        [DataMember(Name = "isFork", EmitDefaultValue = true)]
        public bool IsFork { get; set; }

        /// <summary>
        /// Gets or Sets MergeViaSetState
        /// </summary>
        [DataMember(Name = "mergeViaSetState", EmitDefaultValue = true)]
        public bool MergeViaSetState { get; set; }

        /// <summary>
        /// Gets or Sets DisableParentStateControl
        /// </summary>
        [DataMember(Name = "disableParentStateControl", EmitDefaultValue = true)]
        public bool DisableParentStateControl { get; set; }

        /// <summary>
        /// Gets or Sets SubprocessStartupType
        /// </summary>
        [DataMember(Name = "subprocessStartupType", EmitDefaultValue = true)]
        public string SubprocessStartupType { get; set; }

        /// <summary>
        /// Gets or Sets SubprocessInOutDefinition
        /// </summary>
        [DataMember(Name = "subprocessInOutDefinition", EmitDefaultValue = true)]
        public string SubprocessInOutDefinition { get; set; }

        /// <summary>
        /// Gets or Sets SubprocessName
        /// </summary>
        [DataMember(Name = "subprocessName", EmitDefaultValue = true)]
        public string SubprocessName { get; set; }

        /// <summary>
        /// Gets or Sets SubprocessId
        /// </summary>
        [DataMember(Name = "subprocessId", EmitDefaultValue = true)]
        public string SubprocessId { get; set; }

        /// <summary>
        /// Gets or Sets SubprocessStartupParameterCopyStrategy
        /// </summary>
        [DataMember(Name = "subprocessStartupParameterCopyStrategy", EmitDefaultValue = true)]
        public string SubprocessStartupParameterCopyStrategy { get; set; }

        /// <summary>
        /// Gets or Sets SubprocessFinalizeParameterMergeStrategy
        /// </summary>
        [DataMember(Name = "subprocessFinalizeParameterMergeStrategy", EmitDefaultValue = true)]
        public string SubprocessFinalizeParameterMergeStrategy { get; set; }

        /// <summary>
        /// Gets or Sets SubprocessSpecifiedParameters
        /// </summary>
        [DataMember(Name = "subprocessSpecifiedParameters", EmitDefaultValue = true)]
        public string SubprocessSpecifiedParameters { get; set; }

        /// <summary>
        /// Gets or Sets IsAlwaysTransition
        /// </summary>
        [DataMember(Name = "isAlwaysTransition", EmitDefaultValue = true)]
        public bool IsAlwaysTransition { get; set; }

        /// <summary>
        /// Gets or Sets IsOtherwiseTransition
        /// </summary>
        [DataMember(Name = "isOtherwiseTransition", EmitDefaultValue = true)]
        public bool IsOtherwiseTransition { get; set; }

        /// <summary>
        /// Gets or Sets IsConditionTransition
        /// </summary>
        [DataMember(Name = "isConditionTransition", EmitDefaultValue = true)]
        public bool IsConditionTransition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Transition {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DesignerSettings: ").Append(DesignerSettings).Append("\n");
            sb.Append("  InlinedFinalActivityName: ").Append(InlinedFinalActivityName).Append("\n");
            sb.Append("  OriginalName: ").Append(OriginalName).Append("\n");
            sb.Append("  OriginalSchemeCode: ").Append(OriginalSchemeCode).Append("\n");
            sb.Append("  LastTimeInlineName: ").Append(LastTimeInlineName).Append("\n");
            sb.Append("  FirstTimeInlineName: ").Append(FirstTimeInlineName).Append("\n");
            sb.Append("  UserComment: ").Append(UserComment).Append("\n");
            sb.Append("  WasInlined: ").Append(WasInlined).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Classifier: ").Append(Classifier).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("  AllowConcatenationType: ").Append(AllowConcatenationType).Append("\n");
            sb.Append("  RestrictConcatenationType: ").Append(RestrictConcatenationType).Append("\n");
            sb.Append("  ConditionsConcatenationType: ").Append(ConditionsConcatenationType).Append("\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("  IsFork: ").Append(IsFork).Append("\n");
            sb.Append("  MergeViaSetState: ").Append(MergeViaSetState).Append("\n");
            sb.Append("  DisableParentStateControl: ").Append(DisableParentStateControl).Append("\n");
            sb.Append("  SubprocessStartupType: ").Append(SubprocessStartupType).Append("\n");
            sb.Append("  SubprocessInOutDefinition: ").Append(SubprocessInOutDefinition).Append("\n");
            sb.Append("  SubprocessName: ").Append(SubprocessName).Append("\n");
            sb.Append("  SubprocessId: ").Append(SubprocessId).Append("\n");
            sb.Append("  SubprocessStartupParameterCopyStrategy: ").Append(SubprocessStartupParameterCopyStrategy).Append("\n");
            sb.Append("  SubprocessFinalizeParameterMergeStrategy: ").Append(SubprocessFinalizeParameterMergeStrategy).Append("\n");
            sb.Append("  SubprocessSpecifiedParameters: ").Append(SubprocessSpecifiedParameters).Append("\n");
            sb.Append("  IsAlwaysTransition: ").Append(IsAlwaysTransition).Append("\n");
            sb.Append("  IsOtherwiseTransition: ").Append(IsOtherwiseTransition).Append("\n");
            sb.Append("  IsConditionTransition: ").Append(IsConditionTransition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
