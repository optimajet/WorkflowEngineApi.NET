/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// ApprovalModel
    /// </summary>
    [DataContract(Name = "ApprovalModel")]
    public partial class ApprovalModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="processId">processId.</param>
        /// <param name="identityId">identityId.</param>
        /// <param name="allowedTo">allowedTo.</param>
        /// <param name="transitionTime">transitionTime.</param>
        /// <param name="sort">sort.</param>
        /// <param name="initialState">initialState.</param>
        /// <param name="destinationState">destinationState.</param>
        /// <param name="triggerName">triggerName.</param>
        /// <param name="commentary">commentary.</param>
        public ApprovalModel(Guid id = default(Guid), Guid processId = default(Guid), string identityId = default(string), List<string> allowedTo = default(List<string>), DateTimeOffset? transitionTime = default(DateTimeOffset?), long sort = default(long), string initialState = default(string), string destinationState = default(string), string triggerName = default(string), string commentary = default(string))
        {
            this.Id = id;
            this.ProcessId = processId;
            this.IdentityId = identityId;
            this.AllowedTo = allowedTo;
            this.TransitionTime = transitionTime;
            this.Sort = sort;
            this.InitialState = initialState;
            this.DestinationState = destinationState;
            this.TriggerName = triggerName;
            this.Commentary = commentary;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name = "processId", EmitDefaultValue = false)]
        public Guid ProcessId { get; set; }

        /// <summary>
        /// Gets or Sets IdentityId
        /// </summary>
        [DataMember(Name = "identityId", EmitDefaultValue = true)]
        public string IdentityId { get; set; }

        /// <summary>
        /// Gets or Sets AllowedTo
        /// </summary>
        [DataMember(Name = "allowedTo", EmitDefaultValue = true)]
        public List<string> AllowedTo { get; set; }

        /// <summary>
        /// Gets or Sets TransitionTime
        /// </summary>
        [DataMember(Name = "transitionTime", EmitDefaultValue = true)]
        public DateTimeOffset? TransitionTime { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public long Sort { get; set; }

        /// <summary>
        /// Gets or Sets InitialState
        /// </summary>
        [DataMember(Name = "initialState", EmitDefaultValue = true)]
        public string InitialState { get; set; }

        /// <summary>
        /// Gets or Sets DestinationState
        /// </summary>
        [DataMember(Name = "destinationState", EmitDefaultValue = true)]
        public string DestinationState { get; set; }

        /// <summary>
        /// Gets or Sets TriggerName
        /// </summary>
        [DataMember(Name = "triggerName", EmitDefaultValue = true)]
        public string TriggerName { get; set; }

        /// <summary>
        /// Gets or Sets Commentary
        /// </summary>
        [DataMember(Name = "commentary", EmitDefaultValue = true)]
        public string Commentary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApprovalModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  IdentityId: ").Append(IdentityId).Append("\n");
            sb.Append("  AllowedTo: ").Append(AllowedTo).Append("\n");
            sb.Append("  TransitionTime: ").Append(TransitionTime).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  InitialState: ").Append(InitialState).Append("\n");
            sb.Append("  DestinationState: ").Append(DestinationState).Append("\n");
            sb.Append("  TriggerName: ").Append(TriggerName).Append("\n");
            sb.Append("  Commentary: ").Append(Commentary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
