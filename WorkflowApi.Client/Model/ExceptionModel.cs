/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// ExceptionModel
    /// </summary>
    [DataContract(Name = "ExceptionModel")]
    public partial class ExceptionModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExceptionModel" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="message">message.</param>
        /// <param name="data">data.</param>
        /// <param name="stackTrace">stackTrace.</param>
        /// <param name="source">source.</param>
        /// <param name="helpLink">helpLink.</param>
        /// <param name="hResult">hResult.</param>
        /// <param name="innerException">innerException.</param>
        public ExceptionModel(string type = default(string), string message = default(string), Dictionary<string, Object> data = default(Dictionary<string, Object>), string stackTrace = default(string), string source = default(string), string helpLink = default(string), int hResult = default(int), ExceptionModel innerException = default(ExceptionModel))
        {
            this.Type = type;
            this.Message = message;
            this.Data = data;
            this.StackTrace = stackTrace;
            this.Source = source;
            this.HelpLink = helpLink;
            this.HResult = hResult;
            this.InnerException = innerException;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = true)]
        public Dictionary<string, Object> Data { get; set; }

        /// <summary>
        /// Gets or Sets StackTrace
        /// </summary>
        [DataMember(Name = "stackTrace", EmitDefaultValue = true)]
        public string StackTrace { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = true)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets HelpLink
        /// </summary>
        [DataMember(Name = "helpLink", EmitDefaultValue = true)]
        public string HelpLink { get; set; }

        /// <summary>
        /// Gets or Sets HResult
        /// </summary>
        [DataMember(Name = "hResult", EmitDefaultValue = false)]
        public int HResult { get; set; }

        /// <summary>
        /// Gets or Sets InnerException
        /// </summary>
        [DataMember(Name = "innerException", EmitDefaultValue = false)]
        public ExceptionModel InnerException { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExceptionModel {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  StackTrace: ").Append(StackTrace).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  HelpLink: ").Append(HelpLink).Append("\n");
            sb.Append("  HResult: ").Append(HResult).Append("\n");
            sb.Append("  InnerException: ").Append(InnerException).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
