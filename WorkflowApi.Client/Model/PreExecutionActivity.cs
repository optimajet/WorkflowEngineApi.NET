/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// PreExecutionActivity
    /// </summary>
    [DataContract(Name = "PreExecutionActivity")]
    public partial class PreExecutionActivity : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreExecutionActivity" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="state">state.</param>
        /// <param name="isCurrent">isCurrent.</param>
        /// <param name="isFinal">isFinal.</param>
        /// <param name="isInitial">isInitial.</param>
        /// <param name="subprocessLevel">subprocessLevel.</param>
        /// <param name="localizedState">localizedState.</param>
        /// <param name="transitions">transitions.</param>
        public PreExecutionActivity(string name = default(string), string state = default(string), bool isCurrent = default(bool), bool isFinal = default(bool), bool isInitial = default(bool), int? subprocessLevel = default(int?), string localizedState = default(string), List<PreExecutionTransition> transitions = default(List<PreExecutionTransition>))
        {
            this.Name = name;
            this.State = state;
            this.IsCurrent = isCurrent;
            this.IsFinal = isFinal;
            this.IsInitial = isInitial;
            this.SubprocessLevel = subprocessLevel;
            this.LocalizedState = localizedState;
            this.Transitions = transitions;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets IsCurrent
        /// </summary>
        [DataMember(Name = "isCurrent", EmitDefaultValue = true)]
        public bool IsCurrent { get; set; }

        /// <summary>
        /// Gets or Sets IsFinal
        /// </summary>
        [DataMember(Name = "isFinal", EmitDefaultValue = true)]
        public bool IsFinal { get; set; }

        /// <summary>
        /// Gets or Sets IsInitial
        /// </summary>
        [DataMember(Name = "isInitial", EmitDefaultValue = true)]
        public bool IsInitial { get; set; }

        /// <summary>
        /// Gets or Sets SubprocessLevel
        /// </summary>
        [DataMember(Name = "subprocessLevel", EmitDefaultValue = true)]
        public int? SubprocessLevel { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedState
        /// </summary>
        [DataMember(Name = "localizedState", EmitDefaultValue = true)]
        public string LocalizedState { get; set; }

        /// <summary>
        /// Gets or Sets Transitions
        /// </summary>
        [DataMember(Name = "transitions", EmitDefaultValue = true)]
        public List<PreExecutionTransition> Transitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PreExecutionActivity {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  IsCurrent: ").Append(IsCurrent).Append("\n");
            sb.Append("  IsFinal: ").Append(IsFinal).Append("\n");
            sb.Append("  IsInitial: ").Append(IsInitial).Append("\n");
            sb.Append("  SubprocessLevel: ").Append(SubprocessLevel).Append("\n");
            sb.Append("  LocalizedState: ").Append(LocalizedState).Append("\n");
            sb.Append("  Transitions: ").Append(Transitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
