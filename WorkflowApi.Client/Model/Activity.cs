/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// Activity
    /// </summary>
    [DataContract(Name = "Activity")]
    public partial class Activity : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="designerSettings">designerSettings.</param>
        /// <param name="originalName">originalName.</param>
        /// <param name="originalSchemeCode">originalSchemeCode.</param>
        /// <param name="lastTimeInlineName">lastTimeInlineName.</param>
        /// <param name="firstTimeInlineName">firstTimeInlineName.</param>
        /// <param name="wasInlined">wasInlined.</param>
        /// <param name="activityType">activityType.</param>
        /// <param name="schemeCode">schemeCode.</param>
        /// <param name="state">state.</param>
        /// <param name="isInitial">isInitial.</param>
        /// <param name="isFinal">isFinal.</param>
        /// <param name="isForSetState">isForSetState.</param>
        /// <param name="isAutoSchemeUpdate">isAutoSchemeUpdate.</param>
        /// <param name="inlinedSchemeCode">inlinedSchemeCode.</param>
        /// <param name="disablePersistState">disablePersistState.</param>
        /// <param name="disablePersistTransitionHistory">disablePersistTransitionHistory.</param>
        /// <param name="disablePersistParameters">disablePersistParameters.</param>
        /// <param name="userComment">userComment.</param>
        /// <param name="haveImplementation">haveImplementation.</param>
        /// <param name="havePreExecutionImplementation">havePreExecutionImplementation.</param>
        /// <param name="implementation">implementation.</param>
        /// <param name="preExecutionImplementation">preExecutionImplementation.</param>
        /// <param name="annotations">annotations.</param>
        /// <param name="executionTimeout">executionTimeout.</param>
        /// <param name="idleTimeout">idleTimeout.</param>
        /// <param name="exceptionsHandlers">exceptionsHandlers.</param>
        /// <param name="isState">isState.</param>
        /// <param name="nestingLevel">nestingLevel.</param>
        public Activity(string name = default(string), Designer designerSettings = default(Designer), string originalName = default(string), string originalSchemeCode = default(string), string lastTimeInlineName = default(string), string firstTimeInlineName = default(string), bool wasInlined = default(bool), string activityType = default(string), string schemeCode = default(string), string state = default(string), bool isInitial = default(bool), bool isFinal = default(bool), bool isForSetState = default(bool), bool isAutoSchemeUpdate = default(bool), string inlinedSchemeCode = default(string), bool disablePersistState = default(bool), bool disablePersistTransitionHistory = default(bool), bool disablePersistParameters = default(bool), string userComment = default(string), bool haveImplementation = default(bool), bool havePreExecutionImplementation = default(bool), List<ActionReference> implementation = default(List<ActionReference>), List<ActionReference> preExecutionImplementation = default(List<ActionReference>), List<Annotation> annotations = default(List<Annotation>), ActivityTimeout executionTimeout = default(ActivityTimeout), ActivityTimeout idleTimeout = default(ActivityTimeout), List<ExceptionsHandler> exceptionsHandlers = default(List<ExceptionsHandler>), bool isState = default(bool), int? nestingLevel = default(int?))
        {
            this.Name = name;
            this.DesignerSettings = designerSettings;
            this.OriginalName = originalName;
            this.OriginalSchemeCode = originalSchemeCode;
            this.LastTimeInlineName = lastTimeInlineName;
            this.FirstTimeInlineName = firstTimeInlineName;
            this.WasInlined = wasInlined;
            this.ActivityType = activityType;
            this.SchemeCode = schemeCode;
            this.State = state;
            this.IsInitial = isInitial;
            this.IsFinal = isFinal;
            this.IsForSetState = isForSetState;
            this.IsAutoSchemeUpdate = isAutoSchemeUpdate;
            this.InlinedSchemeCode = inlinedSchemeCode;
            this.DisablePersistState = disablePersistState;
            this.DisablePersistTransitionHistory = disablePersistTransitionHistory;
            this.DisablePersistParameters = disablePersistParameters;
            this.UserComment = userComment;
            this.HaveImplementation = haveImplementation;
            this.HavePreExecutionImplementation = havePreExecutionImplementation;
            this.Implementation = implementation;
            this.PreExecutionImplementation = preExecutionImplementation;
            this.Annotations = annotations;
            this.ExecutionTimeout = executionTimeout;
            this.IdleTimeout = idleTimeout;
            this.ExceptionsHandlers = exceptionsHandlers;
            this.IsState = isState;
            this.NestingLevel = nestingLevel;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DesignerSettings
        /// </summary>
        [DataMember(Name = "designerSettings", EmitDefaultValue = false)]
        public Designer DesignerSettings { get; set; }

        /// <summary>
        /// Gets or Sets OriginalName
        /// </summary>
        [DataMember(Name = "originalName", EmitDefaultValue = true)]
        public string OriginalName { get; set; }

        /// <summary>
        /// Gets or Sets OriginalSchemeCode
        /// </summary>
        [DataMember(Name = "originalSchemeCode", EmitDefaultValue = true)]
        public string OriginalSchemeCode { get; set; }

        /// <summary>
        /// Gets or Sets LastTimeInlineName
        /// </summary>
        [DataMember(Name = "lastTimeInlineName", EmitDefaultValue = true)]
        public string LastTimeInlineName { get; set; }

        /// <summary>
        /// Gets or Sets FirstTimeInlineName
        /// </summary>
        [DataMember(Name = "firstTimeInlineName", EmitDefaultValue = true)]
        public string FirstTimeInlineName { get; set; }

        /// <summary>
        /// Gets or Sets WasInlined
        /// </summary>
        [DataMember(Name = "wasInlined", EmitDefaultValue = true)]
        public bool WasInlined { get; set; }

        /// <summary>
        /// Gets or Sets ActivityType
        /// </summary>
        [DataMember(Name = "activityType", EmitDefaultValue = true)]
        public string ActivityType { get; set; }

        /// <summary>
        /// Gets or Sets SchemeCode
        /// </summary>
        [DataMember(Name = "schemeCode", EmitDefaultValue = true)]
        public string SchemeCode { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets IsInitial
        /// </summary>
        [DataMember(Name = "isInitial", EmitDefaultValue = true)]
        public bool IsInitial { get; set; }

        /// <summary>
        /// Gets or Sets IsFinal
        /// </summary>
        [DataMember(Name = "isFinal", EmitDefaultValue = true)]
        public bool IsFinal { get; set; }

        /// <summary>
        /// Gets or Sets IsForSetState
        /// </summary>
        [DataMember(Name = "isForSetState", EmitDefaultValue = true)]
        public bool IsForSetState { get; set; }

        /// <summary>
        /// Gets or Sets IsAutoSchemeUpdate
        /// </summary>
        [DataMember(Name = "isAutoSchemeUpdate", EmitDefaultValue = true)]
        public bool IsAutoSchemeUpdate { get; set; }

        /// <summary>
        /// Gets or Sets InlinedSchemeCode
        /// </summary>
        [DataMember(Name = "inlinedSchemeCode", EmitDefaultValue = true)]
        public string InlinedSchemeCode { get; set; }

        /// <summary>
        /// Gets or Sets DisablePersistState
        /// </summary>
        [DataMember(Name = "disablePersistState", EmitDefaultValue = true)]
        public bool DisablePersistState { get; set; }

        /// <summary>
        /// Gets or Sets DisablePersistTransitionHistory
        /// </summary>
        [DataMember(Name = "disablePersistTransitionHistory", EmitDefaultValue = true)]
        public bool DisablePersistTransitionHistory { get; set; }

        /// <summary>
        /// Gets or Sets DisablePersistParameters
        /// </summary>
        [DataMember(Name = "disablePersistParameters", EmitDefaultValue = true)]
        public bool DisablePersistParameters { get; set; }

        /// <summary>
        /// Gets or Sets UserComment
        /// </summary>
        [DataMember(Name = "userComment", EmitDefaultValue = true)]
        public string UserComment { get; set; }

        /// <summary>
        /// Gets or Sets HaveImplementation
        /// </summary>
        [DataMember(Name = "haveImplementation", EmitDefaultValue = true)]
        public bool HaveImplementation { get; set; }

        /// <summary>
        /// Gets or Sets HavePreExecutionImplementation
        /// </summary>
        [DataMember(Name = "havePreExecutionImplementation", EmitDefaultValue = true)]
        public bool HavePreExecutionImplementation { get; set; }

        /// <summary>
        /// Gets or Sets Implementation
        /// </summary>
        [DataMember(Name = "implementation", EmitDefaultValue = true)]
        public List<ActionReference> Implementation { get; set; }

        /// <summary>
        /// Gets or Sets PreExecutionImplementation
        /// </summary>
        [DataMember(Name = "preExecutionImplementation", EmitDefaultValue = true)]
        public List<ActionReference> PreExecutionImplementation { get; set; }

        /// <summary>
        /// Gets or Sets Annotations
        /// </summary>
        [DataMember(Name = "annotations", EmitDefaultValue = true)]
        public List<Annotation> Annotations { get; set; }

        /// <summary>
        /// Gets or Sets ExecutionTimeout
        /// </summary>
        [DataMember(Name = "executionTimeout", EmitDefaultValue = false)]
        public ActivityTimeout ExecutionTimeout { get; set; }

        /// <summary>
        /// Gets or Sets IdleTimeout
        /// </summary>
        [DataMember(Name = "idleTimeout", EmitDefaultValue = false)]
        public ActivityTimeout IdleTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ExceptionsHandlers
        /// </summary>
        [DataMember(Name = "exceptionsHandlers", EmitDefaultValue = true)]
        public List<ExceptionsHandler> ExceptionsHandlers { get; set; }

        /// <summary>
        /// Gets or Sets IsState
        /// </summary>
        [DataMember(Name = "isState", EmitDefaultValue = true)]
        public bool IsState { get; set; }

        /// <summary>
        /// Gets or Sets NestingLevel
        /// </summary>
        [DataMember(Name = "nestingLevel", EmitDefaultValue = true)]
        public int? NestingLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Activity {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DesignerSettings: ").Append(DesignerSettings).Append("\n");
            sb.Append("  OriginalName: ").Append(OriginalName).Append("\n");
            sb.Append("  OriginalSchemeCode: ").Append(OriginalSchemeCode).Append("\n");
            sb.Append("  LastTimeInlineName: ").Append(LastTimeInlineName).Append("\n");
            sb.Append("  FirstTimeInlineName: ").Append(FirstTimeInlineName).Append("\n");
            sb.Append("  WasInlined: ").Append(WasInlined).Append("\n");
            sb.Append("  ActivityType: ").Append(ActivityType).Append("\n");
            sb.Append("  SchemeCode: ").Append(SchemeCode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  IsInitial: ").Append(IsInitial).Append("\n");
            sb.Append("  IsFinal: ").Append(IsFinal).Append("\n");
            sb.Append("  IsForSetState: ").Append(IsForSetState).Append("\n");
            sb.Append("  IsAutoSchemeUpdate: ").Append(IsAutoSchemeUpdate).Append("\n");
            sb.Append("  InlinedSchemeCode: ").Append(InlinedSchemeCode).Append("\n");
            sb.Append("  DisablePersistState: ").Append(DisablePersistState).Append("\n");
            sb.Append("  DisablePersistTransitionHistory: ").Append(DisablePersistTransitionHistory).Append("\n");
            sb.Append("  DisablePersistParameters: ").Append(DisablePersistParameters).Append("\n");
            sb.Append("  UserComment: ").Append(UserComment).Append("\n");
            sb.Append("  HaveImplementation: ").Append(HaveImplementation).Append("\n");
            sb.Append("  HavePreExecutionImplementation: ").Append(HavePreExecutionImplementation).Append("\n");
            sb.Append("  Implementation: ").Append(Implementation).Append("\n");
            sb.Append("  PreExecutionImplementation: ").Append(PreExecutionImplementation).Append("\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("  ExecutionTimeout: ").Append(ExecutionTimeout).Append("\n");
            sb.Append("  IdleTimeout: ").Append(IdleTimeout).Append("\n");
            sb.Append("  ExceptionsHandlers: ").Append(ExceptionsHandlers).Append("\n");
            sb.Append("  IsState: ").Append(IsState).Append("\n");
            sb.Append("  NestingLevel: ").Append(NestingLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
