/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// Scheme
    /// </summary>
    [DataContract(Name = "Scheme")]
    public partial class Scheme : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Scheme" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="designerSettings">designerSettings.</param>
        /// <param name="actors">actors.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="commands">commands.</param>
        /// <param name="timers">timers.</param>
        /// <param name="comments">comments.</param>
        /// <param name="activities">activities.</param>
        /// <param name="transitions">transitions.</param>
        /// <param name="localization">localization.</param>
        /// <param name="codeActions">codeActions.</param>
        /// <param name="codeActionsCommonUsings">codeActionsCommonUsings.</param>
        /// <param name="additionalParams">additionalParams.</param>
        /// <param name="canBeInlined">canBeInlined.</param>
        /// <param name="logEnabled">logEnabled.</param>
        /// <param name="inlinedSchemes">inlinedSchemes.</param>
        /// <param name="tags">tags.</param>
        /// <param name="definingParametersString">definingParametersString.</param>
        /// <param name="rootSchemeCode">rootSchemeCode.</param>
        /// <param name="rootSchemeId">rootSchemeId.</param>
        /// <param name="isObsolete">isObsolete.</param>
        /// <param name="id">id.</param>
        /// <param name="allowedActivities">allowedActivities.</param>
        /// <param name="calendarName">calendarName.</param>
        public Scheme(string name = default(string), Designer designerSettings = default(Designer), List<Actor> actors = default(List<Actor>), List<Parameter> parameters = default(List<Parameter>), List<Command> commands = default(List<Command>), List<Timer> timers = default(List<Timer>), List<Comment> comments = default(List<Comment>), List<Activity> activities = default(List<Activity>), List<Transition> transitions = default(List<Transition>), List<Translation> localization = default(List<Translation>), List<CodeAction> codeActions = default(List<CodeAction>), string codeActionsCommonUsings = default(string), Dictionary<string, Object> additionalParams = default(Dictionary<string, Object>), bool canBeInlined = default(bool), bool logEnabled = default(bool), List<string> inlinedSchemes = default(List<string>), List<string> tags = default(List<string>), string definingParametersString = default(string), string rootSchemeCode = default(string), Guid? rootSchemeId = default(Guid?), bool isObsolete = default(bool), Guid id = default(Guid), List<string> allowedActivities = default(List<string>), string calendarName = default(string))
        {
            this.Name = name;
            this.DesignerSettings = designerSettings;
            this.Actors = actors;
            this.Parameters = parameters;
            this.Commands = commands;
            this.Timers = timers;
            this.Comments = comments;
            this.Activities = activities;
            this.Transitions = transitions;
            this.Localization = localization;
            this.CodeActions = codeActions;
            this.CodeActionsCommonUsings = codeActionsCommonUsings;
            this.AdditionalParams = additionalParams;
            this.CanBeInlined = canBeInlined;
            this.LogEnabled = logEnabled;
            this.InlinedSchemes = inlinedSchemes;
            this.Tags = tags;
            this.DefiningParametersString = definingParametersString;
            this.RootSchemeCode = rootSchemeCode;
            this.RootSchemeId = rootSchemeId;
            this.IsObsolete = isObsolete;
            this.Id = id;
            this.AllowedActivities = allowedActivities;
            this.CalendarName = calendarName;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DesignerSettings
        /// </summary>
        [DataMember(Name = "designerSettings", EmitDefaultValue = false)]
        public Designer DesignerSettings { get; set; }

        /// <summary>
        /// Gets or Sets Actors
        /// </summary>
        [DataMember(Name = "actors", EmitDefaultValue = true)]
        public List<Actor> Actors { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", EmitDefaultValue = true)]
        public List<Parameter> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets Commands
        /// </summary>
        [DataMember(Name = "commands", EmitDefaultValue = true)]
        public List<Command> Commands { get; set; }

        /// <summary>
        /// Gets or Sets Timers
        /// </summary>
        [DataMember(Name = "timers", EmitDefaultValue = true)]
        public List<Timer> Timers { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name = "comments", EmitDefaultValue = true)]
        public List<Comment> Comments { get; set; }

        /// <summary>
        /// Gets or Sets Activities
        /// </summary>
        [DataMember(Name = "activities", EmitDefaultValue = true)]
        public List<Activity> Activities { get; set; }

        /// <summary>
        /// Gets or Sets Transitions
        /// </summary>
        [DataMember(Name = "transitions", EmitDefaultValue = true)]
        public List<Transition> Transitions { get; set; }

        /// <summary>
        /// Gets or Sets Localization
        /// </summary>
        [DataMember(Name = "localization", EmitDefaultValue = true)]
        public List<Translation> Localization { get; set; }

        /// <summary>
        /// Gets or Sets CodeActions
        /// </summary>
        [DataMember(Name = "codeActions", EmitDefaultValue = true)]
        public List<CodeAction> CodeActions { get; set; }

        /// <summary>
        /// Gets or Sets CodeActionsCommonUsings
        /// </summary>
        [DataMember(Name = "codeActionsCommonUsings", EmitDefaultValue = true)]
        public string CodeActionsCommonUsings { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalParams
        /// </summary>
        [DataMember(Name = "additionalParams", EmitDefaultValue = true)]
        public Dictionary<string, Object> AdditionalParams { get; set; }

        /// <summary>
        /// Gets or Sets CanBeInlined
        /// </summary>
        [DataMember(Name = "canBeInlined", EmitDefaultValue = true)]
        public bool CanBeInlined { get; set; }

        /// <summary>
        /// Gets or Sets LogEnabled
        /// </summary>
        [DataMember(Name = "logEnabled", EmitDefaultValue = true)]
        public bool LogEnabled { get; set; }

        /// <summary>
        /// Gets or Sets InlinedSchemes
        /// </summary>
        [DataMember(Name = "inlinedSchemes", EmitDefaultValue = true)]
        public List<string> InlinedSchemes { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets DefiningParametersString
        /// </summary>
        [DataMember(Name = "definingParametersString", EmitDefaultValue = true)]
        public string DefiningParametersString { get; set; }

        /// <summary>
        /// Gets or Sets RootSchemeCode
        /// </summary>
        [DataMember(Name = "rootSchemeCode", EmitDefaultValue = true)]
        public string RootSchemeCode { get; set; }

        /// <summary>
        /// Gets or Sets RootSchemeId
        /// </summary>
        [DataMember(Name = "rootSchemeId", EmitDefaultValue = true)]
        public Guid? RootSchemeId { get; set; }

        /// <summary>
        /// Gets or Sets IsObsolete
        /// </summary>
        [DataMember(Name = "isObsolete", EmitDefaultValue = true)]
        public bool IsObsolete { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets AllowedActivities
        /// </summary>
        [DataMember(Name = "allowedActivities", EmitDefaultValue = true)]
        public List<string> AllowedActivities { get; set; }

        /// <summary>
        /// Gets or Sets CalendarName
        /// </summary>
        [DataMember(Name = "calendarName", EmitDefaultValue = true)]
        public string CalendarName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Scheme {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DesignerSettings: ").Append(DesignerSettings).Append("\n");
            sb.Append("  Actors: ").Append(Actors).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Commands: ").Append(Commands).Append("\n");
            sb.Append("  Timers: ").Append(Timers).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Activities: ").Append(Activities).Append("\n");
            sb.Append("  Transitions: ").Append(Transitions).Append("\n");
            sb.Append("  Localization: ").Append(Localization).Append("\n");
            sb.Append("  CodeActions: ").Append(CodeActions).Append("\n");
            sb.Append("  CodeActionsCommonUsings: ").Append(CodeActionsCommonUsings).Append("\n");
            sb.Append("  AdditionalParams: ").Append(AdditionalParams).Append("\n");
            sb.Append("  CanBeInlined: ").Append(CanBeInlined).Append("\n");
            sb.Append("  LogEnabled: ").Append(LogEnabled).Append("\n");
            sb.Append("  InlinedSchemes: ").Append(InlinedSchemes).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  DefiningParametersString: ").Append(DefiningParametersString).Append("\n");
            sb.Append("  RootSchemeCode: ").Append(RootSchemeCode).Append("\n");
            sb.Append("  RootSchemeId: ").Append(RootSchemeId).Append("\n");
            sb.Append("  IsObsolete: ").Append(IsObsolete).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AllowedActivities: ").Append(AllowedActivities).Append("\n");
            sb.Append("  CalendarName: ").Append(CalendarName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
