/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// TenantStatus
    /// </summary>
    [DataContract(Name = "TenantStatus")]
    public partial class TenantStatus : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DatabaseStatus
        /// </summary>
        [DataMember(Name = "databaseStatus", EmitDefaultValue = false)]
        public DatabaseStatus? DatabaseStatus { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowRuntimeRunningStatus
        /// </summary>
        [DataMember(Name = "workflowRuntimeRunningStatus", EmitDefaultValue = false)]
        public RuntimeRunningStatus? WorkflowRuntimeRunningStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TenantStatus" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="databaseStatus">databaseStatus.</param>
        /// <param name="databaseException">databaseException.</param>
        /// <param name="workflowRuntimeRunningStatus">workflowRuntimeRunningStatus.</param>
        /// <param name="workflowRuntimeException">workflowRuntimeException.</param>
        public TenantStatus(string tenantId = default(string), DatabaseStatus? databaseStatus = default(DatabaseStatus?), ExceptionModel databaseException = default(ExceptionModel), RuntimeRunningStatus? workflowRuntimeRunningStatus = default(RuntimeRunningStatus?), ExceptionModel workflowRuntimeException = default(ExceptionModel))
        {
            this.TenantId = tenantId;
            this.DatabaseStatus = databaseStatus;
            this.DatabaseException = databaseException;
            this.WorkflowRuntimeRunningStatus = workflowRuntimeRunningStatus;
            this.WorkflowRuntimeException = workflowRuntimeException;
        }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets IsHealthy
        /// </summary>
        [DataMember(Name = "isHealthy", EmitDefaultValue = true)]
        public bool IsHealthy { get; private set; }

        /// <summary>
        /// Returns false as IsHealthy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsHealthy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DatabaseException
        /// </summary>
        [DataMember(Name = "databaseException", EmitDefaultValue = false)]
        public ExceptionModel DatabaseException { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowRuntimeException
        /// </summary>
        [DataMember(Name = "workflowRuntimeException", EmitDefaultValue = false)]
        public ExceptionModel WorkflowRuntimeException { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TenantStatus {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  IsHealthy: ").Append(IsHealthy).Append("\n");
            sb.Append("  DatabaseStatus: ").Append(DatabaseStatus).Append("\n");
            sb.Append("  DatabaseException: ").Append(DatabaseException).Append("\n");
            sb.Append("  WorkflowRuntimeRunningStatus: ").Append(WorkflowRuntimeRunningStatus).Append("\n");
            sb.Append("  WorkflowRuntimeException: ").Append(WorkflowRuntimeException).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
