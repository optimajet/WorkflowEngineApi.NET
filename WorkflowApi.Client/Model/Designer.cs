/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// Designer
    /// </summary>
    [DataContract(Name = "Designer")]
    public partial class Designer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Designer" /> class.
        /// </summary>
        /// <param name="x">x.</param>
        /// <param name="y">y.</param>
        /// <param name="bending">bending.</param>
        /// <param name="scale">scale.</param>
        /// <param name="color">color.</param>
        /// <param name="autoTextContrast">autoTextContrast.</param>
        /// <param name="group">group.</param>
        /// <param name="hidden">hidden.</param>
        /// <param name="overwriteActivityTo">overwriteActivityTo.</param>
        /// <param name="inlineElementSettings">inlineElementSettings.</param>
        public Designer(string x = default(string), string y = default(string), string bending = default(string), string scale = default(string), string color = default(string), bool autoTextContrast = default(bool), string group = default(string), bool hidden = default(bool), string overwriteActivityTo = default(string), Designer inlineElementSettings = default(Designer))
        {
            this.X = x;
            this.Y = y;
            this.Bending = bending;
            this.Scale = scale;
            this.Color = color;
            this.AutoTextContrast = autoTextContrast;
            this.Group = group;
            this.Hidden = hidden;
            this.OverwriteActivityTo = overwriteActivityTo;
            this.InlineElementSettings = inlineElementSettings;
        }

        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [DataMember(Name = "x", EmitDefaultValue = true)]
        public string X { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [DataMember(Name = "y", EmitDefaultValue = true)]
        public string Y { get; set; }

        /// <summary>
        /// Gets or Sets Bending
        /// </summary>
        [DataMember(Name = "bending", EmitDefaultValue = true)]
        public string Bending { get; set; }

        /// <summary>
        /// Gets or Sets Scale
        /// </summary>
        [DataMember(Name = "scale", EmitDefaultValue = true)]
        public string Scale { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = true)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets AutoTextContrast
        /// </summary>
        [DataMember(Name = "autoTextContrast", EmitDefaultValue = true)]
        public bool AutoTextContrast { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", EmitDefaultValue = true)]
        public string Group { get; set; }

        /// <summary>
        /// Gets or Sets Hidden
        /// </summary>
        [DataMember(Name = "hidden", EmitDefaultValue = true)]
        public bool Hidden { get; set; }

        /// <summary>
        /// Gets or Sets OverwriteActivityTo
        /// </summary>
        [DataMember(Name = "overwriteActivityTo", EmitDefaultValue = true)]
        public string OverwriteActivityTo { get; set; }

        /// <summary>
        /// Gets or Sets InlineElementSettings
        /// </summary>
        [DataMember(Name = "inlineElementSettings", EmitDefaultValue = false)]
        public Designer InlineElementSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Designer {\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Bending: ").Append(Bending).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  AutoTextContrast: ").Append(AutoTextContrast).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  OverwriteActivityTo: ").Append(OverwriteActivityTo).Append("\n");
            sb.Append("  InlineElementSettings: ").Append(InlineElementSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
