/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// ProcessInstance
    /// </summary>
    [DataContract(Name = "ProcessInstance")]
    public partial class ProcessInstance : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessInstance" /> class.
        /// </summary>
        /// <param name="processId">processId.</param>
        /// <param name="parentProcessId">parentProcessId.</param>
        /// <param name="rootProcessId">rootProcessId.</param>
        /// <param name="schemeId">schemeId.</param>
        /// <param name="previousState">previousState.</param>
        /// <param name="previousStateForDirect">previousStateForDirect.</param>
        /// <param name="previousStateForReverse">previousStateForReverse.</param>
        /// <param name="previousActivityName">previousActivityName.</param>
        /// <param name="previousActivityForDirectName">previousActivityForDirectName.</param>
        /// <param name="previousActivityForReverseName">previousActivityForReverseName.</param>
        /// <param name="currentActivityName">currentActivityName.</param>
        /// <param name="schemeCode">schemeCode.</param>
        /// <param name="currentState">currentState.</param>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="identityId">identityId.</param>
        /// <param name="impersonatedIdentityId">impersonatedIdentityId.</param>
        /// <param name="subprocessName">subprocessName.</param>
        /// <param name="creationDate">creationDate.</param>
        /// <param name="lastTransitionDate">lastTransitionDate.</param>
        /// <param name="logEnabled">logEnabled.</param>
        /// <param name="calendarName">calendarName.</param>
        /// <param name="isSchemeObsolete">isSchemeObsolete.</param>
        /// <param name="isSubprocess">isSubprocess.</param>
        /// <param name="isDeterminingParametersChanged">isDeterminingParametersChanged.</param>
        /// <param name="processParameters">processParameters.</param>
        public ProcessInstance(Guid processId = default(Guid), Guid? parentProcessId = default(Guid?), Guid rootProcessId = default(Guid), Guid schemeId = default(Guid), string previousState = default(string), string previousStateForDirect = default(string), string previousStateForReverse = default(string), string previousActivityName = default(string), string previousActivityForDirectName = default(string), string previousActivityForReverseName = default(string), string currentActivityName = default(string), string schemeCode = default(string), string currentState = default(string), string tenantId = default(string), string identityId = default(string), string impersonatedIdentityId = default(string), string subprocessName = default(string), DateTimeOffset creationDate = default(DateTimeOffset), DateTimeOffset? lastTransitionDate = default(DateTimeOffset?), bool logEnabled = default(bool), string calendarName = default(string), bool isSchemeObsolete = default(bool), bool isSubprocess = default(bool), bool isDeterminingParametersChanged = default(bool), List<ParameterDefinitionWithValue> processParameters = default(List<ParameterDefinitionWithValue>))
        {
            this.ProcessId = processId;
            this.ParentProcessId = parentProcessId;
            this.RootProcessId = rootProcessId;
            this.SchemeId = schemeId;
            this.PreviousState = previousState;
            this.PreviousStateForDirect = previousStateForDirect;
            this.PreviousStateForReverse = previousStateForReverse;
            this.PreviousActivityName = previousActivityName;
            this.PreviousActivityForDirectName = previousActivityForDirectName;
            this.PreviousActivityForReverseName = previousActivityForReverseName;
            this.CurrentActivityName = currentActivityName;
            this.SchemeCode = schemeCode;
            this.CurrentState = currentState;
            this.TenantId = tenantId;
            this.IdentityId = identityId;
            this.ImpersonatedIdentityId = impersonatedIdentityId;
            this.SubprocessName = subprocessName;
            this.CreationDate = creationDate;
            this.LastTransitionDate = lastTransitionDate;
            this.LogEnabled = logEnabled;
            this.CalendarName = calendarName;
            this.IsSchemeObsolete = isSchemeObsolete;
            this.IsSubprocess = isSubprocess;
            this.IsDeterminingParametersChanged = isDeterminingParametersChanged;
            this.ProcessParameters = processParameters;
        }

        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name = "processId", EmitDefaultValue = false)]
        public Guid ProcessId { get; set; }

        /// <summary>
        /// Gets or Sets ParentProcessId
        /// </summary>
        [DataMember(Name = "parentProcessId", EmitDefaultValue = true)]
        public Guid? ParentProcessId { get; set; }

        /// <summary>
        /// Gets or Sets RootProcessId
        /// </summary>
        [DataMember(Name = "rootProcessId", EmitDefaultValue = false)]
        public Guid RootProcessId { get; set; }

        /// <summary>
        /// Gets or Sets SchemeId
        /// </summary>
        [DataMember(Name = "schemeId", EmitDefaultValue = false)]
        public Guid SchemeId { get; set; }

        /// <summary>
        /// Gets or Sets PreviousState
        /// </summary>
        [DataMember(Name = "previousState", EmitDefaultValue = true)]
        public string PreviousState { get; set; }

        /// <summary>
        /// Gets or Sets PreviousStateForDirect
        /// </summary>
        [DataMember(Name = "previousStateForDirect", EmitDefaultValue = true)]
        public string PreviousStateForDirect { get; set; }

        /// <summary>
        /// Gets or Sets PreviousStateForReverse
        /// </summary>
        [DataMember(Name = "previousStateForReverse", EmitDefaultValue = true)]
        public string PreviousStateForReverse { get; set; }

        /// <summary>
        /// Gets or Sets PreviousActivityName
        /// </summary>
        [DataMember(Name = "previousActivityName", EmitDefaultValue = true)]
        public string PreviousActivityName { get; set; }

        /// <summary>
        /// Gets or Sets PreviousActivityForDirectName
        /// </summary>
        [DataMember(Name = "previousActivityForDirectName", EmitDefaultValue = true)]
        public string PreviousActivityForDirectName { get; set; }

        /// <summary>
        /// Gets or Sets PreviousActivityForReverseName
        /// </summary>
        [DataMember(Name = "previousActivityForReverseName", EmitDefaultValue = true)]
        public string PreviousActivityForReverseName { get; set; }

        /// <summary>
        /// Gets or Sets CurrentActivityName
        /// </summary>
        [DataMember(Name = "currentActivityName", EmitDefaultValue = true)]
        public string CurrentActivityName { get; set; }

        /// <summary>
        /// Gets or Sets SchemeCode
        /// </summary>
        [DataMember(Name = "schemeCode", EmitDefaultValue = true)]
        public string SchemeCode { get; set; }

        /// <summary>
        /// Gets or Sets CurrentState
        /// </summary>
        [DataMember(Name = "currentState", EmitDefaultValue = true)]
        public string CurrentState { get; set; }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets IdentityId
        /// </summary>
        [DataMember(Name = "identityId", EmitDefaultValue = true)]
        public string IdentityId { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatedIdentityId
        /// </summary>
        [DataMember(Name = "impersonatedIdentityId", EmitDefaultValue = true)]
        public string ImpersonatedIdentityId { get; set; }

        /// <summary>
        /// Gets or Sets SubprocessName
        /// </summary>
        [DataMember(Name = "subprocessName", EmitDefaultValue = true)]
        public string SubprocessName { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name = "creationDate", EmitDefaultValue = false)]
        public DateTimeOffset CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets LastTransitionDate
        /// </summary>
        [DataMember(Name = "lastTransitionDate", EmitDefaultValue = true)]
        public DateTimeOffset? LastTransitionDate { get; set; }

        /// <summary>
        /// Gets or Sets LogEnabled
        /// </summary>
        [DataMember(Name = "logEnabled", EmitDefaultValue = true)]
        public bool LogEnabled { get; set; }

        /// <summary>
        /// Gets or Sets CalendarName
        /// </summary>
        [DataMember(Name = "calendarName", EmitDefaultValue = true)]
        public string CalendarName { get; set; }

        /// <summary>
        /// Gets or Sets IsSchemeObsolete
        /// </summary>
        [DataMember(Name = "isSchemeObsolete", EmitDefaultValue = true)]
        public bool IsSchemeObsolete { get; set; }

        /// <summary>
        /// Gets or Sets IsSubprocess
        /// </summary>
        [DataMember(Name = "isSubprocess", EmitDefaultValue = true)]
        public bool IsSubprocess { get; set; }

        /// <summary>
        /// Gets or Sets IsDeterminingParametersChanged
        /// </summary>
        [DataMember(Name = "isDeterminingParametersChanged", EmitDefaultValue = true)]
        public bool IsDeterminingParametersChanged { get; set; }

        /// <summary>
        /// Gets or Sets ProcessParameters
        /// </summary>
        [DataMember(Name = "processParameters", EmitDefaultValue = true)]
        public List<ParameterDefinitionWithValue> ProcessParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessInstance {\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  ParentProcessId: ").Append(ParentProcessId).Append("\n");
            sb.Append("  RootProcessId: ").Append(RootProcessId).Append("\n");
            sb.Append("  SchemeId: ").Append(SchemeId).Append("\n");
            sb.Append("  PreviousState: ").Append(PreviousState).Append("\n");
            sb.Append("  PreviousStateForDirect: ").Append(PreviousStateForDirect).Append("\n");
            sb.Append("  PreviousStateForReverse: ").Append(PreviousStateForReverse).Append("\n");
            sb.Append("  PreviousActivityName: ").Append(PreviousActivityName).Append("\n");
            sb.Append("  PreviousActivityForDirectName: ").Append(PreviousActivityForDirectName).Append("\n");
            sb.Append("  PreviousActivityForReverseName: ").Append(PreviousActivityForReverseName).Append("\n");
            sb.Append("  CurrentActivityName: ").Append(CurrentActivityName).Append("\n");
            sb.Append("  SchemeCode: ").Append(SchemeCode).Append("\n");
            sb.Append("  CurrentState: ").Append(CurrentState).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  IdentityId: ").Append(IdentityId).Append("\n");
            sb.Append("  ImpersonatedIdentityId: ").Append(ImpersonatedIdentityId).Append("\n");
            sb.Append("  SubprocessName: ").Append(SubprocessName).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  LastTransitionDate: ").Append(LastTransitionDate).Append("\n");
            sb.Append("  LogEnabled: ").Append(LogEnabled).Append("\n");
            sb.Append("  CalendarName: ").Append(CalendarName).Append("\n");
            sb.Append("  IsSchemeObsolete: ").Append(IsSchemeObsolete).Append("\n");
            sb.Append("  IsSubprocess: ").Append(IsSubprocess).Append("\n");
            sb.Append("  IsDeterminingParametersChanged: ").Append(IsDeterminingParametersChanged).Append("\n");
            sb.Append("  ProcessParameters: ").Append(ProcessParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
