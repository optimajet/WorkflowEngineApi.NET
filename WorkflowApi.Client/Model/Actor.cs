/*
 * Workflow Engine API
 *
 * A Workflow Engine Web API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WorkflowApi.Client.Client.OpenAPIDateConverter;

namespace WorkflowApi.Client.Model
{
    /// <summary>
    /// Actor
    /// </summary>
    [DataContract(Name = "Actor")]
    public partial class Actor : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Actor" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="designerSettings">designerSettings.</param>
        /// <param name="originalName">originalName.</param>
        /// <param name="originalSchemeCode">originalSchemeCode.</param>
        /// <param name="wasInlined">wasInlined.</param>
        /// <param name="rule">rule.</param>
        /// <param name="value">value.</param>
        /// <param name="isPredefined">isPredefined.</param>
        public Actor(string name = default(string), Designer designerSettings = default(Designer), string originalName = default(string), string originalSchemeCode = default(string), bool wasInlined = default(bool), string rule = default(string), string value = default(string), bool isPredefined = default(bool))
        {
            this.Name = name;
            this.DesignerSettings = designerSettings;
            this.OriginalName = originalName;
            this.OriginalSchemeCode = originalSchemeCode;
            this.WasInlined = wasInlined;
            this.Rule = rule;
            this.Value = value;
            this.IsPredefined = isPredefined;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DesignerSettings
        /// </summary>
        [DataMember(Name = "designerSettings", EmitDefaultValue = false)]
        public Designer DesignerSettings { get; set; }

        /// <summary>
        /// Gets or Sets OriginalName
        /// </summary>
        [DataMember(Name = "originalName", EmitDefaultValue = true)]
        public string OriginalName { get; set; }

        /// <summary>
        /// Gets or Sets OriginalSchemeCode
        /// </summary>
        [DataMember(Name = "originalSchemeCode", EmitDefaultValue = true)]
        public string OriginalSchemeCode { get; set; }

        /// <summary>
        /// Gets or Sets WasInlined
        /// </summary>
        [DataMember(Name = "wasInlined", EmitDefaultValue = true)]
        public bool WasInlined { get; set; }

        /// <summary>
        /// Gets or Sets Rule
        /// </summary>
        [DataMember(Name = "rule", EmitDefaultValue = true)]
        public string Rule { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets IsPredefined
        /// </summary>
        [DataMember(Name = "isPredefined", EmitDefaultValue = true)]
        public bool IsPredefined { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Actor {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DesignerSettings: ").Append(DesignerSettings).Append("\n");
            sb.Append("  OriginalName: ").Append(OriginalName).Append("\n");
            sb.Append("  OriginalSchemeCode: ").Append(OriginalSchemeCode).Append("\n");
            sb.Append("  WasInlined: ").Append(WasInlined).Append("\n");
            sb.Append("  Rule: ").Append(Rule).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  IsPredefined: ").Append(IsPredefined).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
